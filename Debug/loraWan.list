
loraWan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013af8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002250  08013c98  08013c98  00014c98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ee8  08015ee8  0001721c  2**0
                  CONTENTS
  4 .ARM          00000008  08015ee8  08015ee8  00016ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015ef0  08015ef0  0001721c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ef0  08015ef0  00016ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015ef4  08015ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  08015ef8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001721c  2**0
                  CONTENTS
 10 .bss          00000e50  2000021c  2000021c  0001721c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000106c  2000106c  0001721c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001721c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000224f1  00000000  00000000  0001724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e01  00000000  00000000  0003973d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea0  00000000  00000000  0003e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017e6  00000000  00000000  000403e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026919  00000000  00000000  00041bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002779b  00000000  00000000  000684df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deda9  00000000  00000000  0008fc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016ea23  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000094ec  00000000  00000000  0016ea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  00177f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000021c 	.word	0x2000021c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08013c80 	.word	0x08013c80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000220 	.word	0x20000220
 80001dc:	08013c80 	.word	0x08013c80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f96:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fa2:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000fc2:	bf00      	nop
     __ASM volatile ("NOP");
 8000fc4:	bf00      	nop
 __ASM volatile ("NOP");
 8000fc6:	bf00      	nop

  /* Check if clock cycle counter has started */

			 if(DWT->CYCCNT)
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e000      	b.n	8000fd6 <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000fd4:	2301      	movs	r3, #1
				}



}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000edf0 	.word	0xe000edf0
 8000fe4:	e0001000 	.word	0xe0001000

08000fe8 <delay>:
//	__HAL_TIM_SET_COUNTER(&htim1, 0);
//	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
//}
//HAL_TIM_Base_Start(&htim1);
void delay(volatile uint32_t microseconds)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <delay+0x40>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ff6:	f006 ff3d 	bl	8007e74 <HAL_RCC_GetHCLKFreq>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <delay+0x44>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9b      	lsrs	r3, r3, #18
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 800100c:	bf00      	nop
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <delay+0x40>)
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad2      	subs	r2, r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3f8      	bcc.n	800100e <delay+0x26>
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e0001000 	.word	0xe0001000
 800102c:	431bde83 	.word	0x431bde83

08001030 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	460b      	mov	r3, r1
 800103a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	4619      	mov	r1, r3
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f004 fba6 	bl	80057b0 <HAL_GPIO_Init>
}
 8001064:	bf00      	nop
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f004 fb88 	bl	80057b0 <HAL_GPIO_Init>
}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DHT_Start>:


void DHT_Start (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80010ac:	f7ff ff6c 	bl	8000f88 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80010b0:	2104      	movs	r1, #4
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <DHT_Start+0x40>)
 80010b4:	f7ff ffbc 	bl	8001030 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 80010b8:	2200      	movs	r2, #0
 80010ba:	2104      	movs	r1, #4
 80010bc:	480a      	ldr	r0, [pc, #40]	@ (80010e8 <DHT_Start+0x40>)
 80010be:	f004 fd19 	bl	8005af4 <HAL_GPIO_WritePin>
#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
#endif

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay - DHT22 1100 la dep
 80010c2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80010c6:	f7ff ff8f 	bl	8000fe8 <delay>
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 80010ca:	2201      	movs	r2, #1
 80010cc:	2104      	movs	r1, #4
 80010ce:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <DHT_Start+0x40>)
 80010d0:	f004 fd10 	bl	8005af4 <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 80010d4:	201e      	movs	r0, #30
 80010d6:	f7ff ff87 	bl	8000fe8 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80010da:	2104      	movs	r1, #4
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <DHT_Start+0x40>)
 80010de:	f7ff ffc5 	bl	800106c <Set_Pin_Input>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	48000800 	.word	0x48000800

080010ec <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
	delay (40);
 80010f6:	2028      	movs	r0, #40	@ 0x28
 80010f8:	f7ff ff76 	bl	8000fe8 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80010fc:	2104      	movs	r1, #4
 80010fe:	4811      	ldr	r0, [pc, #68]	@ (8001144 <DHT_Check_Response+0x58>)
 8001100:	f004 fce0 	bl	8005ac4 <HAL_GPIO_ReadPin>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d10e      	bne.n	8001128 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800110a:	2050      	movs	r0, #80	@ 0x50
 800110c:	f7ff ff6c 	bl	8000fe8 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 8001110:	2104      	movs	r1, #4
 8001112:	480c      	ldr	r0, [pc, #48]	@ (8001144 <DHT_Check_Response+0x58>)
 8001114:	f004 fcd6 	bl	8005ac4 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <DHT_Check_Response+0x38>
		{
			Response = 1;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <DHT_Check_Response+0x3c>
		}
		else 
		{
			Response = -1;
 8001124:	23ff      	movs	r3, #255	@ 0xff
 8001126:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8001128:	bf00      	nop
 800112a:	2104      	movs	r1, #4
 800112c:	4805      	ldr	r0, [pc, #20]	@ (8001144 <DHT_Check_Response+0x58>)
 800112e:	f004 fcc9 	bl	8005ac4 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f8      	bne.n	800112a <DHT_Check_Response+0x3e>

	return Response;
 8001138:	79fb      	ldrb	r3, [r7, #7]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	48000800 	.word	0x48000800

08001148 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800114e:	2300      	movs	r3, #0
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	e037      	b.n	80011c4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001154:	bf00      	nop
 8001156:	2104      	movs	r1, #4
 8001158:	481e      	ldr	r0, [pc, #120]	@ (80011d4 <DHT_Read+0x8c>)
 800115a:	f004 fcb3 	bl	8005ac4 <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d0f8      	beq.n	8001156 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001164:	2028      	movs	r0, #40	@ 0x28
 8001166:	f7ff ff3f 	bl	8000fe8 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800116a:	2104      	movs	r1, #4
 800116c:	4819      	ldr	r0, [pc, #100]	@ (80011d4 <DHT_Read+0x8c>)
 800116e:	f004 fca9 	bl	8005ac4 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d10e      	bne.n	8001196 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2201      	movs	r2, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	b25b      	sxtb	r3, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	b25a      	sxtb	r2, r3
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	4013      	ands	r3, r2
 8001190:	b25b      	sxtb	r3, r3
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	e00b      	b.n	80011ae <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001196:	79bb      	ldrb	r3, [r7, #6]
 8001198:	f1c3 0307 	rsb	r3, r3, #7
 800119c:	2201      	movs	r2, #1
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80011ae:	bf00      	nop
 80011b0:	2104      	movs	r1, #4
 80011b2:	4808      	ldr	r0, [pc, #32]	@ (80011d4 <DHT_Read+0x8c>)
 80011b4:	f004 fc86 	bl	8005ac4 <HAL_GPIO_ReadPin>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f8      	bne.n	80011b0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	3301      	adds	r3, #1
 80011c2:	71bb      	strb	r3, [r7, #6]
 80011c4:	79bb      	ldrb	r3, [r7, #6]
 80011c6:	2b07      	cmp	r3, #7
 80011c8:	d9c4      	bls.n	8001154 <DHT_Read+0xc>
	}
	return i;
 80011ca:	79fb      	ldrb	r3, [r7, #7]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	48000800 	.word	0x48000800

080011d8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  DHT_Start ();
 80011e0:	f7ff ff62 	bl	80010a8 <DHT_Start>
	Presence = DHT_Check_Response ();
 80011e4:	f7ff ff82 	bl	80010ec <DHT_Check_Response>
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	4b27      	ldr	r3, [pc, #156]	@ (800128c <DHT_GetData+0xb4>)
 80011ee:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80011f0:	f7ff ffaa 	bl	8001148 <DHT_Read>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <DHT_GetData+0xb8>)
 80011fa:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80011fc:	f7ff ffa4 	bl	8001148 <DHT_Read>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <DHT_GetData+0xbc>)
 8001206:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001208:	f7ff ff9e 	bl	8001148 <DHT_Read>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <DHT_GetData+0xc0>)
 8001212:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8001214:	f7ff ff98 	bl	8001148 <DHT_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	461a      	mov	r2, r3
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <DHT_GetData+0xc4>)
 800121e:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 8001220:	f7ff ff92 	bl	8001148 <DHT_Read>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <DHT_GetData+0xc8>)
 800122a:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800122c:	4b1c      	ldr	r3, [pc, #112]	@ (80012a0 <DHT_GetData+0xc8>)
 800122e:	881b      	ldrh	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <DHT_GetData+0xb8>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <DHT_GetData+0xbc>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4413      	add	r3, r2
 800123e:	4a16      	ldr	r2, [pc, #88]	@ (8001298 <DHT_GetData+0xc0>)
 8001240:	7812      	ldrb	r2, [r2, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a15      	ldr	r2, [pc, #84]	@ (800129c <DHT_GetData+0xc4>)
 8001246:	7812      	ldrb	r2, [r2, #0]
 8001248:	4413      	add	r3, r2
 800124a:	4299      	cmp	r1, r3
 800124c:	d119      	bne.n	8001282 <DHT_GetData+0xaa>
			DHT_Data->Temperature = Temp_byte1;
			DHT_Data->Humidity = Rh_byte1;
		#endif

		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
 800124e:	4b12      	ldr	r3, [pc, #72]	@ (8001298 <DHT_GetData+0xc0>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	4a11      	ldr	r2, [pc, #68]	@ (800129c <DHT_GetData+0xc4>)
 8001256:	7812      	ldrb	r2, [r2, #0]
 8001258:	4313      	orrs	r3, r2
 800125a:	ee07 3a90 	vmov	s15, r3
 800125e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <DHT_GetData+0xb8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <DHT_GetData+0xbc>)
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	4313      	orrs	r3, r2
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	edc3 7a01 	vstr	s15, [r3, #4]
		#endif
	}
	
	
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000023e 	.word	0x2000023e
 8001290:	20000238 	.word	0x20000238
 8001294:	20000239 	.word	0x20000239
 8001298:	2000023a 	.word	0x2000023a
 800129c:	2000023b 	.word	0x2000023b
 80012a0:	2000023c 	.word	0x2000023c

080012a4 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <Ringbuf_init+0x3c>)
 80012aa:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <Ringbuf_init+0x40>)
 80012ac:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <Ringbuf_init+0x44>)
 80012b0:	4a0e      	ldr	r2, [pc, #56]	@ (80012ec <Ringbuf_init+0x48>)
 80012b2:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80012b4:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <Ringbuf_init+0x4c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	4b0d      	ldr	r3, [pc, #52]	@ (80012f0 <Ringbuf_init+0x4c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <Ringbuf_init+0x4c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <Ringbuf_init+0x4c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0220 	orr.w	r2, r2, #32
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	2000036c 	.word	0x2000036c
 80012e4:	20000244 	.word	0x20000244
 80012e8:	20000370 	.word	0x20000370
 80012ec:	200002d8 	.word	0x200002d8
 80012f0:	20000658 	.word	0x20000658

080012f4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <store_char+0x54>)
 800130a:	fba3 1302 	umull	r1, r3, r3, r2
 800130e:	099b      	lsrs	r3, r3, #6
 8001310:	218a      	movs	r1, #138	@ 0x8a
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	429a      	cmp	r2, r3
 8001324:	d009      	beq.n	800133a <store_char+0x46>
    buffer->buffer[buffer->head] = c;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	79f9      	ldrb	r1, [r7, #7]
 8001330:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	76b981db 	.word	0x76b981db

0800134c <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <Uart_read+0x60>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <Uart_read+0x60>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001362:	429a      	cmp	r2, r3
 8001364:	d102      	bne.n	800136c <Uart_read+0x20>
  {
    return -1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e019      	b.n	80013a0 <Uart_read+0x54>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <Uart_read+0x60>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <Uart_read+0x60>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <Uart_read+0x60>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <Uart_read+0x60>)
 8001388:	6819      	ldr	r1, [r3, #0]
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <Uart_read+0x64>)
 800138c:	fba3 0302 	umull	r0, r3, r3, r2
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	208a      	movs	r0, #138	@ 0x8a
 8001394:	fb00 f303 	mul.w	r3, r0, r3
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
    return c;
 800139e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	2000036c 	.word	0x2000036c
 80013b0:	76b981db 	.word	0x76b981db

080013b4 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <IsDataAvailable+0x3c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <IsDataAvailable+0x3c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	338a      	adds	r3, #138	@ 0x8a
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <IsDataAvailable+0x40>)
 80013d6:	fba2 1203 	umull	r1, r2, r2, r3
 80013da:	0992      	lsrs	r2, r2, #6
 80013dc:	218a      	movs	r1, #138	@ 0x8a
 80013de:	fb01 f202 	mul.w	r2, r1, r2
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	b29b      	uxth	r3, r3
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	2000036c 	.word	0x2000036c
 80013f4:	76b981db 	.word	0x76b981db

080013f8 <Uart_flush>:
		indx++;
	}
}

void Uart_flush (void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <Uart_flush+0x2c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	228a      	movs	r2, #138	@ 0x8a
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f010 fbad 	bl	8011b64 <memset>
	_rx_buffer->head = 0;
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <Uart_flush+0x2c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2200      	movs	r2, #0
 8001410:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	_rx_buffer->tail = 0;
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <Uart_flush+0x2c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000036c 	.word	0x2000036c

08001428 <Uart_peek>:

int Uart_peek()
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <Uart_peek+0x38>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <Uart_peek+0x38>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143c:	429a      	cmp	r2, r3
 800143e:	d102      	bne.n	8001446 <Uart_peek+0x1e>
  {
    return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e006      	b.n	8001454 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001446:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <Uart_peek+0x38>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <Uart_peek+0x38>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001452:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001454:	4618      	mov	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000036c 	.word	0x2000036c

08001464 <Get_after>:

/* must be used after wait_for function
 * get the entered number of characters after the entered string
 */
int Get_after (char *string, uint8_t numberofchars, char *buffertosave)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	460b      	mov	r3, r1
 800146e:	607a      	str	r2, [r7, #4]
 8001470:	72fb      	strb	r3, [r7, #11]
	for (int indx=0; indx<numberofchars; indx++)
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e01e      	b.n	80014b6 <Get_after+0x52>
	{
		timeout = TIMEOUT_DEF;
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <Get_after+0x64>)
 800147a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800147e:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);  // wait until some data is available
 8001480:	bf00      	nop
 8001482:	f7ff ff97 	bl	80013b4 <IsDataAvailable>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d103      	bne.n	8001494 <Get_after+0x30>
 800148c:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <Get_after+0x64>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f6      	bne.n	8001482 <Get_after+0x1e>
		if (timeout == 0) return 0;  // if data isn't available within time, then return 0
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <Get_after+0x64>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <Get_after+0x3c>
 800149c:	2300      	movs	r3, #0
 800149e:	e00f      	b.n	80014c0 <Get_after+0x5c>
		buffertosave[indx] = Uart_read();  // save the data into the buffer... increments the tail
 80014a0:	f7ff ff54 	bl	800134c <Uart_read>
 80014a4:	4601      	mov	r1, r0
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4413      	add	r3, r2
 80014ac:	b2ca      	uxtb	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	3301      	adds	r3, #1
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	7afb      	ldrb	r3, [r7, #11]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dbdc      	blt.n	8001478 <Get_after+0x14>
	}
	return 1;
 80014be:	2301      	movs	r3, #1
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000240 	.word	0x20000240

080014cc <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7fe fed1 	bl	8000280 <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80014e2:	4b42      	ldr	r3, [pc, #264]	@ (80015ec <Wait_for+0x120>)
 80014e4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80014e8:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80014ea:	bf00      	nop
 80014ec:	f7ff ff62 	bl	80013b4 <IsDataAvailable>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d103      	bne.n	80014fe <Wait_for+0x32>
 80014f6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <Wait_for+0x120>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f6      	bne.n	80014ec <Wait_for+0x20>
	if (timeout == 0) return 0;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	@ (80015ec <Wait_for+0x120>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d11f      	bne.n	8001546 <Wait_for+0x7a>
 8001506:	2300      	movs	r3, #0
 8001508:	e06c      	b.n	80015e4 <Wait_for+0x118>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 800150a:	4b39      	ldr	r3, [pc, #228]	@ (80015f0 <Wait_for+0x124>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001512:	4b37      	ldr	r3, [pc, #220]	@ (80015f0 <Wait_for+0x124>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800151a:	429a      	cmp	r2, r3
 800151c:	d011      	beq.n	8001542 <Wait_for+0x76>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 800151e:	4b34      	ldr	r3, [pc, #208]	@ (80015f0 <Wait_for+0x124>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <Wait_for+0x124>)
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	4b31      	ldr	r3, [pc, #196]	@ (80015f4 <Wait_for+0x128>)
 800152e:	fba3 0302 	umull	r0, r3, r3, r2
 8001532:	099b      	lsrs	r3, r3, #6
 8001534:	208a      	movs	r0, #138	@ 0x8a
 8001536:	fb00 f303 	mul.w	r3, r0, r3
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001540:	e001      	b.n	8001546 <Wait_for+0x7a>
		}

		else
		{
			return 0;
 8001542:	2300      	movs	r3, #0
 8001544:	e04e      	b.n	80015e4 <Wait_for+0x118>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001546:	f7ff ff6f 	bl	8001428 <Uart_peek>
 800154a:	4601      	mov	r1, r0
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	4413      	add	r3, r2
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	4299      	cmp	r1, r3
 8001556:	d1d8      	bne.n	800150a <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001558:	e02d      	b.n	80015b6 <Wait_for+0xea>
	{
		// now we will peek for the other letters too
		so_far++;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3301      	adds	r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001560:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <Wait_for+0x124>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	4b21      	ldr	r3, [pc, #132]	@ (80015f0 <Wait_for+0x124>)
 800156c:	6819      	ldr	r1, [r3, #0]
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <Wait_for+0x128>)
 8001570:	fba3 0302 	umull	r0, r3, r3, r2
 8001574:	099b      	lsrs	r3, r3, #6
 8001576:	208a      	movs	r0, #138	@ 0x8a
 8001578:	fb00 f303 	mul.w	r3, r0, r3
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
		if (so_far == len) return 1;
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	429a      	cmp	r2, r3
 8001588:	d101      	bne.n	800158e <Wait_for+0xc2>
 800158a:	2301      	movs	r3, #1
 800158c:	e02a      	b.n	80015e4 <Wait_for+0x118>
		timeout = TIMEOUT_DEF;
 800158e:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <Wait_for+0x120>)
 8001590:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001594:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001596:	bf00      	nop
 8001598:	f7ff ff0c 	bl	80013b4 <IsDataAvailable>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <Wait_for+0xde>
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <Wait_for+0x120>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f6      	bne.n	8001598 <Wait_for+0xcc>
		if (timeout == 0) return 0;
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <Wait_for+0x120>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <Wait_for+0xea>
 80015b2:	2300      	movs	r3, #0
 80015b4:	e016      	b.n	80015e4 <Wait_for+0x118>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80015b6:	f7ff ff37 	bl	8001428 <Uart_peek>
 80015ba:	4601      	mov	r1, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4299      	cmp	r1, r3
 80015c6:	d0c8      	beq.n	800155a <Wait_for+0x8e>
	}

	if (so_far != len)
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d002      	beq.n	80015d6 <Wait_for+0x10a>
	{
		so_far = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
		goto again;
 80015d4:	e785      	b.n	80014e2 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d101      	bne.n	80015e2 <Wait_for+0x116>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <Wait_for+0x118>
	else return 0;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000240 	.word	0x20000240
 80015f0:	2000036c 	.word	0x2000036c
 80015f4:	76b981db 	.word	0x76b981db

080015f8 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b00      	cmp	r3, #0
 8001618:	d014      	beq.n	8001644 <Uart_isr+0x4c>
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00f      	beq.n	8001644 <Uart_isr+0x4c>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001630:	b29b      	uxth	r3, r3
 8001632:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <Uart_isr+0xc4>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fe59 	bl	80012f4 <store_char>
        return;
 8001642:	e038      	b.n	80016b6 <Uart_isr+0xbe>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164a:	2b00      	cmp	r3, #0
 800164c:	d033      	beq.n	80016b6 <Uart_isr+0xbe>
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001654:	2b00      	cmp	r3, #0
 8001656:	d02e      	beq.n	80016b6 <Uart_isr+0xbe>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001658:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <Uart_isr+0xc8>)
 800165a:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <Uart_isr+0xc8>)
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001664:	429a      	cmp	r2, r3
 8001666:	d108      	bne.n	800167a <Uart_isr+0x82>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001676:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->RDR = c;

    	    }
    	return;
 8001678:	e01c      	b.n	80016b4 <Uart_isr+0xbc>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <Uart_isr+0xc8>)
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001680:	4a0f      	ldr	r2, [pc, #60]	@ (80016c0 <Uart_isr+0xc8>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <Uart_isr+0xc8>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <Uart_isr+0xcc>)
 8001690:	fba3 1302 	umull	r1, r3, r3, r2
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	218a      	movs	r1, #138	@ 0x8a
 8001698:	fb01 f303 	mul.w	r3, r1, r3
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	4a08      	ldr	r2, [pc, #32]	@ (80016c0 <Uart_isr+0xc8>)
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    	      huart->Instance->ISR;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->RDR = c;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	7bba      	ldrb	r2, [r7, #14]
 80016b0:	b292      	uxth	r2, r2
 80016b2:	849a      	strh	r2, [r3, #36]	@ 0x24
    	return;
 80016b4:	bf00      	nop
    }
}
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	2000036c 	.word	0x2000036c
 80016c0:	200002d8 	.word	0x200002d8
 80016c4:	76b981db 	.word	0x76b981db

080016c8 <BH1750_Cmd_Write>:
	BH1750.mode	=	BH_ONE_H_MODE;
	BH1750.status	= GOOG;
}

void BH1750_Cmd_Write(uint8_t cmd)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af02      	add	r7, sp, #8
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	uint8_t data[1];
	data[0] = cmd;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	733b      	strb	r3, [r7, #12]
	while(HAL_I2C_Master_Transmit(&hi2c2,BH1750_Addr_L,data,1,BH1750.time)!=HAL_OK);
 80016d6:	bf00      	nop
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <BH1750_Cmd_Write+0x40>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f107 020c 	add.w	r2, r7, #12
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	2301      	movs	r3, #1
 80016e4:	2146      	movs	r1, #70	@ 0x46
 80016e6:	4809      	ldr	r0, [pc, #36]	@ (800170c <BH1750_Cmd_Write+0x44>)
 80016e8:	f004 fad0 	bl	8005c8c <HAL_I2C_Master_Transmit>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f2      	bne.n	80016d8 <BH1750_Cmd_Write+0x10>
	__HAL_I2C_CLEAR_FLAG(&hi2c2,I2C_FLAG_STOPF);
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <BH1750_Cmd_Write+0x44>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2220      	movs	r2, #32
 80016f8:	61da      	str	r2, [r3, #28]
	HAL_Delay(100);
 80016fa:	2064      	movs	r0, #100	@ 0x64
 80016fc:	f002 f91a 	bl	8003934 <HAL_Delay>
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000374 	.word	0x20000374
 800170c:	200004bc 	.word	0x200004bc

08001710 <BH1750_Start>:
void BH1750_Start(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	BH1750_Cmd_Write(BH1750_ON);	 //power on
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff ffd7 	bl	80016c8 <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750_RESET);	//clear
 800171a:	2007      	movs	r0, #7
 800171c:	f7ff ffd4 	bl	80016c8 <BH1750_Cmd_Write>
	BH1750_Cmd_Write(BH1750.mode);  //mode 
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <BH1750_Start+0x28>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ffcf 	bl	80016c8 <BH1750_Cmd_Write>
	HAL_Delay(500);
 800172a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800172e:	f002 f901 	bl	8003934 <HAL_Delay>
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000374 	.word	0x20000374

0800173c <BH1750_Read>:
uint16_t BH1750_Read(void)
{   	
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af02      	add	r7, sp, #8
	uint8_t data_re[2] = {0,0};
 8001742:	2300      	movs	r3, #0
 8001744:	80bb      	strh	r3, [r7, #4]
	while(HAL_I2C_Master_Receive(&hi2c2,BH1750_Addr_L,data_re,2,BH1750.time*2)!=HAL_OK);
 8001746:	bf00      	nop
 8001748:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <BH1750_Read+0x80>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	1d3a      	adds	r2, r7, #4
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2302      	movs	r3, #2
 8001754:	2146      	movs	r1, #70	@ 0x46
 8001756:	481a      	ldr	r0, [pc, #104]	@ (80017c0 <BH1750_Read+0x84>)
 8001758:	f004 fbb0 	bl	8005ebc <HAL_I2C_Master_Receive>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f2      	bne.n	8001748 <BH1750_Read+0xc>
	HAL_Delay(100);
 8001762:	2064      	movs	r0, #100	@ 0x64
 8001764:	f002 f8e6 	bl	8003934 <HAL_Delay>
	BH1750.result_lx=data_re[0];
 8001768:	793b      	ldrb	r3, [r7, #4]
 800176a:	461a      	mov	r2, r3
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <BH1750_Read+0x80>)
 800176e:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx=(data_re[0]<<8)+data_re[1];
 8001770:	793b      	ldrb	r3, [r7, #4]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b29b      	uxth	r3, r3
 8001776:	797a      	ldrb	r2, [r7, #5]
 8001778:	4413      	add	r3, r2
 800177a:	b29a      	uxth	r2, r3
 800177c:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <BH1750_Read+0x80>)
 800177e:	819a      	strh	r2, [r3, #12]
	BH1750.result_lx= BH1750.result_lx/1.2;
 8001780:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <BH1750_Read+0x80>)
 8001782:	899b      	ldrh	r3, [r3, #12]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fed5 	bl	8000534 <__aeabi_i2d>
 800178a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <BH1750_Read+0x88>)
 8001790:	f7ff f864 	bl	800085c <__aeabi_ddiv>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	f7ff fa0c 	bl	8000bb8 <__aeabi_d2uiz>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <BH1750_Read+0x80>)
 80017a6:	819a      	strh	r2, [r3, #12]
	HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	@ 0x64
 80017aa:	f002 f8c3 	bl	8003934 <HAL_Delay>
	return BH1750.result_lx;
 80017ae:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <BH1750_Read+0x80>)
 80017b0:	899b      	ldrh	r3, [r3, #12]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000374 	.word	0x20000374
 80017c0:	200004bc 	.word	0x200004bc
 80017c4:	3ff33333 	.word	0x3ff33333

080017c8 <HAL_ADC_ConvCpltCallback>:

char messCopy[30]; // debug purpose

uint8_t mydata[41];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000814 	.word	0x20000814

080017e8 <readBattery>:

void readBattery(void){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc4);
 80017ec:	482e      	ldr	r0, [pc, #184]	@ (80018a8 <readBattery+0xc0>)
 80017ee:	f002 faf3 	bl	8003dd8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc4, 100);
 80017f2:	2164      	movs	r1, #100	@ 0x64
 80017f4:	482c      	ldr	r0, [pc, #176]	@ (80018a8 <readBattery+0xc0>)
 80017f6:	f002 fc3b 	bl	8004070 <HAL_ADC_PollForConversion>
	battery_level = ((HAL_ADC_GetValue(&hadc4)*3.3/4095*4.28)-8.25)/(12.6-8.25) * 100;
 80017fa:	482b      	ldr	r0, [pc, #172]	@ (80018a8 <readBattery+0xc0>)
 80017fc:	f002 fe56 	bl	80044ac <HAL_ADC_GetValue>
 8001800:	4603      	mov	r3, r0
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe86 	bl	8000514 <__aeabi_ui2d>
 8001808:	a31f      	add	r3, pc, #124	@ (adr r3, 8001888 <readBattery+0xa0>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fefb 	bl	8000608 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001890 <readBattery+0xa8>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7ff f81c 	bl	800085c <__aeabi_ddiv>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	a31a      	add	r3, pc, #104	@ (adr r3, 8001898 <readBattery+0xb0>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fee9 	bl	8000608 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <readBattery+0xc4>)
 8001844:	f7fe fd28 	bl	8000298 <__aeabi_dsub>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	a313      	add	r3, pc, #76	@ (adr r3, 80018a0 <readBattery+0xb8>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7ff f801 	bl	800085c <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <readBattery+0xc8>)
 8001868:	f7fe fece 	bl	8000608 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f9c0 	bl	8000bf8 <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <readBattery+0xcc>)
 800187c:	6013      	str	r3, [r2, #0]
	HAL_ADC_Stop(&hadc4);
 800187e:	480a      	ldr	r0, [pc, #40]	@ (80018a8 <readBattery+0xc0>)
 8001880:	f002 fbc0 	bl	8004004 <HAL_ADC_Stop>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	66666666 	.word	0x66666666
 800188c:	400a6666 	.word	0x400a6666
 8001890:	00000000 	.word	0x00000000
 8001894:	40affe00 	.word	0x40affe00
 8001898:	51eb851f 	.word	0x51eb851f
 800189c:	40111eb8 	.word	0x40111eb8
 80018a0:	66666666 	.word	0x66666666
 80018a4:	40116666 	.word	0x40116666
 80018a8:	200003d4 	.word	0x200003d4
 80018ac:	40208000 	.word	0x40208000
 80018b0:	40590000 	.word	0x40590000
 80018b4:	20000808 	.word	0x20000808

080018b8 <Read_DataDHT>:
void Read_DataDHT(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
 	DHT_GetData(&DHT22_Data);
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <Read_DataDHT+0x38>)
 80018be:	f7ff fc8b 	bl	80011d8 <DHT_GetData>
 	Humidity = DHT22_Data.Humidity/10.0;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <Read_DataDHT+0x38>)
 80018c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80018c8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80018cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d0:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <Read_DataDHT+0x3c>)
 80018d2:	edc3 7a00 	vstr	s15, [r3]
 	Temperature = DHT22_Data.Temperature/10.0;
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <Read_DataDHT+0x38>)
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80018e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e4:	4b04      	ldr	r3, [pc, #16]	@ (80018f8 <Read_DataDHT+0x40>)
 80018e6:	edc3 7a00 	vstr	s15, [r3]
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200007f4 	.word	0x200007f4
 80018f4:	20000800 	.word	0x20000800
 80018f8:	200007fc 	.word	0x200007fc

080018fc <readSensor>:

void readSensor(){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	Read_DataDHT();
 8001900:	f7ff ffda 	bl	80018b8 <Read_DataDHT>
	HAL_ADC_Start_DMA(&hadc3,(uint32_t*)adcDMA,adcCount);
 8001904:	2302      	movs	r3, #2
 8001906:	461a      	mov	r2, r3
 8001908:	490d      	ldr	r1, [pc, #52]	@ (8001940 <readSensor+0x44>)
 800190a:	480e      	ldr	r0, [pc, #56]	@ (8001944 <readSensor+0x48>)
 800190c:	f002 fcb2 	bl	8004274 <HAL_ADC_Start_DMA>
	while(adcFlag==0);
 8001910:	bf00      	nop
 8001912:	4b0d      	ldr	r3, [pc, #52]	@ (8001948 <readSensor+0x4c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0fb      	beq.n	8001912 <readSensor+0x16>
	adcFlag = 0;
 800191a:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <readSensor+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
	readBattery();
 8001920:	f7ff ff62 	bl	80017e8 <readBattery>
	BH1750_Start();
 8001924:	f7ff fef4 	bl	8001710 <BH1750_Start>
	value_lux=BH1750_Read();
 8001928:	f7ff ff08 	bl	800173c <BH1750_Read>
 800192c:	4603      	mov	r3, r0
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <readSensor+0x50>)
 8001938:	edc3 7a00 	vstr	s15, [r3]
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000810 	.word	0x20000810
 8001944:	20000384 	.word	0x20000384
 8001948:	20000814 	.word	0x20000814
 800194c:	20000804 	.word	0x20000804

08001950 <canopyControl>:

void canopyControl(bool state){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	curCanopyState = state;
 800195a:	4a1e      	ldr	r2, [pc, #120]	@ (80019d4 <canopyControl+0x84>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	7013      	strb	r3, [r2, #0]
	if(state){ //Forward
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d019      	beq.n	800199a <canopyControl+0x4a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 1);
 8001966:	2201      	movs	r2, #1
 8001968:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800196c:	481a      	ldr	r0, [pc, #104]	@ (80019d8 <canopyControl+0x88>)
 800196e:	f004 f8c1 	bl	8005af4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001978:	4817      	ldr	r0, [pc, #92]	@ (80019d8 <canopyControl+0x88>)
 800197a:	f004 f8bb 	bl	8005af4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 1000);
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <canopyControl+0x8c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001986:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(5000);
 8001988:	f241 3088 	movw	r0, #5000	@ 0x1388
 800198c:	f001 ffd2 	bl	8003934 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 8001990:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <canopyControl+0x8c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2200      	movs	r2, #0
 8001996:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 1000);
		HAL_Delay(5000);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
	}
}
 8001998:	e018      	b.n	80019cc <canopyControl+0x7c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <canopyControl+0x88>)
 80019a2:	f004 f8a7 	bl	8005af4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 1);
 80019a6:	2201      	movs	r2, #1
 80019a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80019ac:	480a      	ldr	r0, [pc, #40]	@ (80019d8 <canopyControl+0x88>)
 80019ae:	f004 f8a1 	bl	8005af4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 1000);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <canopyControl+0x8c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_Delay(5000);
 80019bc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80019c0:	f001 ffb8 	bl	8003934 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1, 0);
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <canopyControl+0x8c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000819 	.word	0x20000819
 80019d8:	48000800 	.word	0x48000800
 80019dc:	20000574 	.word	0x20000574

080019e0 <generateData>:
}

const uint16_t AirValue = 2800; //2800 - 3.3V / 4095 - 5V
const uint16_t WaterValue = 1308; //1308 - 3.3V / 2428 - 5V
float intervals = (AirValue - WaterValue)/3;
void generateData(void){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
	readSensor();
 80019e6:	f7ff ff89 	bl	80018fc <readSensor>
	mydata[0] = Humidity;
 80019ea:	4b57      	ldr	r3, [pc, #348]	@ (8001b48 <generateData+0x168>)
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80019f8:	793b      	ldrb	r3, [r7, #4]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	4b53      	ldr	r3, [pc, #332]	@ (8001b4c <generateData+0x16c>)
 80019fe:	701a      	strb	r2, [r3, #0]
	mydata[1] = (uint8_t)((Humidity - mydata[0]) * 100);
 8001a00:	4b51      	ldr	r3, [pc, #324]	@ (8001b48 <generateData+0x168>)
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	4b51      	ldr	r3, [pc, #324]	@ (8001b4c <generateData+0x16c>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a16:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001b50 <generateData+0x170>
 8001a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a22:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a26:	793b      	ldrb	r3, [r7, #4]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b48      	ldr	r3, [pc, #288]	@ (8001b4c <generateData+0x16c>)
 8001a2c:	705a      	strb	r2, [r3, #1]
	mydata[2] = Temperature;
 8001a2e:	4b49      	ldr	r3, [pc, #292]	@ (8001b54 <generateData+0x174>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a38:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a3c:	793b      	ldrb	r3, [r7, #4]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b42      	ldr	r3, [pc, #264]	@ (8001b4c <generateData+0x16c>)
 8001a42:	709a      	strb	r2, [r3, #2]
	mydata[3] = (uint8_t)((Temperature - mydata[2]) * 100);
 8001a44:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <generateData+0x174>)
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	4b40      	ldr	r3, [pc, #256]	@ (8001b4c <generateData+0x16c>)
 8001a4c:	789b      	ldrb	r3, [r3, #2]
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001b50 <generateData+0x170>
 8001a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a66:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a6a:	793b      	ldrb	r3, [r7, #4]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b37      	ldr	r3, [pc, #220]	@ (8001b4c <generateData+0x16c>)
 8001a70:	70da      	strb	r2, [r3, #3]
	mydata[4] = value_lux;
 8001a72:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <generateData+0x178>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a80:	793b      	ldrb	r3, [r7, #4]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <generateData+0x16c>)
 8001a86:	711a      	strb	r2, [r3, #4]
	mydata[5] = value_lux/255;
 8001a88:	4b33      	ldr	r3, [pc, #204]	@ (8001b58 <generateData+0x178>)
 8001a8a:	ed93 7a00 	vldr	s14, [r3]
 8001a8e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001b5c <generateData+0x17c>
 8001a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a9e:	793b      	ldrb	r3, [r7, #4]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b4c <generateData+0x16c>)
 8001aa4:	715a      	strb	r2, [r3, #5]
	mydata[6] = 100.0 - ((adcDMA[1] - WaterValue) / (float)(AirValue - WaterValue) * 100.0);
 8001aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <generateData+0x180>)
 8001aa8:	885b      	ldrh	r3, [r3, #2]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	f240 531c 	movw	r3, #1308	@ 0x51c
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abc:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f240 531c 	movw	r3, #1308	@ 0x51c
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ad4:	ee16 0a90 	vmov	r0, s13
 8001ad8:	f7fe fd3e 	bl	8000558 <__aeabi_f2d>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <generateData+0x184>)
 8001ae2:	f7fe fd91 	bl	8000608 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	491d      	ldr	r1, [pc, #116]	@ (8001b64 <generateData+0x184>)
 8001af0:	f7fe fbd2 	bl	8000298 <__aeabi_dsub>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f85c 	bl	8000bb8 <__aeabi_d2uiz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <generateData+0x16c>)
 8001b06:	719a      	strb	r2, [r3, #6]
	mydata[7] =(adcDMA[0]<2056)?1:0;
 8001b08:	4b15      	ldr	r3, [pc, #84]	@ (8001b60 <generateData+0x180>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	f640 0207 	movw	r2, #2055	@ 0x807
 8001b12:	4293      	cmp	r3, r2
 8001b14:	bf94      	ite	ls
 8001b16:	2301      	movls	r3, #1
 8001b18:	2300      	movhi	r3, #0
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <generateData+0x16c>)
 8001b20:	71da      	strb	r2, [r3, #7]
	mydata[8] = battery_level;
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <generateData+0x188>)
 8001b24:	edd3 7a00 	vldr	s15, [r3]
 8001b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001b30:	793b      	ldrb	r3, [r7, #4]
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <generateData+0x16c>)
 8001b36:	721a      	strb	r2, [r3, #8]
	strcpy((char*)&mydata[9], rx_buff);
 8001b38:	490c      	ldr	r1, [pc, #48]	@ (8001b6c <generateData+0x18c>)
 8001b3a:	480d      	ldr	r0, [pc, #52]	@ (8001b70 <generateData+0x190>)
 8001b3c:	f010 f8c7 	bl	8011cce <strcpy>
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000800 	.word	0x20000800
 8001b4c:	2000083c 	.word	0x2000083c
 8001b50:	42c80000 	.word	0x42c80000
 8001b54:	200007fc 	.word	0x200007fc
 8001b58:	20000804 	.word	0x20000804
 8001b5c:	437f0000 	.word	0x437f0000
 8001b60:	20000810 	.word	0x20000810
 8001b64:	40590000 	.word	0x40590000
 8001b68:	20000808 	.word	0x20000808
 8001b6c:	20000768 	.word	0x20000768
 8001b70:	20000845 	.word	0x20000845

08001b74 <updateScreen>:

void updateScreen(void){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	@ 0x38
 8001b78:	af02      	add	r7, sp, #8
	// handle interput from button in hal.c by HAL_GPIO_EXTI_Callback
	if(counterButton%2==0){
 8001b7a:	4b71      	ldr	r3, [pc, #452]	@ (8001d40 <updateScreen+0x1cc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d17f      	bne.n	8001c88 <updateScreen+0x114>
		ssd1306_Fill(Black);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f001 f8eb 	bl	8002d64 <ssd1306_Fill>
		sprintf(buffer1, "Temp: %0.2f'C", Temperature);
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d44 <updateScreen+0x1d0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fce0 	bl	8000558 <__aeabi_f2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	496a      	ldr	r1, [pc, #424]	@ (8001d48 <updateScreen+0x1d4>)
 8001b9e:	486b      	ldr	r0, [pc, #428]	@ (8001d4c <updateScreen+0x1d8>)
 8001ba0:	f00f fe96 	bl	80118d0 <siprintf>
		sprintf(buffer2, "Humd: %0.2f%%", Humidity);
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	@ (8001d50 <updateScreen+0x1dc>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fcd5 	bl	8000558 <__aeabi_f2d>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4968      	ldr	r1, [pc, #416]	@ (8001d54 <updateScreen+0x1e0>)
 8001bb4:	4868      	ldr	r0, [pc, #416]	@ (8001d58 <updateScreen+0x1e4>)
 8001bb6:	f00f fe8b 	bl	80118d0 <siprintf>
		sprintf(buffer3, "Lux: %0.2f", value_lux);
 8001bba:	4b68      	ldr	r3, [pc, #416]	@ (8001d5c <updateScreen+0x1e8>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcca 	bl	8000558 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4965      	ldr	r1, [pc, #404]	@ (8001d60 <updateScreen+0x1ec>)
 8001bca:	4866      	ldr	r0, [pc, #408]	@ (8001d64 <updateScreen+0x1f0>)
 8001bcc:	f00f fe80 	bl	80118d0 <siprintf>
		sprintf(buffer4, "SoilM: %d%%", mydata[6]);
 8001bd0:	4b65      	ldr	r3, [pc, #404]	@ (8001d68 <updateScreen+0x1f4>)
 8001bd2:	799b      	ldrb	r3, [r3, #6]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4965      	ldr	r1, [pc, #404]	@ (8001d6c <updateScreen+0x1f8>)
 8001bd8:	4865      	ldr	r0, [pc, #404]	@ (8001d70 <updateScreen+0x1fc>)
 8001bda:	f00f fe79 	bl	80118d0 <siprintf>
		if (adcDMA[0]<2056)
 8001bde:	4b65      	ldr	r3, [pc, #404]	@ (8001d74 <updateScreen+0x200>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	f640 0207 	movw	r2, #2055	@ 0x807
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d804      	bhi.n	8001bf6 <updateScreen+0x82>
			sprintf(buffer5, "RainD: Raining");
 8001bec:	4962      	ldr	r1, [pc, #392]	@ (8001d78 <updateScreen+0x204>)
 8001bee:	4863      	ldr	r0, [pc, #396]	@ (8001d7c <updateScreen+0x208>)
 8001bf0:	f00f fe6e 	bl	80118d0 <siprintf>
 8001bf4:	e003      	b.n	8001bfe <updateScreen+0x8a>
		else
			sprintf(buffer5, "RainD: No Rain");
 8001bf6:	4962      	ldr	r1, [pc, #392]	@ (8001d80 <updateScreen+0x20c>)
 8001bf8:	4860      	ldr	r0, [pc, #384]	@ (8001d7c <updateScreen+0x208>)
 8001bfa:	f00f fe69 	bl	80118d0 <siprintf>

		sprintf(buffer6, "Battlevel: %0.2f%%", battery_level);
 8001bfe:	4b61      	ldr	r3, [pc, #388]	@ (8001d84 <updateScreen+0x210>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fca8 	bl	8000558 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	495e      	ldr	r1, [pc, #376]	@ (8001d88 <updateScreen+0x214>)
 8001c0e:	485f      	ldr	r0, [pc, #380]	@ (8001d8c <updateScreen+0x218>)
 8001c10:	f00f fe5e 	bl	80118d0 <siprintf>
		ssd1306_SetCursor(2,0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2002      	movs	r0, #2
 8001c18:	f001 f9ee 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer1, Font_7x10, White);
 8001c1c:	4b5c      	ldr	r3, [pc, #368]	@ (8001d90 <updateScreen+0x21c>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c24:	4849      	ldr	r0, [pc, #292]	@ (8001d4c <updateScreen+0x1d8>)
 8001c26:	f001 f9c1 	bl	8002fac <ssd1306_WriteString>
		ssd1306_SetCursor(2,12);
 8001c2a:	210c      	movs	r1, #12
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f001 f9e3 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer2, Font_7x10, White);
 8001c32:	4b57      	ldr	r3, [pc, #348]	@ (8001d90 <updateScreen+0x21c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	9200      	str	r2, [sp, #0]
 8001c38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3a:	4847      	ldr	r0, [pc, #284]	@ (8001d58 <updateScreen+0x1e4>)
 8001c3c:	f001 f9b6 	bl	8002fac <ssd1306_WriteString>
		ssd1306_SetCursor(2,24);
 8001c40:	2118      	movs	r1, #24
 8001c42:	2002      	movs	r0, #2
 8001c44:	f001 f9d8 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer3, Font_7x10, White);
 8001c48:	4b51      	ldr	r3, [pc, #324]	@ (8001d90 <updateScreen+0x21c>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	9200      	str	r2, [sp, #0]
 8001c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c50:	4844      	ldr	r0, [pc, #272]	@ (8001d64 <updateScreen+0x1f0>)
 8001c52:	f001 f9ab 	bl	8002fac <ssd1306_WriteString>
		ssd1306_SetCursor(2,37);
 8001c56:	2125      	movs	r1, #37	@ 0x25
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f001 f9cd 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer4, Font_7x10, White);
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d90 <updateScreen+0x21c>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	9200      	str	r2, [sp, #0]
 8001c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c66:	4842      	ldr	r0, [pc, #264]	@ (8001d70 <updateScreen+0x1fc>)
 8001c68:	f001 f9a0 	bl	8002fac <ssd1306_WriteString>
		ssd1306_SetCursor(2,49);
 8001c6c:	2131      	movs	r1, #49	@ 0x31
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f001 f9c2 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer5, Font_7x10, White);
 8001c74:	4b46      	ldr	r3, [pc, #280]	@ (8001d90 <updateScreen+0x21c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	9200      	str	r2, [sp, #0]
 8001c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c7c:	483f      	ldr	r0, [pc, #252]	@ (8001d7c <updateScreen+0x208>)
 8001c7e:	f001 f995 	bl	8002fac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001c82:	f001 f887 	bl	8002d94 <ssd1306_UpdateScreen>
		ssd1306_WriteString(part2,Font_7x10, White);
		ssd1306_SetCursor(2,36);
		ssd1306_WriteString(buffer6, Font_7x10, White);
		ssd1306_UpdateScreen();
	}
}
 8001c86:	e057      	b.n	8001d38 <updateScreen+0x1c4>
		 char part1[20] = {0};
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	f107 0318 	add.w	r3, r7, #24
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
		 char part2[20] = {0};
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
		 char *colon_pos = strchr(rx_buff, ':');
 8001caa:	213a      	movs	r1, #58	@ 0x3a
 8001cac:	4839      	ldr	r0, [pc, #228]	@ (8001d94 <updateScreen+0x220>)
 8001cae:	f00f ff61 	bl	8011b74 <strchr>
 8001cb2:	62f8      	str	r0, [r7, #44]	@ 0x2c
		 if (colon_pos != NULL) {
 8001cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d017      	beq.n	8001cea <updateScreen+0x176>
		    int index = colon_pos - rx_buff;
 8001cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cbc:	4a35      	ldr	r2, [pc, #212]	@ (8001d94 <updateScreen+0x220>)
 8001cbe:	1a9b      	subs	r3, r3, r2
 8001cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
		    strncpy(part1, rx_buff, index);
 8001cc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	4932      	ldr	r1, [pc, #200]	@ (8001d94 <updateScreen+0x220>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f00f ff5f 	bl	8011b8e <strncpy>
		    part1[index] = '\0';
 8001cd0:	f107 0214 	add.w	r2, r7, #20
 8001cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd6:	4413      	add	r3, r2
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
		    strcpy(part2, colon_pos + 1);
 8001cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f00f fff2 	bl	8011cce <strcpy>
		ssd1306_Fill(Black);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f001 f83a 	bl	8002d64 <ssd1306_Fill>
		ssd1306_SetCursor(2,0);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2002      	movs	r0, #2
 8001cf4:	f001 f980 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(part1,Font_7x10, White);
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <updateScreen+0x21c>)
 8001cfa:	f107 0014 	add.w	r0, r7, #20
 8001cfe:	2201      	movs	r2, #1
 8001d00:	9200      	str	r2, [sp, #0]
 8001d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d04:	f001 f952 	bl	8002fac <ssd1306_WriteString>
		ssd1306_SetCursor(36,12);
 8001d08:	210c      	movs	r1, #12
 8001d0a:	2024      	movs	r0, #36	@ 0x24
 8001d0c:	f001 f974 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(part2,Font_7x10, White);
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <updateScreen+0x21c>)
 8001d12:	4638      	mov	r0, r7
 8001d14:	2201      	movs	r2, #1
 8001d16:	9200      	str	r2, [sp, #0]
 8001d18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d1a:	f001 f947 	bl	8002fac <ssd1306_WriteString>
		ssd1306_SetCursor(2,36);
 8001d1e:	2124      	movs	r1, #36	@ 0x24
 8001d20:	2002      	movs	r0, #2
 8001d22:	f001 f969 	bl	8002ff8 <ssd1306_SetCursor>
		ssd1306_WriteString(buffer6, Font_7x10, White);
 8001d26:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <updateScreen+0x21c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2e:	4817      	ldr	r0, [pc, #92]	@ (8001d8c <updateScreen+0x218>)
 8001d30:	f001 f93c 	bl	8002fac <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8001d34:	f001 f82e 	bl	8002d94 <ssd1306_UpdateScreen>
}
 8001d38:	bf00      	nop
 8001d3a:	3730      	adds	r7, #48	@ 0x30
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	2000080c 	.word	0x2000080c
 8001d44:	200007fc 	.word	0x200007fc
 8001d48:	08013c98 	.word	0x08013c98
 8001d4c:	200007e4 	.word	0x200007e4
 8001d50:	20000800 	.word	0x20000800
 8001d54:	08013ca8 	.word	0x08013ca8
 8001d58:	200007d4 	.word	0x200007d4
 8001d5c:	20000804 	.word	0x20000804
 8001d60:	08013cb8 	.word	0x08013cb8
 8001d64:	200007c4 	.word	0x200007c4
 8001d68:	2000083c 	.word	0x2000083c
 8001d6c:	08013cc4 	.word	0x08013cc4
 8001d70:	200007b0 	.word	0x200007b0
 8001d74:	20000810 	.word	0x20000810
 8001d78:	08013cd0 	.word	0x08013cd0
 8001d7c:	200007a0 	.word	0x200007a0
 8001d80:	08013ce0 	.word	0x08013ce0
 8001d84:	20000808 	.word	0x20000808
 8001d88:	08013cf0 	.word	0x08013cf0
 8001d8c:	2000078c 	.word	0x2000078c
 8001d90:	0801497c 	.word	0x0801497c
 8001d94:	20000768 	.word	0x20000768

08001d98 <os_getArtEui>:


/*---------------------------------------------------------------------*/

void os_getArtEui (uint8_t* buf) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    memcpy(buf, APPEUI, 8);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4906      	ldr	r1, [pc, #24]	@ (8001dbc <os_getArtEui+0x24>)
 8001da4:	461a      	mov	r2, r3
 8001da6:	460b      	mov	r3, r1
 8001da8:	cb03      	ldmia	r3!, {r0, r1}
 8001daa:	6010      	str	r0, [r2, #0]
 8001dac:	6051      	str	r1, [r2, #4]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	080141d0 	.word	0x080141d0

08001dc0 <os_getDevEui>:

// provide device ID (8 bytes, LSBF)
void os_getDevEui (uint8_t* buf) {
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVEUI, 8);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4906      	ldr	r1, [pc, #24]	@ (8001de4 <os_getDevEui+0x24>)
 8001dcc:	461a      	mov	r2, r3
 8001dce:	460b      	mov	r3, r1
 8001dd0:	cb03      	ldmia	r3!, {r0, r1}
 8001dd2:	6010      	str	r0, [r2, #0]
 8001dd4:	6051      	str	r1, [r2, #4]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	080141e8 	.word	0x080141e8

08001de8 <os_getDevKey>:

// provide device key (16 bytes)
void os_getDevKey (uint8_t* buf) {
 8001de8:	b4b0      	push	{r4, r5, r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    memcpy(buf, DEVKEY, 16);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a06      	ldr	r2, [pc, #24]	@ (8001e0c <os_getDevKey+0x24>)
 8001df4:	461c      	mov	r4, r3
 8001df6:	4615      	mov	r5, r2
 8001df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfa:	6020      	str	r0, [r4, #0]
 8001dfc:	6061      	str	r1, [r4, #4]
 8001dfe:	60a2      	str	r2, [r4, #8]
 8001e00:	60e3      	str	r3, [r4, #12]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bcb0      	pop	{r4, r5, r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	080141d8 	.word	0x080141d8

08001e10 <do_send>:

//static uint8_t data[];
static osjob_t sendjob;


void do_send(osjob_t* j){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	if (!(LMIC.opmode & OP_TXRXPEND)) {
 8001e18:	4b13      	ldr	r3, [pc, #76]	@ (8001e68 <do_send+0x58>)
 8001e1a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8001e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11c      	bne.n	8001e60 <do_send+0x50>
		if(Wait_for("The detected:")){
 8001e26:	4811      	ldr	r0, [pc, #68]	@ (8001e6c <do_send+0x5c>)
 8001e28:	f7ff fb50 	bl	80014cc <Wait_for>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <do_send+0x36>
			if(Get_after("The detected: ", 35, rx_buff))
 8001e32:	4a0f      	ldr	r2, [pc, #60]	@ (8001e70 <do_send+0x60>)
 8001e34:	2123      	movs	r1, #35	@ 0x23
 8001e36:	480f      	ldr	r0, [pc, #60]	@ (8001e74 <do_send+0x64>)
 8001e38:	f7ff fb14 	bl	8001464 <Get_after>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <do_send+0x36>
				Uart_flush();
 8001e42:	f7ff fad9 	bl	80013f8 <Uart_flush>
		}
		//autoOP();
		generateData();
 8001e46:	f7ff fdcb 	bl	80019e0 <generateData>
		updateScreen();
 8001e4a:	f7ff fe93 	bl	8001b74 <updateScreen>
		LMIC_setTxData2(1, mydata, sizeof(mydata), 0);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	2229      	movs	r2, #41	@ 0x29
 8001e52:	4909      	ldr	r1, [pc, #36]	@ (8001e78 <do_send+0x68>)
 8001e54:	2001      	movs	r0, #1
 8001e56:	f00d fc61 	bl	800f71c <LMIC_setTxData2>
		debug_str("\nPacket queued \n");
 8001e5a:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <do_send+0x6c>)
 8001e5c:	f00e fd50 	bl	8010900 <debug_str>
	}
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000d48 	.word	0x20000d48
 8001e6c:	08013d04 	.word	0x08013d04
 8001e70:	20000768 	.word	0x20000768
 8001e74:	08013d14 	.word	0x08013d14
 8001e78:	2000083c 	.word	0x2000083c
 8001e7c:	08013d24 	.word	0x08013d24

08001e80 <onEvent>:

void onEvent (ev_t ev) {
 8001e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e84:	b087      	sub	sp, #28
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	71fb      	strb	r3, [r7, #7]
    debug_event(ev);
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f00e fdc2 	bl	8010a18 <debug_event>
    debug_str("\n");
 8001e94:	48b9      	ldr	r0, [pc, #740]	@ (800217c <onEvent+0x2fc>)
 8001e96:	f00e fd33 	bl	8010900 <debug_str>
    switch(ev) {
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	2b0e      	cmp	r3, #14
 8001ea0:	f200 81cf 	bhi.w	8002242 <onEvent+0x3c2>
 8001ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8001eac <onEvent+0x2c>)
 8001ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	08001ee9 	.word	0x08001ee9
 8001eb0:	08001ef1 	.word	0x08001ef1
 8001eb4:	08001ef9 	.word	0x08001ef9
 8001eb8:	08001f01 	.word	0x08001f01
 8001ebc:	08001f09 	.word	0x08001f09
 8001ec0:	08001f11 	.word	0x08001f11
 8001ec4:	08001f19 	.word	0x08001f19
 8001ec8:	08001f21 	.word	0x08001f21
 8001ecc:	08001f29 	.word	0x08001f29
 8001ed0:	08001f49 	.word	0x08001f49
 8001ed4:	0800221b 	.word	0x0800221b
 8001ed8:	08002223 	.word	0x08002223
 8001edc:	0800222b 	.word	0x0800222b
 8001ee0:	08002233 	.word	0x08002233
 8001ee4:	0800223b 	.word	0x0800223b
        case EV_SCAN_TIMEOUT:
            debug_str("EV_SCAN_TIMEOUT\n");
 8001ee8:	48a5      	ldr	r0, [pc, #660]	@ (8002180 <onEvent+0x300>)
 8001eea:	f00e fd09 	bl	8010900 <debug_str>
            break;
 8001eee:	e1ac      	b.n	800224a <onEvent+0x3ca>
        case EV_BEACON_FOUND:
            debug_str("EV_BEACON_FOUND\n");
 8001ef0:	48a4      	ldr	r0, [pc, #656]	@ (8002184 <onEvent+0x304>)
 8001ef2:	f00e fd05 	bl	8010900 <debug_str>
            break;
 8001ef6:	e1a8      	b.n	800224a <onEvent+0x3ca>
        case EV_BEACON_MISSED:
            debug_str("EV_BEACON_MISSED\n");
 8001ef8:	48a3      	ldr	r0, [pc, #652]	@ (8002188 <onEvent+0x308>)
 8001efa:	f00e fd01 	bl	8010900 <debug_str>
            break;
 8001efe:	e1a4      	b.n	800224a <onEvent+0x3ca>
        case EV_BEACON_TRACKED:
            debug_str("EV_BEACON_TRACKED\n");
 8001f00:	48a2      	ldr	r0, [pc, #648]	@ (800218c <onEvent+0x30c>)
 8001f02:	f00e fcfd 	bl	8010900 <debug_str>
            break;
 8001f06:	e1a0      	b.n	800224a <onEvent+0x3ca>
        case EV_JOINING:
            debug_str("EV_JOINING\n");
 8001f08:	48a1      	ldr	r0, [pc, #644]	@ (8002190 <onEvent+0x310>)
 8001f0a:	f00e fcf9 	bl	8010900 <debug_str>
            break;
 8001f0e:	e19c      	b.n	800224a <onEvent+0x3ca>
        case EV_JOINED:
            debug_str("EV_JOINED\n");
 8001f10:	48a0      	ldr	r0, [pc, #640]	@ (8002194 <onEvent+0x314>)
 8001f12:	f00e fcf5 	bl	8010900 <debug_str>
            break;
 8001f16:	e198      	b.n	800224a <onEvent+0x3ca>
        case EV_RFU1:
            debug_str("EV_RFU1\n");
 8001f18:	489f      	ldr	r0, [pc, #636]	@ (8002198 <onEvent+0x318>)
 8001f1a:	f00e fcf1 	bl	8010900 <debug_str>
            break;
 8001f1e:	e194      	b.n	800224a <onEvent+0x3ca>
        case EV_JOIN_FAILED:
            debug_str("EV_JOIN_FAILED\n");
 8001f20:	489e      	ldr	r0, [pc, #632]	@ (800219c <onEvent+0x31c>)
 8001f22:	f00e fced 	bl	8010900 <debug_str>
            break;
 8001f26:	e190      	b.n	800224a <onEvent+0x3ca>
        case EV_REJOIN_FAILED:
            debug_str("EV_REJOIN_FAILED\n");
 8001f28:	489d      	ldr	r0, [pc, #628]	@ (80021a0 <onEvent+0x320>)
 8001f2a:	f00e fce9 	bl	8010900 <debug_str>
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
 8001f2e:	f00d fcc5 	bl	800f8bc <os_getTime>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8001f38:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001f3c:	4a99      	ldr	r2, [pc, #612]	@ (80021a4 <onEvent+0x324>)
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4899      	ldr	r0, [pc, #612]	@ (80021a8 <onEvent+0x328>)
 8001f42:	f00d fd39 	bl	800f9b8 <os_setTimedCallback>
            break;
 8001f46:	e180      	b.n	800224a <onEvent+0x3ca>
        case EV_TXCOMPLETE:
            debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\n");
 8001f48:	4898      	ldr	r0, [pc, #608]	@ (80021ac <onEvent+0x32c>)
 8001f4a:	f00e fcd9 	bl	8010900 <debug_str>
            if (LMIC.txrxFlags & TXRX_ACK)
 8001f4e:	4b98      	ldr	r3, [pc, #608]	@ (80021b0 <onEvent+0x330>)
 8001f50:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	da02      	bge.n	8001f60 <onEvent+0xe0>
              debug_str("Received ack\n");
 8001f5a:	4896      	ldr	r0, [pc, #600]	@ (80021b4 <onEvent+0x334>)
 8001f5c:	f00e fcd0 	bl	8010900 <debug_str>
            if (LMIC.dataLen) {
 8001f60:	4b93      	ldr	r3, [pc, #588]	@ (80021b0 <onEvent+0x330>)
 8001f62:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 814a 	beq.w	8002200 <onEvent+0x380>
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
              debug_str("Received ");
 8001f70:	4891      	ldr	r0, [pc, #580]	@ (80021b8 <onEvent+0x338>)
 8001f72:	f00e fcc5 	bl	8010900 <debug_str>
              debug_int(LMIC.dataLen);
 8001f76:	4b8e      	ldr	r3, [pc, #568]	@ (80021b0 <onEvent+0x330>)
 8001f78:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00e fc99 	bl	80108b4 <debug_int>
              debug_str(" bytes of payload\n");
 8001f82:	488e      	ldr	r0, [pc, #568]	@ (80021bc <onEvent+0x33c>)
 8001f84:	f00e fcbc 	bl	8010900 <debug_str>

              char message[LMIC.dataLen + 1];
 8001f88:	4b89      	ldr	r3, [pc, #548]	@ (80021b0 <onEvent+0x330>)
 8001f8a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	1e4b      	subs	r3, r1, #1
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	460a      	mov	r2, r1
 8001f96:	2300      	movs	r3, #0
 8001f98:	4690      	mov	r8, r2
 8001f9a:	4699      	mov	r9, r3
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	4614      	mov	r4, r2
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	00eb      	lsls	r3, r5, #3
 8001fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fc6:	00e2      	lsls	r2, r4, #3
 8001fc8:	460b      	mov	r3, r1
 8001fca:	3307      	adds	r3, #7
 8001fcc:	08db      	lsrs	r3, r3, #3
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	ebad 0d03 	sub.w	sp, sp, r3
 8001fd4:	466b      	mov	r3, sp
 8001fd6:	3300      	adds	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
              memset(message, 0, sizeof(message));
 8001fda:	460b      	mov	r3, r1
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2100      	movs	r1, #0
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f00f fdbf 	bl	8011b64 <memset>

              debug_str("\nDownlink message: ");
 8001fe6:	4876      	ldr	r0, [pc, #472]	@ (80021c0 <onEvent+0x340>)
 8001fe8:	f00e fc8a 	bl	8010900 <debug_str>
              for(int i = 0; i < LMIC.dataLen; i++){
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e044      	b.n	800207c <onEvent+0x1fc>
            	  if (LMIC.frame[LMIC.dataBeg + i] < 0x10){
 8001ff2:	4b6f      	ldr	r3, [pc, #444]	@ (80021b0 <onEvent+0x330>)
 8001ff4:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a6c      	ldr	r2, [pc, #432]	@ (80021b0 <onEvent+0x330>)
 8002000:	4413      	add	r3, r2
 8002002:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8002006:	2b0f      	cmp	r3, #15
 8002008:	d802      	bhi.n	8002010 <onEvent+0x190>
            		  printf("0");
 800200a:	2030      	movs	r0, #48	@ 0x30
 800200c:	f00f fbfa 	bl	8011804 <putchar>
            	  }
            	  printf("%02X",LMIC.frame[LMIC.dataBeg + i]);
 8002010:	4b67      	ldr	r3, [pc, #412]	@ (80021b0 <onEvent+0x330>)
 8002012:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8002016:	461a      	mov	r2, r3
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4413      	add	r3, r2
 800201c:	4a64      	ldr	r2, [pc, #400]	@ (80021b0 <onEvent+0x330>)
 800201e:	4413      	add	r3, r2
 8002020:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8002024:	4619      	mov	r1, r3
 8002026:	4867      	ldr	r0, [pc, #412]	@ (80021c4 <onEvent+0x344>)
 8002028:	f00e fc06 	bl	8010838 <printf>
            	  message[i] = tolower((char)LMIC.frame[LMIC.dataBeg + i]);
 800202c:	4b60      	ldr	r3, [pc, #384]	@ (80021b0 <onEvent+0x330>)
 800202e:	f893 314a 	ldrb.w	r3, [r3, #330]	@ 0x14a
 8002032:	461a      	mov	r2, r3
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	4413      	add	r3, r2
 8002038:	4a5d      	ldr	r2, [pc, #372]	@ (80021b0 <onEvent+0x330>)
 800203a:	4413      	add	r3, r2
 800203c:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 8002040:	72fb      	strb	r3, [r7, #11]
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	3301      	adds	r3, #1
 8002046:	4a60      	ldr	r2, [pc, #384]	@ (80021c8 <onEvent+0x348>)
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d102      	bne.n	800205a <onEvent+0x1da>
 8002054:	7afb      	ldrb	r3, [r7, #11]
 8002056:	3320      	adds	r3, #32
 8002058:	e000      	b.n	800205c <onEvent+0x1dc>
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	b2d9      	uxtb	r1, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4413      	add	r3, r2
 8002064:	460a      	mov	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
            	  printf("%c",message[i]);
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	4413      	add	r3, r2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f00f fbc7 	bl	8011804 <putchar>
              for(int i = 0; i < LMIC.dataLen; i++){
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	4b4c      	ldr	r3, [pc, #304]	@ (80021b0 <onEvent+0x330>)
 800207e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8002082:	461a      	mov	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4293      	cmp	r3, r2
 8002088:	dbb3      	blt.n	8001ff2 <onEvent+0x172>
              }
              debug_str("\n");
 800208a:	483c      	ldr	r0, [pc, #240]	@ (800217c <onEvent+0x2fc>)
 800208c:	f00e fc38 	bl	8010900 <debug_str>
              message[LMIC.dataLen] = '\0';
 8002090:	4b47      	ldr	r3, [pc, #284]	@ (80021b0 <onEvent+0x330>)
 8002092:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2100      	movs	r1, #0
 800209c:	5499      	strb	r1, [r3, r2]
              memcpy(messCopy, message, LMIC.dataLen); //debug purpose only
 800209e:	4b44      	ldr	r3, [pc, #272]	@ (80021b0 <onEvent+0x330>)
 80020a0:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80020a4:	461a      	mov	r2, r3
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	4848      	ldr	r0, [pc, #288]	@ (80021cc <onEvent+0x34c>)
 80020aa:	f00f fe18 	bl	8011cde <memcpy>
              debug_str("\n");
 80020ae:	4833      	ldr	r0, [pc, #204]	@ (800217c <onEvent+0x2fc>)
 80020b0:	f00e fc26 	bl	8010900 <debug_str>
              if (strstr(message, "turn on light") != NULL) {
 80020b4:	4946      	ldr	r1, [pc, #280]	@ (80021d0 <onEvent+0x350>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f00f fd7c 	bl	8011bb4 <strstr>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <onEvent+0x250>
            	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, 1);
 80020c2:	2201      	movs	r2, #1
 80020c4:	2120      	movs	r1, #32
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020ca:	f003 fd13 	bl	8005af4 <HAL_GPIO_WritePin>
 80020ce:	e096      	b.n	80021fe <onEvent+0x37e>
              } else if (strstr(message, "turn off light") != NULL) {
 80020d0:	4940      	ldr	r1, [pc, #256]	@ (80021d4 <onEvent+0x354>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f00f fd6e 	bl	8011bb4 <strstr>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d006      	beq.n	80020ec <onEvent+0x26c>
            	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2120      	movs	r1, #32
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e6:	f003 fd05 	bl	8005af4 <HAL_GPIO_WritePin>
 80020ea:	e088      	b.n	80021fe <onEvent+0x37e>
              }else if (strstr(message, "turn off pump") != NULL) {
 80020ec:	493a      	ldr	r1, [pc, #232]	@ (80021d8 <onEvent+0x358>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f00f fd60 	bl	8011bb4 <strstr>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <onEvent+0x288>
            	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12, 0);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002100:	4836      	ldr	r0, [pc, #216]	@ (80021dc <onEvent+0x35c>)
 8002102:	f003 fcf7 	bl	8005af4 <HAL_GPIO_WritePin>
 8002106:	e07a      	b.n	80021fe <onEvent+0x37e>
              }else if (strstr(message, "turn on pump") != NULL) {
 8002108:	4935      	ldr	r1, [pc, #212]	@ (80021e0 <onEvent+0x360>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f00f fd52 	bl	8011bb4 <strstr>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d006      	beq.n	8002124 <onEvent+0x2a4>
            	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_12, 1);
 8002116:	2201      	movs	r2, #1
 8002118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800211c:	482f      	ldr	r0, [pc, #188]	@ (80021dc <onEvent+0x35c>)
 800211e:	f003 fce9 	bl	8005af4 <HAL_GPIO_WritePin>
 8002122:	e06c      	b.n	80021fe <onEvent+0x37e>
              }else if (strstr(message, "canopy forward") != NULL) {
 8002124:	492f      	ldr	r1, [pc, #188]	@ (80021e4 <onEvent+0x364>)
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f00f fd44 	bl	8011bb4 <strstr>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <onEvent+0x2ba>
            	  canopyControl(true);
 8002132:	2001      	movs	r0, #1
 8002134:	f7ff fc0c 	bl	8001950 <canopyControl>
 8002138:	e061      	b.n	80021fe <onEvent+0x37e>
              }else if (strstr(message, "canopy backward") != NULL) {
 800213a:	492b      	ldr	r1, [pc, #172]	@ (80021e8 <onEvent+0x368>)
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f00f fd39 	bl	8011bb4 <strstr>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <onEvent+0x2d0>
            	  canopyControl(false);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fc01 	bl	8001950 <canopyControl>
 800214e:	e056      	b.n	80021fe <onEvent+0x37e>
              }else if (strstr(message,"autonomous") != NULL){
 8002150:	4926      	ldr	r1, [pc, #152]	@ (80021ec <onEvent+0x36c>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f00f fd2e 	bl	8011bb4 <strstr>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <onEvent+0x2e6>
            	  autoFlag = true;
 800215e:	4b24      	ldr	r3, [pc, #144]	@ (80021f0 <onEvent+0x370>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e04b      	b.n	80021fe <onEvent+0x37e>
              }else if (strstr(message,"manual") != NULL){
 8002166:	4923      	ldr	r1, [pc, #140]	@ (80021f4 <onEvent+0x374>)
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f00f fd23 	bl	8011bb4 <strstr>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d041      	beq.n	80021f8 <onEvent+0x378>
                  autoFlag = false;
 8002174:	4b1e      	ldr	r3, [pc, #120]	@ (80021f0 <onEvent+0x370>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e040      	b.n	80021fe <onEvent+0x37e>
 800217c:	08013d38 	.word	0x08013d38
 8002180:	08013d3c 	.word	0x08013d3c
 8002184:	08013d50 	.word	0x08013d50
 8002188:	08013d64 	.word	0x08013d64
 800218c:	08013d78 	.word	0x08013d78
 8002190:	08013d8c 	.word	0x08013d8c
 8002194:	08013d98 	.word	0x08013d98
 8002198:	08013da4 	.word	0x08013da4
 800219c:	08013db0 	.word	0x08013db0
 80021a0:	08013dc0 	.word	0x08013dc0
 80021a4:	08001e11 	.word	0x08001e11
 80021a8:	20000868 	.word	0x20000868
 80021ac:	08013dd4 	.word	0x08013dd4
 80021b0:	20000d48 	.word	0x20000d48
 80021b4:	08013e08 	.word	0x08013e08
 80021b8:	08013e18 	.word	0x08013e18
 80021bc:	08013e24 	.word	0x08013e24
 80021c0:	08013e38 	.word	0x08013e38
 80021c4:	08013e4c 	.word	0x08013e4c
 80021c8:	08015b72 	.word	0x08015b72
 80021cc:	2000081c 	.word	0x2000081c
 80021d0:	08013e54 	.word	0x08013e54
 80021d4:	08013e64 	.word	0x08013e64
 80021d8:	08013e74 	.word	0x08013e74
 80021dc:	48000800 	.word	0x48000800
 80021e0:	08013e84 	.word	0x08013e84
 80021e4:	08013e94 	.word	0x08013e94
 80021e8:	08013ea4 	.word	0x08013ea4
 80021ec:	08013eb4 	.word	0x08013eb4
 80021f0:	20000818 	.word	0x20000818
 80021f4:	08013ec0 	.word	0x08013ec0
              }else {
                  debug_str("Message did not match.\n");
 80021f8:	4816      	ldr	r0, [pc, #88]	@ (8002254 <onEvent+0x3d4>)
 80021fa:	f00e fb81 	bl	8010900 <debug_str>
 80021fe:	46b5      	mov	sp, r6
              }
            }
            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL-3), do_send);
 8002200:	f00d fb5c 	bl	800f8bc <os_getTime>
 8002204:	4603      	mov	r3, r0
 8002206:	f503 23bb 	add.w	r3, r3, #382976	@ 0x5d800
 800220a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800220e:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <onEvent+0x3d8>)
 8002210:	4619      	mov	r1, r3
 8002212:	4812      	ldr	r0, [pc, #72]	@ (800225c <onEvent+0x3dc>)
 8002214:	f00d fbd0 	bl	800f9b8 <os_setTimedCallback>
            break;
 8002218:	e017      	b.n	800224a <onEvent+0x3ca>
        case EV_LOST_TSYNC:
            debug_str("EV_LOST_TSYNC\n");
 800221a:	4811      	ldr	r0, [pc, #68]	@ (8002260 <onEvent+0x3e0>)
 800221c:	f00e fb70 	bl	8010900 <debug_str>
            break;
 8002220:	e013      	b.n	800224a <onEvent+0x3ca>
        case EV_RESET:
            debug_str("EV_RESET\n");
 8002222:	4810      	ldr	r0, [pc, #64]	@ (8002264 <onEvent+0x3e4>)
 8002224:	f00e fb6c 	bl	8010900 <debug_str>
            break;
 8002228:	e00f      	b.n	800224a <onEvent+0x3ca>
        case EV_RXCOMPLETE:
            // data received in ping slot
            debug_str("EV_RXCOMPLETE\n");
 800222a:	480f      	ldr	r0, [pc, #60]	@ (8002268 <onEvent+0x3e8>)
 800222c:	f00e fb68 	bl	8010900 <debug_str>
            break;
 8002230:	e00b      	b.n	800224a <onEvent+0x3ca>
        case EV_LINK_DEAD:
            debug_str("EV_LINK_DEAD\n");
 8002232:	480e      	ldr	r0, [pc, #56]	@ (800226c <onEvent+0x3ec>)
 8002234:	f00e fb64 	bl	8010900 <debug_str>
            break;
 8002238:	e007      	b.n	800224a <onEvent+0x3ca>
        case EV_LINK_ALIVE:
            debug_str("EV_LINK_ALIVE\n");
 800223a:	480d      	ldr	r0, [pc, #52]	@ (8002270 <onEvent+0x3f0>)
 800223c:	f00e fb60 	bl	8010900 <debug_str>
            break;
 8002240:	e003      	b.n	800224a <onEvent+0x3ca>
         default:
            debug_str("Unknown event\n");
 8002242:	480c      	ldr	r0, [pc, #48]	@ (8002274 <onEvent+0x3f4>)
 8002244:	f00e fb5c 	bl	8010900 <debug_str>
            break;
 8002248:	bf00      	nop
    }
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002254:	08013ec8 	.word	0x08013ec8
 8002258:	08001e11 	.word	0x08001e11
 800225c:	20000868 	.word	0x20000868
 8002260:	08013ee0 	.word	0x08013ee0
 8002264:	08013ef0 	.word	0x08013ef0
 8002268:	08013efc 	.word	0x08013efc
 800226c:	08013f0c 	.word	0x08013f0c
 8002270:	08013f1c 	.word	0x08013f1c
 8002274:	08013f2c 	.word	0x08013f2c

08002278 <initfunc>:

void initfunc(osjob_t* j)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b08b      	sub	sp, #44	@ 0x2c
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
	   // Reset the MAC state. Session and pending data transfers will be discarded.
	   LMIC_reset();
 8002280:	f00d f9d4 	bl	800f62c <LMIC_reset>
	   //LMIC_startJoining();

	    uint8_t appskey[sizeof(APPSKEY)];
	    uint8_t nwkskey[sizeof(NWKSKEY)];
	    memcpy(appskey, APPSKEY, sizeof(APPSKEY));
 8002284:	4b34      	ldr	r3, [pc, #208]	@ (8002358 <initfunc+0xe0>)
 8002286:	f107 0418 	add.w	r4, r7, #24
 800228a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800228c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    memcpy(nwkskey, NWKSKEY, sizeof(NWKSKEY));
 8002290:	4b32      	ldr	r3, [pc, #200]	@ (800235c <initfunc+0xe4>)
 8002292:	f107 0408 	add.w	r4, r7, #8
 8002296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
 800229c:	4930      	ldr	r1, [pc, #192]	@ (8002360 <initfunc+0xe8>)
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	f107 0208 	add.w	r2, r7, #8
 80022a6:	2001      	movs	r0, #1
 80022a8:	f00d fa6a 	bl	800f780 <LMIC_setSession>


	  #if defined(CFG_VN)
	    LMIC_setupChannel(0, 921400000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
 80022ac:	2301      	movs	r3, #1
 80022ae:	223f      	movs	r2, #63	@ 0x3f
 80022b0:	492c      	ldr	r1, [pc, #176]	@ (8002364 <initfunc+0xec>)
 80022b2:	2000      	movs	r0, #0
 80022b4:	f00a ffd8 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(1, 921600000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);      // g-band
 80022b8:	2301      	movs	r3, #1
 80022ba:	227f      	movs	r2, #127	@ 0x7f
 80022bc:	492a      	ldr	r1, [pc, #168]	@ (8002368 <initfunc+0xf0>)
 80022be:	2001      	movs	r0, #1
 80022c0:	f00a ffd2 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(2, 921800000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
 80022c4:	2301      	movs	r3, #1
 80022c6:	223f      	movs	r2, #63	@ 0x3f
 80022c8:	4928      	ldr	r1, [pc, #160]	@ (800236c <initfunc+0xf4>)
 80022ca:	2002      	movs	r0, #2
 80022cc:	f00a ffcc 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(3, 922000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
 80022d0:	2301      	movs	r3, #1
 80022d2:	223f      	movs	r2, #63	@ 0x3f
 80022d4:	4926      	ldr	r1, [pc, #152]	@ (8002370 <initfunc+0xf8>)
 80022d6:	2003      	movs	r0, #3
 80022d8:	f00a ffc6 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(4, 922200000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
 80022dc:	2301      	movs	r3, #1
 80022de:	223f      	movs	r2, #63	@ 0x3f
 80022e0:	4924      	ldr	r1, [pc, #144]	@ (8002374 <initfunc+0xfc>)
 80022e2:	2004      	movs	r0, #4
 80022e4:	f00a ffc0 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(5, 922400000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
 80022e8:	2301      	movs	r3, #1
 80022ea:	223f      	movs	r2, #63	@ 0x3f
 80022ec:	4922      	ldr	r1, [pc, #136]	@ (8002378 <initfunc+0x100>)
 80022ee:	2005      	movs	r0, #5
 80022f0:	f00a ffba 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(6, 922600000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
 80022f4:	2301      	movs	r3, #1
 80022f6:	223f      	movs	r2, #63	@ 0x3f
 80022f8:	4920      	ldr	r1, [pc, #128]	@ (800237c <initfunc+0x104>)
 80022fa:	2006      	movs	r0, #6
 80022fc:	f00a ffb4 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(7, 922800000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
 8002300:	2301      	movs	r3, #1
 8002302:	223f      	movs	r2, #63	@ 0x3f
 8002304:	491e      	ldr	r1, [pc, #120]	@ (8002380 <initfunc+0x108>)
 8002306:	2007      	movs	r0, #7
 8002308:	f00a ffae 	bl	800d268 <LMIC_setupChannel>
	    LMIC_setupChannel(8, 922700000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band
 800230c:	2300      	movs	r3, #0
 800230e:	2280      	movs	r2, #128	@ 0x80
 8002310:	491c      	ldr	r1, [pc, #112]	@ (8002384 <initfunc+0x10c>)
 8002312:	2008      	movs	r0, #8
 8002314:	f00a ffa8 	bl	800d268 <LMIC_setupChannel>
	   LMIC_selectSubBand(1);

	  #endif

	   // Disable link check validation
	   LMIC_setLinkCheckMode(0);
 8002318:	2000      	movs	r0, #0
 800231a:	f00d fa7d 	bl	800f818 <LMIC_setLinkCheckMode>
	   LMIC_setClockError(MAX_CLOCK_ERROR * 2 / 100);
 800231e:	f240 501e 	movw	r0, #1310	@ 0x51e
 8002322:	f00d fa95 	bl	800f850 <LMIC_setClockError>

	   LMIC.dn2Dr = DR_SF10;
 8002326:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <initfunc+0x110>)
 8002328:	2202      	movs	r2, #2
 800232a:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
	   LMIC.dn2Freq=923200000;
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <initfunc+0x110>)
 8002330:	4a16      	ldr	r2, [pc, #88]	@ (800238c <initfunc+0x114>)
 8002332:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
	   LMIC_setDrTxpow(DR_SF10,16);
 8002336:	2110      	movs	r1, #16
 8002338:	2002      	movs	r0, #2
 800233a:	f00d f963 	bl	800f604 <LMIC_setDrTxpow>
	   //LMIC_setAdrMode(true);
	   os_setTimedCallback(&sendjob, os_getTime(), do_send);
 800233e:	f00d fabd 	bl	800f8bc <os_getTime>
 8002342:	4603      	mov	r3, r0
 8002344:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <initfunc+0x118>)
 8002346:	4619      	mov	r1, r3
 8002348:	4812      	ldr	r0, [pc, #72]	@ (8002394 <initfunc+0x11c>)
 800234a:	f00d fb35 	bl	800f9b8 <os_setTimedCallback>

}
 800234e:	bf00      	nop
 8002350:	372c      	adds	r7, #44	@ 0x2c
 8002352:	46bd      	mov	sp, r7
 8002354:	bd90      	pop	{r4, r7, pc}
 8002356:	bf00      	nop
 8002358:	08014200 	.word	0x08014200
 800235c:	080141f0 	.word	0x080141f0
 8002360:	00c5a589 	.word	0x00c5a589
 8002364:	36eb72c0 	.word	0x36eb72c0
 8002368:	36ee8000 	.word	0x36ee8000
 800236c:	36f18d40 	.word	0x36f18d40
 8002370:	36f49a80 	.word	0x36f49a80
 8002374:	36f7a7c0 	.word	0x36f7a7c0
 8002378:	36fab500 	.word	0x36fab500
 800237c:	36fdc240 	.word	0x36fdc240
 8002380:	3700cf80 	.word	0x3700cf80
 8002384:	36ff48e0 	.word	0x36ff48e0
 8002388:	20000d48 	.word	0x20000d48
 800238c:	3706ea00 	.word	0x3706ea00
 8002390:	08001e11 	.word	0x08001e11
 8002394:	20000868 	.word	0x20000868

08002398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800239e:	f001 fa63 	bl	8003868 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023a2:	f000 f873 	bl	800248c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023a6:	f000 fbfb 	bl	8002ba0 <MX_GPIO_Init>
  MX_DMA_Init();
 80023aa:	f000 fbdb 	bl	8002b64 <MX_DMA_Init>
  MX_SPI2_Init();
 80023ae:	f000 fa35 	bl	800281c <MX_SPI2_Init>
  MX_TIM4_Init();
 80023b2:	f000 fae7 	bl	8002984 <MX_TIM4_Init>
  MX_TIM7_Init();
 80023b6:	f000 fb3d 	bl	8002a34 <MX_TIM7_Init>
  MX_I2C1_Init();
 80023ba:	f000 f9af 	bl	800271c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80023be:	f000 fba1 	bl	8002b04 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80023c2:	f000 f9eb 	bl	800279c <MX_I2C2_Init>
  MX_TIM2_Init();
 80023c6:	f000 fa67 	bl	8002898 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80023ca:	f000 fb6b 	bl	8002aa4 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 80023ce:	f000 f8c9 	bl	8002564 <MX_ADC3_Init>
  MX_ADC4_Init();
 80023d2:	f000 f945 	bl	8002660 <MX_ADC4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80023d6:	4825      	ldr	r0, [pc, #148]	@ (800246c <main+0xd4>)
 80023d8:	f006 ff48 	bl	800926c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80023dc:	4824      	ldr	r0, [pc, #144]	@ (8002470 <main+0xd8>)
 80023de:	f006 ff45 	bl	800926c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80023e2:	2100      	movs	r1, #0
 80023e4:	4823      	ldr	r0, [pc, #140]	@ (8002474 <main+0xdc>)
 80023e6:	f007 f869 	bl	80094bc <HAL_TIM_PWM_Start>
  __HAL_SPI_ENABLE(&hspi2);
 80023ea:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <main+0xe0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b21      	ldr	r3, [pc, #132]	@ (8002478 <main+0xe0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023f8:	601a      	str	r2, [r3, #0]
  //ssd1306_Init();
  //BH1750_Init();
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002400:	481e      	ldr	r0, [pc, #120]	@ (800247c <main+0xe4>)
 8002402:	f003 fb77 	bl	8005af4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800240c:	481b      	ldr	r0, [pc, #108]	@ (800247c <main+0xe4>)
 800240e:	f003 fb71 	bl	8005af4 <HAL_GPIO_WritePin>
  canopyControl(false);
 8002412:	2000      	movs	r0, #0
 8002414:	f7ff fa9c 	bl	8001950 <canopyControl>
  HAL_ADC_Stop(&hadc4);
 8002418:	4819      	ldr	r0, [pc, #100]	@ (8002480 <main+0xe8>)
 800241a:	f001 fdf3 	bl	8004004 <HAL_ADC_Stop>
  HAL_Delay(50);
 800241e:	2032      	movs	r0, #50	@ 0x32
 8002420:	f001 fa88 	bl	8003934 <HAL_Delay>
  HAL_ADC_Stop(&hadc3);
 8002424:	4817      	ldr	r0, [pc, #92]	@ (8002484 <main+0xec>)
 8002426:	f001 fded 	bl	8004004 <HAL_ADC_Stop>
  HAL_Delay(50);
 800242a:	2032      	movs	r0, #50	@ 0x32
 800242c:	f001 fa82 	bl	8003934 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8002430:	2100      	movs	r1, #0
 8002432:	4813      	ldr	r0, [pc, #76]	@ (8002480 <main+0xe8>)
 8002434:	f002 f847 	bl	80044c6 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(200);
 8002438:	20c8      	movs	r0, #200	@ 0xc8
 800243a:	f001 fa7b 	bl	8003934 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800243e:	2100      	movs	r1, #0
 8002440:	4810      	ldr	r0, [pc, #64]	@ (8002484 <main+0xec>)
 8002442:	f002 f840 	bl	80044c6 <HAL_ADCEx_Calibration_Start>
  HAL_Delay(200);
 8002446:	20c8      	movs	r0, #200	@ 0xc8
 8002448:	f001 fa74 	bl	8003934 <HAL_Delay>
  Ringbuf_init ();
 800244c:	f7fe ff2a 	bl	80012a4 <Ringbuf_init>
  osjob_t initjob;
  os_init();
 8002450:	f00d fa22 	bl	800f898 <os_init>
  debug_init();
 8002454:	f00e fa12 	bl	801087c <debug_init>
  os_setCallback(&initjob, initfunc);
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	490b      	ldr	r1, [pc, #44]	@ (8002488 <main+0xf0>)
 800245c:	4618      	mov	r0, r3
 800245e:	f00d fa7d 	bl	800f95c <os_setCallback>
  os_runloop();
 8002462:	f00d fae7 	bl	800fa34 <os_runloop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <main+0xce>
 800246a:	bf00      	nop
 800246c:	200005c0 	.word	0x200005c0
 8002470:	2000060c 	.word	0x2000060c
 8002474:	20000574 	.word	0x20000574
 8002478:	20000510 	.word	0x20000510
 800247c:	48000800 	.word	0x48000800
 8002480:	200003d4 	.word	0x200003d4
 8002484:	20000384 	.word	0x20000384
 8002488:	08002279 	.word	0x08002279

0800248c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b0a6      	sub	sp, #152	@ 0x98
 8002490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002492:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8002496:	2228      	movs	r2, #40	@ 0x28
 8002498:	2100      	movs	r1, #0
 800249a:	4618      	mov	r0, r3
 800249c:	f00f fb62 	bl	8011b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2258      	movs	r2, #88	@ 0x58
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f00f fb54 	bl	8011b64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024bc:	2302      	movs	r3, #2
 80024be:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024c0:	2301      	movs	r3, #1
 80024c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c4:	2310      	movs	r3, #16
 80024c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80024d8:	2300      	movs	r3, #0
 80024da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80024e8:	4618      	mov	r0, r3
 80024ea:	f004 fa9f 	bl	8006a2c <HAL_RCC_OscConfig>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80024f4:	f000 fbfe 	bl	8002cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f8:	230f      	movs	r3, #15
 80024fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fc:	2302      	movs	r3, #2
 80024fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002508:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800250a:	2300      	movs	r3, #0
 800250c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800250e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f005 fadd 	bl	8007ad4 <HAL_RCC_ClockConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002520:	f000 fbe8 	bl	8002cf4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <SystemClock_Config+0xd4>)
 8002526:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8002530:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_HSI;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800253e:	2300      	movs	r3, #0
 8002540:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8002542:	2300      	movs	r3, #0
 8002544:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	4618      	mov	r0, r3
 800254a:	f005 fce3 	bl	8007f14 <HAL_RCCEx_PeriphCLKConfig>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002554:	f000 fbce 	bl	8002cf4 <Error_Handler>
  }
}
 8002558:	bf00      	nop
 800255a:	3798      	adds	r7, #152	@ 0x98
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	00300163 	.word	0x00300163

08002564 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800256a:	f107 031c 	add.w	r3, r7, #28
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
 8002574:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002576:	1d3b      	adds	r3, r7, #4
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
 8002584:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002586:	4b34      	ldr	r3, [pc, #208]	@ (8002658 <MX_ADC3_Init+0xf4>)
 8002588:	4a34      	ldr	r2, [pc, #208]	@ (800265c <MX_ADC3_Init+0xf8>)
 800258a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800258c:	4b32      	ldr	r3, [pc, #200]	@ (8002658 <MX_ADC3_Init+0xf4>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002592:	4b31      	ldr	r3, [pc, #196]	@ (8002658 <MX_ADC3_Init+0xf4>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002598:	4b2f      	ldr	r3, [pc, #188]	@ (8002658 <MX_ADC3_Init+0xf4>)
 800259a:	2201      	movs	r2, #1
 800259c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800259e:	4b2e      	ldr	r3, [pc, #184]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80025a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80025ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025b2:	4b29      	ldr	r3, [pc, #164]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025b8:	4b27      	ldr	r3, [pc, #156]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80025be:	4b26      	ldr	r3, [pc, #152]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025c0:	2202      	movs	r2, #2
 80025c2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80025c4:	4b24      	ldr	r3, [pc, #144]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025cc:	4b22      	ldr	r3, [pc, #136]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025ce:	2204      	movs	r2, #4
 80025d0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80025d2:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80025d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025da:	2200      	movs	r2, #0
 80025dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80025de:	481e      	ldr	r0, [pc, #120]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025e0:	f001 fa00 	bl	80039e4 <HAL_ADC_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80025ea:	f000 fb83 	bl	8002cf4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	4817      	ldr	r0, [pc, #92]	@ (8002658 <MX_ADC3_Init+0xf4>)
 80025fa:	f002 fac1 	bl	8004b80 <HAL_ADCEx_MultiModeConfigChannel>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8002604:	f000 fb76 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002608:	230c      	movs	r3, #12
 800260a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800260c:	2301      	movs	r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8002614:	2305      	movs	r3, #5
 8002616:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002620:	1d3b      	adds	r3, r7, #4
 8002622:	4619      	mov	r1, r3
 8002624:	480c      	ldr	r0, [pc, #48]	@ (8002658 <MX_ADC3_Init+0xf4>)
 8002626:	f001 ffc1 	bl	80045ac <HAL_ADC_ConfigChannel>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8002630:	f000 fb60 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002634:	2301      	movs	r3, #1
 8002636:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002638:	2302      	movs	r3, #2
 800263a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4805      	ldr	r0, [pc, #20]	@ (8002658 <MX_ADC3_Init+0xf4>)
 8002642:	f001 ffb3 	bl	80045ac <HAL_ADC_ConfigChannel>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 800264c:	f000 fb52 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002650:	bf00      	nop
 8002652:	3728      	adds	r7, #40	@ 0x28
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	20000384 	.word	0x20000384
 800265c:	50000400 	.word	0x50000400

08002660 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002666:	463b      	mov	r3, r7
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8002676:	4b27      	ldr	r3, [pc, #156]	@ (8002714 <MX_ADC4_Init+0xb4>)
 8002678:	4a27      	ldr	r2, [pc, #156]	@ (8002718 <MX_ADC4_Init+0xb8>)
 800267a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800267c:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <MX_ADC4_Init+0xb4>)
 800267e:	2200      	movs	r2, #0
 8002680:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8002682:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <MX_ADC4_Init+0xb4>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002688:	4b22      	ldr	r3, [pc, #136]	@ (8002714 <MX_ADC4_Init+0xb4>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800268e:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <MX_ADC4_Init+0xb4>)
 8002690:	2200      	movs	r2, #0
 8002692:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8002694:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <MX_ADC4_Init+0xb4>)
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <MX_ADC4_Init+0xb4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80026b4:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026bc:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026be:	2204      	movs	r2, #4
 80026c0:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80026c2:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80026ce:	4811      	ldr	r0, [pc, #68]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026d0:	f001 f988 	bl	80039e4 <HAL_ADC_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80026da:	f000 fb0b 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026de:	2303      	movs	r3, #3
 80026e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026e2:	2301      	movs	r3, #1
 80026e4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80026ea:	2307      	movs	r3, #7
 80026ec:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80026f6:	463b      	mov	r3, r7
 80026f8:	4619      	mov	r1, r3
 80026fa:	4806      	ldr	r0, [pc, #24]	@ (8002714 <MX_ADC4_Init+0xb4>)
 80026fc:	f001 ff56 	bl	80045ac <HAL_ADC_ConfigChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 8002706:	f000 faf5 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800270a:	bf00      	nop
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200003d4 	.word	0x200003d4
 8002718:	50000500 	.word	0x50000500

0800271c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <MX_I2C1_Init+0x74>)
 8002722:	4a1c      	ldr	r2, [pc, #112]	@ (8002794 <MX_I2C1_Init+0x78>)
 8002724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <MX_I2C1_Init+0x74>)
 8002728:	4a1b      	ldr	r2, [pc, #108]	@ (8002798 <MX_I2C1_Init+0x7c>)
 800272a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800272c:	4b18      	ldr	r3, [pc, #96]	@ (8002790 <MX_I2C1_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <MX_I2C1_Init+0x74>)
 8002734:	2201      	movs	r2, #1
 8002736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002738:	4b15      	ldr	r3, [pc, #84]	@ (8002790 <MX_I2C1_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <MX_I2C1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002744:	4b12      	ldr	r3, [pc, #72]	@ (8002790 <MX_I2C1_Init+0x74>)
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <MX_I2C1_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002750:	4b0f      	ldr	r3, [pc, #60]	@ (8002790 <MX_I2C1_Init+0x74>)
 8002752:	2200      	movs	r2, #0
 8002754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002756:	480e      	ldr	r0, [pc, #56]	@ (8002790 <MX_I2C1_Init+0x74>)
 8002758:	f003 f9fc 	bl	8005b54 <HAL_I2C_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002762:	f000 fac7 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002766:	2100      	movs	r1, #0
 8002768:	4809      	ldr	r0, [pc, #36]	@ (8002790 <MX_I2C1_Init+0x74>)
 800276a:	f004 f8ab 	bl	80068c4 <HAL_I2CEx_ConfigAnalogFilter>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002774:	f000 fabe 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002778:	2100      	movs	r1, #0
 800277a:	4805      	ldr	r0, [pc, #20]	@ (8002790 <MX_I2C1_Init+0x74>)
 800277c:	f004 f8ed 	bl	800695a <HAL_I2CEx_ConfigDigitalFilter>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002786:	f000 fab5 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000468 	.word	0x20000468
 8002794:	40005400 	.word	0x40005400
 8002798:	0010020a 	.word	0x0010020a

0800279c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002814 <MX_I2C2_Init+0x78>)
 80027a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00201D2B;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002818 <MX_I2C2_Init+0x7c>)
 80027aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80027ac:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027b2:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b8:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80027be:	4b14      	ldr	r3, [pc, #80]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027c4:	4b12      	ldr	r3, [pc, #72]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80027d6:	480e      	ldr	r0, [pc, #56]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027d8:	f003 f9bc 	bl	8005b54 <HAL_I2C_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80027e2:	f000 fa87 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80027e6:	2100      	movs	r1, #0
 80027e8:	4809      	ldr	r0, [pc, #36]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027ea:	f004 f86b 	bl	80068c4 <HAL_I2CEx_ConfigAnalogFilter>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80027f4:	f000 fa7e 	bl	8002cf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80027f8:	2100      	movs	r1, #0
 80027fa:	4805      	ldr	r0, [pc, #20]	@ (8002810 <MX_I2C2_Init+0x74>)
 80027fc:	f004 f8ad 	bl	800695a <HAL_I2CEx_ConfigDigitalFilter>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002806:	f000 fa75 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200004bc 	.word	0x200004bc
 8002814:	40005800 	.word	0x40005800
 8002818:	00201d2b 	.word	0x00201d2b

0800281c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002822:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <MX_SPI2_Init+0x78>)
 8002824:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002826:	4b1a      	ldr	r3, [pc, #104]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002828:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800282c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800282e:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002834:	4b16      	ldr	r3, [pc, #88]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002836:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800283a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800283c:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <MX_SPI2_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002844:	2200      	movs	r2, #0
 8002846:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002848:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <MX_SPI2_Init+0x74>)
 800284a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800284e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002850:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002852:	2228      	movs	r2, #40	@ 0x28
 8002854:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002856:	4b0e      	ldr	r3, [pc, #56]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002858:	2200      	movs	r2, #0
 800285a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <MX_SPI2_Init+0x74>)
 800285e:	2200      	movs	r2, #0
 8002860:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002862:	4b0b      	ldr	r3, [pc, #44]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002864:	2200      	movs	r2, #0
 8002866:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <MX_SPI2_Init+0x74>)
 800286a:	2207      	movs	r2, #7
 800286c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800286e:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002870:	2200      	movs	r2, #0
 8002872:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <MX_SPI2_Init+0x74>)
 8002876:	2208      	movs	r2, #8
 8002878:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800287a:	4805      	ldr	r0, [pc, #20]	@ (8002890 <MX_SPI2_Init+0x74>)
 800287c:	f005 fd68 	bl	8008350 <HAL_SPI_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002886:	f000 fa35 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000510 	.word	0x20000510
 8002894:	40003800 	.word	0x40003800

08002898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08e      	sub	sp, #56	@ 0x38
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800289e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
 80028a8:	609a      	str	r2, [r3, #8]
 80028aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028b8:	463b      	mov	r3, r7
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	60da      	str	r2, [r3, #12]
 80028c4:	611a      	str	r2, [r3, #16]
 80028c6:	615a      	str	r2, [r3, #20]
 80028c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002980 <MX_TIM2_Init+0xe8>)
 80028cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80028d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80028d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002980 <MX_TIM2_Init+0xe8>)
 80028d4:	220f      	movs	r2, #15
 80028d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028d8:	4b29      	ldr	r3, [pc, #164]	@ (8002980 <MX_TIM2_Init+0xe8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80028de:	4b28      	ldr	r3, [pc, #160]	@ (8002980 <MX_TIM2_Init+0xe8>)
 80028e0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80028e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e6:	4b26      	ldr	r3, [pc, #152]	@ (8002980 <MX_TIM2_Init+0xe8>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ec:	4b24      	ldr	r3, [pc, #144]	@ (8002980 <MX_TIM2_Init+0xe8>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80028f2:	4823      	ldr	r0, [pc, #140]	@ (8002980 <MX_TIM2_Init+0xe8>)
 80028f4:	f006 fc62 	bl	80091bc <HAL_TIM_Base_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80028fe:	f000 f9f9 	bl	8002cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002902:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002906:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002908:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800290c:	4619      	mov	r1, r3
 800290e:	481c      	ldr	r0, [pc, #112]	@ (8002980 <MX_TIM2_Init+0xe8>)
 8002910:	f007 f970 	bl	8009bf4 <HAL_TIM_ConfigClockSource>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800291a:	f000 f9eb 	bl	8002cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800291e:	4818      	ldr	r0, [pc, #96]	@ (8002980 <MX_TIM2_Init+0xe8>)
 8002920:	f006 fd6b 	bl	80093fa <HAL_TIM_PWM_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800292a:	f000 f9e3 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	4619      	mov	r1, r3
 800293c:	4810      	ldr	r0, [pc, #64]	@ (8002980 <MX_TIM2_Init+0xe8>)
 800293e:	f007 febb 	bl	800a6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002948:	f000 f9d4 	bl	8002cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800294c:	2360      	movs	r3, #96	@ 0x60
 800294e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002954:	2300      	movs	r3, #0
 8002956:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800295c:	463b      	mov	r3, r7
 800295e:	2200      	movs	r2, #0
 8002960:	4619      	mov	r1, r3
 8002962:	4807      	ldr	r0, [pc, #28]	@ (8002980 <MX_TIM2_Init+0xe8>)
 8002964:	f007 f832 	bl	80099cc <HAL_TIM_PWM_ConfigChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800296e:	f000 f9c1 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002972:	4803      	ldr	r0, [pc, #12]	@ (8002980 <MX_TIM2_Init+0xe8>)
 8002974:	f000 fd40 	bl	80033f8 <HAL_TIM_MspPostInit>

}
 8002978:	bf00      	nop
 800297a:	3738      	adds	r7, #56	@ 0x38
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000574 	.word	0x20000574

08002984 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	@ 0x28
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002996:	463b      	mov	r3, r7
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
 80029a4:	615a      	str	r2, [r3, #20]
 80029a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029a8:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029aa:	4a21      	ldr	r2, [pc, #132]	@ (8002a30 <MX_TIM4_Init+0xac>)
 80029ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 500-1;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029b0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80029b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80029c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80029d0:	4816      	ldr	r0, [pc, #88]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029d2:	f006 fcbb 	bl	800934c <HAL_TIM_OC_Init>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80029dc:	f000 f98a 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	4619      	mov	r1, r3
 80029ee:	480f      	ldr	r0, [pc, #60]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 80029f0:	f007 fe62 	bl	800a6b8 <HAL_TIMEx_MasterConfigSynchronization>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80029fa:	f000 f97b 	bl	8002cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80029fe:	2300      	movs	r3, #0
 8002a00:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a0e:	463b      	mov	r3, r7
 8002a10:	2200      	movs	r2, #0
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_TIM4_Init+0xa8>)
 8002a16:	f006 ff5f 	bl	80098d8 <HAL_TIM_OC_ConfigChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002a20:	f000 f968 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	@ 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200005c0 	.word	0x200005c0
 8002a30:	40000800 	.word	0x40000800

08002a34 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002a44:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <MX_TIM7_Init+0x68>)
 8002a46:	4a16      	ldr	r2, [pc, #88]	@ (8002aa0 <MX_TIM7_Init+0x6c>)
 8002a48:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1221-1;
 8002a4a:	4b14      	ldr	r3, [pc, #80]	@ (8002a9c <MX_TIM7_Init+0x68>)
 8002a4c:	f240 42c4 	movw	r2, #1220	@ 0x4c4
 8002a50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <MX_TIM7_Init+0x68>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535-1;
 8002a58:	4b10      	ldr	r3, [pc, #64]	@ (8002a9c <MX_TIM7_Init+0x68>)
 8002a5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002a5e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a60:	4b0e      	ldr	r3, [pc, #56]	@ (8002a9c <MX_TIM7_Init+0x68>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002a66:	480d      	ldr	r0, [pc, #52]	@ (8002a9c <MX_TIM7_Init+0x68>)
 8002a68:	f006 fba8 	bl	80091bc <HAL_TIM_Base_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002a72:	f000 f93f 	bl	8002cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4806      	ldr	r0, [pc, #24]	@ (8002a9c <MX_TIM7_Init+0x68>)
 8002a84:	f007 fe18 	bl	800a6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002a8e:	f000 f931 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	2000060c 	.word	0x2000060c
 8002aa0:	40001400 	.word	0x40001400

08002aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aa8:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002aaa:	4a15      	ldr	r2, [pc, #84]	@ (8002b00 <MX_USART1_UART_Init+0x5c>)
 8002aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aae:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ab6:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002abc:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002aca:	2204      	movs	r2, #4
 8002acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ace:	4b0b      	ldr	r3, [pc, #44]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ada:	4b08      	ldr	r3, [pc, #32]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ae6:	4805      	ldr	r0, [pc, #20]	@ (8002afc <MX_USART1_UART_Init+0x58>)
 8002ae8:	f007 fe90 	bl	800a80c <HAL_UART_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002af2:	f000 f8ff 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000658 	.word	0x20000658
 8002b00:	40013800 	.word	0x40013800

08002b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b0a:	4a15      	ldr	r2, [pc, #84]	@ (8002b60 <MX_USART2_UART_Init+0x5c>)
 8002b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b10:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b16:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b2a:	2208      	movs	r2, #8
 8002b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b40:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b46:	4805      	ldr	r0, [pc, #20]	@ (8002b5c <MX_USART2_UART_Init+0x58>)
 8002b48:	f007 fe60 	bl	800a80c <HAL_UART_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b52:	f000 f8cf 	bl	8002cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200006e0 	.word	0x200006e0
 8002b60:	40004400 	.word	0x40004400

08002b64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b9c <MX_DMA_Init+0x38>)
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b9c <MX_DMA_Init+0x38>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6153      	str	r3, [r2, #20]
 8002b76:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <MX_DMA_Init+0x38>)
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2100      	movs	r1, #0
 8002b86:	203c      	movs	r0, #60	@ 0x3c
 8002b88:	f002 fbad 	bl	80052e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8002b8c:	203c      	movs	r0, #60	@ 0x3c
 8002b8e:	f002 fbc6 	bl	800531e <HAL_NVIC_EnableIRQ>

}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba6:	f107 0314 	add.w	r3, r7, #20
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4a4b      	ldr	r2, [pc, #300]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bc0:	6153      	str	r3, [r2, #20]
 8002bc2:	4b49      	ldr	r3, [pc, #292]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bce:	4b46      	ldr	r3, [pc, #280]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4a45      	ldr	r2, [pc, #276]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bd8:	6153      	str	r3, [r2, #20]
 8002bda:	4b43      	ldr	r3, [pc, #268]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4b40      	ldr	r3, [pc, #256]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4a3f      	ldr	r2, [pc, #252]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf0:	6153      	str	r3, [r2, #20]
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	4a39      	ldr	r2, [pc, #228]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c08:	6153      	str	r3, [r2, #20]
 8002c0a:	4b37      	ldr	r3, [pc, #220]	@ (8002ce8 <MX_GPIO_Init+0x148>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c12:	607b      	str	r3, [r7, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2120      	movs	r1, #32
 8002c1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c1e:	f002 ff69 	bl	8005af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, lora_NSS_PIN_Pin|lora_Reset_PIN_Pin|GPIO_PIN_10|GPIO_PIN_11
 8002c22:	2200      	movs	r2, #0
 8002c24:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 8002c28:	4830      	ldr	r0, [pc, #192]	@ (8002cec <MX_GPIO_Init+0x14c>)
 8002c2a:	f002 ff63 	bl	8005af4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : lora_DIO1_PIN_Pin lora_DIO2_PIN_Pin lora_DIO0_PIN_Pin */
  GPIO_InitStruct.Pin = lora_DIO1_PIN_Pin|lora_DIO2_PIN_Pin|lora_DIO0_PIN_Pin;
 8002c2e:	2383      	movs	r3, #131	@ 0x83
 8002c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c32:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	482a      	ldr	r0, [pc, #168]	@ (8002cec <MX_GPIO_Init+0x14c>)
 8002c44:	f002 fdb4 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c62:	f002 fda5 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c6c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	481c      	ldr	r0, [pc, #112]	@ (8002cf0 <MX_GPIO_Init+0x150>)
 8002c7e:	f002 fd97 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : lora_NSS_PIN_Pin lora_Reset_PIN_Pin PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = lora_NSS_PIN_Pin|lora_Reset_PIN_Pin|GPIO_PIN_10|GPIO_PIN_11
 8002c82:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002c86:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4814      	ldr	r0, [pc, #80]	@ (8002cec <MX_GPIO_Init+0x14c>)
 8002c9c:	f002 fd88 	bl	80057b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2006      	movs	r0, #6
 8002ca6:	f002 fb1e 	bl	80052e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002caa:	2006      	movs	r0, #6
 8002cac:	f002 fb37 	bl	800531e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	2007      	movs	r0, #7
 8002cb6:	f002 fb16 	bl	80052e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002cba:	2007      	movs	r0, #7
 8002cbc:	f002 fb2f 	bl	800531e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2017      	movs	r0, #23
 8002cc6:	f002 fb0e 	bl	80052e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002cca:	2017      	movs	r0, #23
 8002ccc:	f002 fb27 	bl	800531e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 2);
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2028      	movs	r0, #40	@ 0x28
 8002cd6:	f002 fb06 	bl	80052e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cda:	2028      	movs	r0, #40	@ 0x28
 8002cdc:	f002 fb1f 	bl	800531e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ce0:	bf00      	nop
 8002ce2:	3728      	adds	r7, #40	@ 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	48000400 	.word	0x48000400

08002cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf8:	b672      	cpsid	i
}
 8002cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <Error_Handler+0x8>

08002d00 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af04      	add	r7, sp, #16
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0e:	9302      	str	r3, [sp, #8]
 8002d10:	2301      	movs	r3, #1
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	1dfb      	adds	r3, r7, #7
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	2301      	movs	r3, #1
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2178      	movs	r1, #120	@ 0x78
 8002d1e:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <ssd1306_WriteCommand+0x2c>)
 8002d20:	f003 f9c2 	bl	80060a8 <HAL_I2C_Mem_Write>
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000468 	.word	0x20000468

08002d30 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af04      	add	r7, sp, #16
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d42:	9202      	str	r2, [sp, #8]
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	2240      	movs	r2, #64	@ 0x40
 8002d4e:	2178      	movs	r1, #120	@ 0x78
 8002d50:	4803      	ldr	r0, [pc, #12]	@ (8002d60 <ssd1306_WriteData+0x30>)
 8002d52:	f003 f9a9 	bl	80060a8 <HAL_I2C_Mem_Write>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	20000468 	.word	0x20000468

08002d64 <ssd1306_Fill>:
    
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <ssd1306_Fill+0x14>
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <ssd1306_Fill+0x16>
 8002d78:	23ff      	movs	r3, #255	@ 0xff
 8002d7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4803      	ldr	r0, [pc, #12]	@ (8002d90 <ssd1306_Fill+0x2c>)
 8002d82:	f00e feef 	bl	8011b64 <memset>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	20000874 	.word	0x20000874

08002d94 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	71fb      	strb	r3, [r7, #7]
 8002d9e:	e016      	b.n	8002dce <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	3b50      	subs	r3, #80	@ 0x50
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ffaa 	bl	8002d00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7ff ffa7 	bl	8002d00 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002db2:	2010      	movs	r0, #16
 8002db4:	f7ff ffa4 	bl	8002d00 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	4a08      	ldr	r2, [pc, #32]	@ (8002de0 <ssd1306_UpdateScreen+0x4c>)
 8002dbe:	4413      	add	r3, r2
 8002dc0:	2180      	movs	r1, #128	@ 0x80
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ffb4 	bl	8002d30 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	71fb      	strb	r3, [r7, #7]
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b07      	cmp	r3, #7
 8002dd2:	d9e5      	bls.n	8002da0 <ssd1306_UpdateScreen+0xc>
    }
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000874 	.word	0x20000874

08002de4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
 8002dee:	460b      	mov	r3, r1
 8002df0:	71bb      	strb	r3, [r7, #6]
 8002df2:	4613      	mov	r3, r2
 8002df4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	db3d      	blt.n	8002e7a <ssd1306_DrawPixel+0x96>
 8002dfe:	79bb      	ldrb	r3, [r7, #6]
 8002e00:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e02:	d83a      	bhi.n	8002e7a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002e04:	797b      	ldrb	r3, [r7, #5]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d11a      	bne.n	8002e40 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002e0a:	79fa      	ldrb	r2, [r7, #7]
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	08db      	lsrs	r3, r3, #3
 8002e10:	b2d8      	uxtb	r0, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	01db      	lsls	r3, r3, #7
 8002e16:	4413      	add	r3, r2
 8002e18:	4a1b      	ldr	r2, [pc, #108]	@ (8002e88 <ssd1306_DrawPixel+0xa4>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	b25a      	sxtb	r2, r3
 8002e1e:	79bb      	ldrb	r3, [r7, #6]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	b25b      	sxtb	r3, r3
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b259      	sxtb	r1, r3
 8002e30:	79fa      	ldrb	r2, [r7, #7]
 8002e32:	4603      	mov	r3, r0
 8002e34:	01db      	lsls	r3, r3, #7
 8002e36:	4413      	add	r3, r2
 8002e38:	b2c9      	uxtb	r1, r1
 8002e3a:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <ssd1306_DrawPixel+0xa4>)
 8002e3c:	54d1      	strb	r1, [r2, r3]
 8002e3e:	e01d      	b.n	8002e7c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002e40:	79fa      	ldrb	r2, [r7, #7]
 8002e42:	79bb      	ldrb	r3, [r7, #6]
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	b2d8      	uxtb	r0, r3
 8002e48:	4603      	mov	r3, r0
 8002e4a:	01db      	lsls	r3, r3, #7
 8002e4c:	4413      	add	r3, r2
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <ssd1306_DrawPixel+0xa4>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	b25a      	sxtb	r2, r3
 8002e54:	79bb      	ldrb	r3, [r7, #6]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	b25b      	sxtb	r3, r3
 8002e62:	43db      	mvns	r3, r3
 8002e64:	b25b      	sxtb	r3, r3
 8002e66:	4013      	ands	r3, r2
 8002e68:	b259      	sxtb	r1, r3
 8002e6a:	79fa      	ldrb	r2, [r7, #7]
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	01db      	lsls	r3, r3, #7
 8002e70:	4413      	add	r3, r2
 8002e72:	b2c9      	uxtb	r1, r1
 8002e74:	4a04      	ldr	r2, [pc, #16]	@ (8002e88 <ssd1306_DrawPixel+0xa4>)
 8002e76:	54d1      	strb	r1, [r2, r3]
 8002e78:	e000      	b.n	8002e7c <ssd1306_DrawPixel+0x98>
        return;
 8002e7a:	bf00      	nop
    }
}
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000874 	.word	0x20000874

08002e8c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4604      	mov	r4, r0
 8002e94:	4638      	mov	r0, r7
 8002e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002e9a:	4623      	mov	r3, r4
 8002e9c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	2b1f      	cmp	r3, #31
 8002ea2:	d902      	bls.n	8002eaa <ssd1306_WriteChar+0x1e>
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b7e      	cmp	r3, #126	@ 0x7e
 8002ea8:	d901      	bls.n	8002eae <ssd1306_WriteChar+0x22>
        return 0;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e077      	b.n	8002f9e <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002eae:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	783b      	ldrb	r3, [r7, #0]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	2b80      	cmp	r3, #128	@ 0x80
 8002eba:	dc06      	bgt.n	8002eca <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002ebc:	4b3a      	ldr	r3, [pc, #232]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002ebe:	885b      	ldrh	r3, [r3, #2]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	787b      	ldrb	r3, [r7, #1]
 8002ec4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002ec6:	2b40      	cmp	r3, #64	@ 0x40
 8002ec8:	dd01      	ble.n	8002ece <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e067      	b.n	8002f9e <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e04e      	b.n	8002f72 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	3b20      	subs	r3, #32
 8002eda:	7879      	ldrb	r1, [r7, #1]
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	440b      	add	r3, r1
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e036      	b.n	8002f62 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d013      	beq.n	8002f2c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002f04:	4b28      	ldr	r3, [pc, #160]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	b2d8      	uxtb	r0, r3
 8002f12:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002f14:	885b      	ldrh	r3, [r3, #2]
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002f24:	4619      	mov	r1, r3
 8002f26:	f7ff ff5d 	bl	8002de4 <ssd1306_DrawPixel>
 8002f2a:	e017      	b.n	8002f5c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	b2d8      	uxtb	r0, r3
 8002f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002f3c:	885b      	ldrh	r3, [r3, #2]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	b2d9      	uxtb	r1, r3
 8002f48:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	f7ff ff44 	bl	8002de4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	783b      	ldrb	r3, [r7, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d3c3      	bcc.n	8002ef4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	787b      	ldrb	r3, [r7, #1]
 8002f74:	461a      	mov	r2, r3
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d3ab      	bcc.n	8002ed4 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	d005      	beq.n	8002f92 <ssd1306_WriteChar+0x106>
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	7bfa      	ldrb	r2, [r7, #15]
 8002f8a:	3a20      	subs	r2, #32
 8002f8c:	440a      	add	r2, r1
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	e000      	b.n	8002f94 <ssd1306_WriteChar+0x108>
 8002f92:	783a      	ldrb	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <ssd1306_WriteChar+0x11c>)
 8002f9a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	@ 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd90      	pop	{r4, r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000c74 	.word	0x20000c74

08002fac <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002fba:	e013      	b.n	8002fe4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	7818      	ldrb	r0, [r3, #0]
 8002fc0:	7e3b      	ldrb	r3, [r7, #24]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	463b      	mov	r3, r7
 8002fc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc8:	f7ff ff60 	bl	8002e8c <ssd1306_WriteChar>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d002      	beq.n	8002fde <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	e008      	b.n	8002ff0 <ssd1306_WriteString+0x44>
        }
        str++;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e7      	bne.n	8002fbc <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	781b      	ldrb	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	460a      	mov	r2, r1
 8003002:	71fb      	strb	r3, [r7, #7]
 8003004:	4613      	mov	r3, r2
 8003006:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	b29a      	uxth	r2, r3
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <ssd1306_SetCursor+0x2c>)
 800300e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003010:	79bb      	ldrb	r3, [r7, #6]
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b03      	ldr	r3, [pc, #12]	@ (8003024 <ssd1306_SetCursor+0x2c>)
 8003016:	805a      	strh	r2, [r3, #2]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	20000c74 	.word	0x20000c74

08003028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302e:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <HAL_MspInit+0x44>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	4a0e      	ldr	r2, [pc, #56]	@ (800306c <HAL_MspInit+0x44>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6193      	str	r3, [r2, #24]
 800303a:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <HAL_MspInit+0x44>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b09      	ldr	r3, [pc, #36]	@ (800306c <HAL_MspInit+0x44>)
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4a08      	ldr	r2, [pc, #32]	@ (800306c <HAL_MspInit+0x44>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003050:	61d3      	str	r3, [r2, #28]
 8003052:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_MspInit+0x44>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800305e:	2007      	movs	r0, #7
 8003060:	f002 f936 	bl	80052d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003064:	bf00      	nop
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40021000 	.word	0x40021000

08003070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	@ 0x30
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a47      	ldr	r2, [pc, #284]	@ (80031ac <HAL_ADC_MspInit+0x13c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d155      	bne.n	800313e <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003092:	4b47      	ldr	r3, [pc, #284]	@ (80031b0 <HAL_ADC_MspInit+0x140>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	4a45      	ldr	r2, [pc, #276]	@ (80031b0 <HAL_ADC_MspInit+0x140>)
 800309a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 800309c:	4b44      	ldr	r3, [pc, #272]	@ (80031b0 <HAL_ADC_MspInit+0x140>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10b      	bne.n	80030bc <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80030a4:	4b43      	ldr	r3, [pc, #268]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	4a42      	ldr	r2, [pc, #264]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 80030aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030ae:	6153      	str	r3, [r2, #20]
 80030b0:	4b40      	ldr	r3, [pc, #256]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030bc:	4b3d      	ldr	r3, [pc, #244]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	4a3c      	ldr	r2, [pc, #240]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 80030c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030c6:	6153      	str	r3, [r2, #20]
 80030c8:	4b3a      	ldr	r3, [pc, #232]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	697b      	ldr	r3, [r7, #20]
    /**ADC3 GPIO Configuration
    PB0     ------> ADC3_IN12
    PB1     ------> ADC3_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030d4:	2303      	movs	r3, #3
 80030d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030d8:	2303      	movs	r3, #3
 80030da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	4834      	ldr	r0, [pc, #208]	@ (80031b8 <HAL_ADC_MspInit+0x148>)
 80030e8:	f002 fb62 	bl	80057b0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Channel5;
 80030ec:	4b33      	ldr	r3, [pc, #204]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 80030ee:	4a34      	ldr	r2, [pc, #208]	@ (80031c0 <HAL_ADC_MspInit+0x150>)
 80030f0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f2:	4b32      	ldr	r3, [pc, #200]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f8:	4b30      	ldr	r3, [pc, #192]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80030fe:	4b2f      	ldr	r3, [pc, #188]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 8003100:	2280      	movs	r2, #128	@ 0x80
 8003102:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003104:	4b2d      	ldr	r3, [pc, #180]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 8003106:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800310a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800310c:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 800310e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003112:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8003114:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 8003116:	2200      	movs	r2, #0
 8003118:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800311a:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 800311c:	2200      	movs	r2, #0
 800311e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003120:	4826      	ldr	r0, [pc, #152]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 8003122:	f002 f916 	bl	8005352 <HAL_DMA_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 800312c:	f7ff fde2 	bl	8002cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
 8003136:	4a21      	ldr	r2, [pc, #132]	@ (80031bc <HAL_ADC_MspInit+0x14c>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800313c:	e032      	b.n	80031a4 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC4)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a20      	ldr	r2, [pc, #128]	@ (80031c4 <HAL_ADC_MspInit+0x154>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d12d      	bne.n	80031a4 <HAL_ADC_MspInit+0x134>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8003148:	4b19      	ldr	r3, [pc, #100]	@ (80031b0 <HAL_ADC_MspInit+0x140>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <HAL_ADC_MspInit+0x140>)
 8003150:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8003152:	4b17      	ldr	r3, [pc, #92]	@ (80031b0 <HAL_ADC_MspInit+0x140>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10b      	bne.n	8003172 <HAL_ADC_MspInit+0x102>
      __HAL_RCC_ADC34_CLK_ENABLE();
 800315a:	4b16      	ldr	r3, [pc, #88]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 8003160:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003164:	6153      	str	r3, [r2, #20]
 8003166:	4b13      	ldr	r3, [pc, #76]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003172:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	4a0f      	ldr	r2, [pc, #60]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800317c:	6153      	str	r3, [r2, #20]
 800317e:	4b0d      	ldr	r3, [pc, #52]	@ (80031b4 <HAL_ADC_MspInit+0x144>)
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800318a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800318e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003190:	2303      	movs	r3, #3
 8003192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003194:	2300      	movs	r3, #0
 8003196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003198:	f107 031c 	add.w	r3, r7, #28
 800319c:	4619      	mov	r1, r3
 800319e:	4806      	ldr	r0, [pc, #24]	@ (80031b8 <HAL_ADC_MspInit+0x148>)
 80031a0:	f002 fb06 	bl	80057b0 <HAL_GPIO_Init>
}
 80031a4:	bf00      	nop
 80031a6:	3730      	adds	r7, #48	@ 0x30
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	50000400 	.word	0x50000400
 80031b0:	20000c7c 	.word	0x20000c7c
 80031b4:	40021000 	.word	0x40021000
 80031b8:	48000400 	.word	0x48000400
 80031bc:	20000424 	.word	0x20000424
 80031c0:	40020458 	.word	0x40020458
 80031c4:	50000500 	.word	0x50000500

080031c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	@ 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 031c 	add.w	r3, r7, #28
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a2f      	ldr	r2, [pc, #188]	@ (80032a4 <HAL_I2C_MspInit+0xdc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d128      	bne.n	800323c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ea:	4b2f      	ldr	r3, [pc, #188]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	4a2e      	ldr	r2, [pc, #184]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 80031f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031f4:	6153      	str	r3, [r2, #20]
 80031f6:	4b2c      	ldr	r3, [pc, #176]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003202:	23c0      	movs	r3, #192	@ 0xc0
 8003204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003206:	2312      	movs	r3, #18
 8003208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800320e:	2303      	movs	r3, #3
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003212:	2304      	movs	r3, #4
 8003214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003216:	f107 031c 	add.w	r3, r7, #28
 800321a:	4619      	mov	r1, r3
 800321c:	4823      	ldr	r0, [pc, #140]	@ (80032ac <HAL_I2C_MspInit+0xe4>)
 800321e:	f002 fac7 	bl	80057b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003222:	4b21      	ldr	r3, [pc, #132]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	4a20      	ldr	r2, [pc, #128]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003228:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800322c:	61d3      	str	r3, [r2, #28]
 800322e:	4b1e      	ldr	r3, [pc, #120]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800323a:	e02e      	b.n	800329a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C2)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1b      	ldr	r2, [pc, #108]	@ (80032b0 <HAL_I2C_MspInit+0xe8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d129      	bne.n	800329a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	4b18      	ldr	r3, [pc, #96]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4a17      	ldr	r2, [pc, #92]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 800324c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003250:	6153      	str	r3, [r2, #20]
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800325e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003264:	2312      	movs	r3, #18
 8003266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003268:	2300      	movs	r3, #0
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003270:	2304      	movs	r3, #4
 8003272:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	4619      	mov	r1, r3
 800327a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800327e:	f002 fa97 	bl	80057b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003282:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	4a08      	ldr	r2, [pc, #32]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003288:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800328c:	61d3      	str	r3, [r2, #28]
 800328e:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <HAL_I2C_MspInit+0xe0>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
}
 800329a:	bf00      	nop
 800329c:	3730      	adds	r7, #48	@ 0x30
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40005400 	.word	0x40005400
 80032a8:	40021000 	.word	0x40021000
 80032ac:	48000400 	.word	0x48000400
 80032b0:	40005800 	.word	0x40005800

080032b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	@ 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a17      	ldr	r2, [pc, #92]	@ (8003330 <HAL_SPI_MspInit+0x7c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d128      	bne.n	8003328 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <HAL_SPI_MspInit+0x80>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	4a16      	ldr	r2, [pc, #88]	@ (8003334 <HAL_SPI_MspInit+0x80>)
 80032dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e0:	61d3      	str	r3, [r2, #28]
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <HAL_SPI_MspInit+0x80>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ea:	613b      	str	r3, [r7, #16]
 80032ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <HAL_SPI_MspInit+0x80>)
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	4a10      	ldr	r2, [pc, #64]	@ (8003334 <HAL_SPI_MspInit+0x80>)
 80032f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f8:	6153      	str	r3, [r2, #20]
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <HAL_SPI_MspInit+0x80>)
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003306:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800330a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003314:	2303      	movs	r3, #3
 8003316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003318:	2305      	movs	r3, #5
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4619      	mov	r1, r3
 8003322:	4805      	ldr	r0, [pc, #20]	@ (8003338 <HAL_SPI_MspInit+0x84>)
 8003324:	f002 fa44 	bl	80057b0 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003328:	bf00      	nop
 800332a:	3728      	adds	r7, #40	@ 0x28
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40003800 	.word	0x40003800
 8003334:	40021000 	.word	0x40021000
 8003338:	48000400 	.word	0x48000400

0800333c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334c:	d10c      	bne.n	8003368 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800334e:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <HAL_TIM_Base_MspInit+0x68>)
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	4a14      	ldr	r2, [pc, #80]	@ (80033a4 <HAL_TIM_Base_MspInit+0x68>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	61d3      	str	r3, [r2, #28]
 800335a:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <HAL_TIM_Base_MspInit+0x68>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003366:	e018      	b.n	800339a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0e      	ldr	r2, [pc, #56]	@ (80033a8 <HAL_TIM_Base_MspInit+0x6c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d113      	bne.n	800339a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003372:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <HAL_TIM_Base_MspInit+0x68>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a0b      	ldr	r2, [pc, #44]	@ (80033a4 <HAL_TIM_Base_MspInit+0x68>)
 8003378:	f043 0320 	orr.w	r3, r3, #32
 800337c:	61d3      	str	r3, [r2, #28]
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_TIM_Base_MspInit+0x68>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800338a:	2200      	movs	r2, #0
 800338c:	2100      	movs	r1, #0
 800338e:	2037      	movs	r0, #55	@ 0x37
 8003390:	f001 ffa9 	bl	80052e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003394:	2037      	movs	r0, #55	@ 0x37
 8003396:	f001 ffc2 	bl	800531e <HAL_NVIC_EnableIRQ>
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40001400 	.word	0x40001400

080033ac <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_TIM_OC_MspInit+0x44>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d113      	bne.n	80033e6 <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033be:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <HAL_TIM_OC_MspInit+0x48>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	4a0c      	ldr	r2, [pc, #48]	@ (80033f4 <HAL_TIM_OC_MspInit+0x48>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	61d3      	str	r3, [r2, #28]
 80033ca:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <HAL_TIM_OC_MspInit+0x48>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	201e      	movs	r0, #30
 80033dc:	f001 ff83 	bl	80052e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033e0:	201e      	movs	r0, #30
 80033e2:	f001 ff9c 	bl	800531e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80033e6:	bf00      	nop
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40000800 	.word	0x40000800
 80033f4:	40021000 	.word	0x40021000

080033f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b088      	sub	sp, #32
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 030c 	add.w	r3, r7, #12
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d11d      	bne.n	8003456 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_TIM_MspPostInit+0x68>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4a10      	ldr	r2, [pc, #64]	@ (8003460 <HAL_TIM_MspPostInit+0x68>)
 8003420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003424:	6153      	str	r3, [r2, #20]
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <HAL_TIM_MspPostInit+0x68>)
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003436:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003438:	2302      	movs	r3, #2
 800343a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003440:	2300      	movs	r3, #0
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003444:	2301      	movs	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	f107 030c 	add.w	r3, r7, #12
 800344c:	4619      	mov	r1, r3
 800344e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003452:	f002 f9ad 	bl	80057b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40021000 	.word	0x40021000

08003464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b08c      	sub	sp, #48	@ 0x30
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800346c:	f107 031c 	add.w	r3, r7, #28
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	60da      	str	r2, [r3, #12]
 800347a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a32      	ldr	r2, [pc, #200]	@ (800354c <HAL_UART_MspInit+0xe8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d130      	bne.n	80034e8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003486:	4b32      	ldr	r3, [pc, #200]	@ (8003550 <HAL_UART_MspInit+0xec>)
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	4a31      	ldr	r2, [pc, #196]	@ (8003550 <HAL_UART_MspInit+0xec>)
 800348c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003490:	6193      	str	r3, [r2, #24]
 8003492:	4b2f      	ldr	r3, [pc, #188]	@ (8003550 <HAL_UART_MspInit+0xec>)
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800349e:	4b2c      	ldr	r3, [pc, #176]	@ (8003550 <HAL_UART_MspInit+0xec>)
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003550 <HAL_UART_MspInit+0xec>)
 80034a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80034a8:	6153      	str	r3, [r2, #20]
 80034aa:	4b29      	ldr	r3, [pc, #164]	@ (8003550 <HAL_UART_MspInit+0xec>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034b6:	2330      	movs	r3, #48	@ 0x30
 80034b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034c6:	2307      	movs	r3, #7
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034ca:	f107 031c 	add.w	r3, r7, #28
 80034ce:	4619      	mov	r1, r3
 80034d0:	4820      	ldr	r0, [pc, #128]	@ (8003554 <HAL_UART_MspInit+0xf0>)
 80034d2:	f002 f96d 	bl	80057b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034d6:	2200      	movs	r2, #0
 80034d8:	2100      	movs	r1, #0
 80034da:	2025      	movs	r0, #37	@ 0x25
 80034dc:	f001 ff03 	bl	80052e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034e0:	2025      	movs	r0, #37	@ 0x25
 80034e2:	f001 ff1c 	bl	800531e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034e6:	e02d      	b.n	8003544 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003558 <HAL_UART_MspInit+0xf4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d128      	bne.n	8003544 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034f2:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <HAL_UART_MspInit+0xec>)
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	4a16      	ldr	r2, [pc, #88]	@ (8003550 <HAL_UART_MspInit+0xec>)
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034fc:	61d3      	str	r3, [r2, #28]
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <HAL_UART_MspInit+0xec>)
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_UART_MspInit+0xec>)
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4a10      	ldr	r2, [pc, #64]	@ (8003550 <HAL_UART_MspInit+0xec>)
 8003510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003514:	6153      	str	r3, [r2, #20]
 8003516:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <HAL_UART_MspInit+0xec>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003522:	230c      	movs	r3, #12
 8003524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003526:	2302      	movs	r3, #2
 8003528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800352e:	2303      	movs	r3, #3
 8003530:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003532:	2307      	movs	r3, #7
 8003534:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003536:	f107 031c 	add.w	r3, r7, #28
 800353a:	4619      	mov	r1, r3
 800353c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003540:	f002 f936 	bl	80057b0 <HAL_GPIO_Init>
}
 8003544:	bf00      	nop
 8003546:	3730      	adds	r7, #48	@ 0x30
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40013800 	.word	0x40013800
 8003550:	40021000 	.word	0x40021000
 8003554:	48000800 	.word	0x48000800
 8003558:	40004400 	.word	0x40004400

0800355c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003560:	bf00      	nop
 8003562:	e7fd      	b.n	8003560 <NMI_Handler+0x4>

08003564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <HardFault_Handler+0x4>

0800356c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <MemManage_Handler+0x4>

08003574 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <BusFault_Handler+0x4>

0800357c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <UsageFault_Handler+0x4>

08003584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003588:	bf00      	nop
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <SysTick_Handler+0x20>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <SysTick_Handler+0x18>
 80035bc:	4b04      	ldr	r3, [pc, #16]	@ (80035d0 <SysTick_Handler+0x20>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	4b02      	ldr	r3, [pc, #8]	@ (80035d0 <SysTick_Handler+0x20>)
 80035c6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c8:	f000 f994 	bl	80038f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000240 	.word	0x20000240

080035d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(lora_DIO1_PIN_Pin);
 80035d8:	2001      	movs	r0, #1
 80035da:	f002 faa3 	bl	8005b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(lora_DIO2_PIN_Pin);
 80035e6:	2002      	movs	r0, #2
 80035e8:	f002 fa9c 	bl	8005b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(lora_DIO0_PIN_Pin);
 80035f4:	2080      	movs	r0, #128	@ 0x80
 80035f6:	f002 fa95 	bl	8005b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003604:	4802      	ldr	r0, [pc, #8]	@ (8003610 <TIM4_IRQHandler+0x10>)
 8003606:	f006 f865 	bl	80096d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200005c0 	.word	0x200005c0

08003614 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8003618:	4803      	ldr	r0, [pc, #12]	@ (8003628 <USART1_IRQHandler+0x14>)
 800361a:	f7fd ffed 	bl	80015f8 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800361e:	4802      	ldr	r0, [pc, #8]	@ (8003628 <USART1_IRQHandler+0x14>)
 8003620:	f007 f9cc 	bl	800a9bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003624:	bf00      	nop
 8003626:	bd80      	pop	{r7, pc}
 8003628:	20000658 	.word	0x20000658

0800362c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003630:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003634:	f002 fa76 	bl	8005b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}

0800363c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003640:	4802      	ldr	r0, [pc, #8]	@ (800364c <TIM7_IRQHandler+0x10>)
 8003642:	f006 f847 	bl	80096d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	2000060c 	.word	0x2000060c

08003650 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003654:	4802      	ldr	r0, [pc, #8]	@ (8003660 <DMA2_Channel5_IRQHandler+0x10>)
 8003656:	f001 ff9e 	bl	8005596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000424 	.word	0x20000424

08003664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return 1;
 8003668:	2301      	movs	r3, #1
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <_kill>:

int _kill(int pid, int sig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800367e:	f00e faf9 	bl	8011c74 <__errno>
 8003682:	4603      	mov	r3, r0
 8003684:	2216      	movs	r2, #22
 8003686:	601a      	str	r2, [r3, #0]
  return -1;
 8003688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_exit>:

void _exit (int status)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ffe7 	bl	8003674 <_kill>
  while (1) {}    /* Make sure we hang here */
 80036a6:	bf00      	nop
 80036a8:	e7fd      	b.n	80036a6 <_exit+0x12>

080036aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b086      	sub	sp, #24
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	60f8      	str	r0, [r7, #12]
 80036b2:	60b9      	str	r1, [r7, #8]
 80036b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	e00a      	b.n	80036d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036bc:	f3af 8000 	nop.w
 80036c0:	4601      	mov	r1, r0
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	60ba      	str	r2, [r7, #8]
 80036c8:	b2ca      	uxtb	r2, r1
 80036ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3301      	adds	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	dbf0      	blt.n	80036bc <_read+0x12>
  }

  return len;
 80036da:	687b      	ldr	r3, [r7, #4]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3718      	adds	r7, #24
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e009      	b.n	800370a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	60ba      	str	r2, [r7, #8]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3301      	adds	r3, #1
 8003708:	617b      	str	r3, [r7, #20]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	dbf1      	blt.n	80036f6 <_write+0x12>
  }
  return len;
 8003712:	687b      	ldr	r3, [r7, #4]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_close>:

int _close(int file)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003744:	605a      	str	r2, [r3, #4]
  return 0;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <_isatty>:

int _isatty(int file)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800375c:	2301      	movs	r3, #1
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800378c:	4a14      	ldr	r2, [pc, #80]	@ (80037e0 <_sbrk+0x5c>)
 800378e:	4b15      	ldr	r3, [pc, #84]	@ (80037e4 <_sbrk+0x60>)
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003798:	4b13      	ldr	r3, [pc, #76]	@ (80037e8 <_sbrk+0x64>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037a0:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <_sbrk+0x64>)
 80037a2:	4a12      	ldr	r2, [pc, #72]	@ (80037ec <_sbrk+0x68>)
 80037a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a6:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <_sbrk+0x64>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d207      	bcs.n	80037c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b4:	f00e fa5e 	bl	8011c74 <__errno>
 80037b8:	4603      	mov	r3, r0
 80037ba:	220c      	movs	r2, #12
 80037bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295
 80037c2:	e009      	b.n	80037d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c4:	4b08      	ldr	r3, [pc, #32]	@ (80037e8 <_sbrk+0x64>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037ca:	4b07      	ldr	r3, [pc, #28]	@ (80037e8 <_sbrk+0x64>)
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	4a05      	ldr	r2, [pc, #20]	@ (80037e8 <_sbrk+0x64>)
 80037d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20010000 	.word	0x20010000
 80037e4:	00000400 	.word	0x00000400
 80037e8:	20000c80 	.word	0x20000c80
 80037ec:	20001070 	.word	0x20001070

080037f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037f4:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <SystemInit+0x20>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fa:	4a05      	ldr	r2, [pc, #20]	@ (8003810 <SystemInit+0x20>)
 80037fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	e000ed00 	.word	0xe000ed00

08003814 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003814:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800384c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003818:	f7ff ffea 	bl	80037f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800381c:	480c      	ldr	r0, [pc, #48]	@ (8003850 <LoopForever+0x6>)
  ldr r1, =_edata
 800381e:	490d      	ldr	r1, [pc, #52]	@ (8003854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003820:	4a0d      	ldr	r2, [pc, #52]	@ (8003858 <LoopForever+0xe>)
  movs r3, #0
 8003822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003824:	e002      	b.n	800382c <LoopCopyDataInit>

08003826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800382a:	3304      	adds	r3, #4

0800382c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800382c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800382e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003830:	d3f9      	bcc.n	8003826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003832:	4a0a      	ldr	r2, [pc, #40]	@ (800385c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003834:	4c0a      	ldr	r4, [pc, #40]	@ (8003860 <LoopForever+0x16>)
  movs r3, #0
 8003836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003838:	e001      	b.n	800383e <LoopFillZerobss>

0800383a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800383a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800383c:	3204      	adds	r2, #4

0800383e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800383e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003840:	d3fb      	bcc.n	800383a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003842:	f00e fa1d 	bl	8011c80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003846:	f7fe fda7 	bl	8002398 <main>

0800384a <LoopForever>:

LoopForever:
    b LoopForever
 800384a:	e7fe      	b.n	800384a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800384c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003854:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8003858:	08015ef8 	.word	0x08015ef8
  ldr r2, =_sbss
 800385c:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8003860:	2000106c 	.word	0x2000106c

08003864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003864:	e7fe      	b.n	8003864 <ADC1_2_IRQHandler>
	...

08003868 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800386c:	4b08      	ldr	r3, [pc, #32]	@ (8003890 <HAL_Init+0x28>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a07      	ldr	r2, [pc, #28]	@ (8003890 <HAL_Init+0x28>)
 8003872:	f043 0310 	orr.w	r3, r3, #16
 8003876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003878:	2003      	movs	r0, #3
 800387a:	f001 fd29 	bl	80052d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800387e:	2000      	movs	r0, #0
 8003880:	f000 f808 	bl	8003894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003884:	f7ff fbd0 	bl	8003028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40022000 	.word	0x40022000

08003894 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800389c:	4b12      	ldr	r3, [pc, #72]	@ (80038e8 <HAL_InitTick+0x54>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <HAL_InitTick+0x58>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80038aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 fd41 	bl	800533a <HAL_SYSTICK_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e00e      	b.n	80038e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b0f      	cmp	r3, #15
 80038c6:	d80a      	bhi.n	80038de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038c8:	2200      	movs	r2, #0
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f001 fd09 	bl	80052e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038d4:	4a06      	ldr	r2, [pc, #24]	@ (80038f0 <HAL_InitTick+0x5c>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000008 	.word	0x20000008
 80038f0:	20000004 	.word	0x20000004

080038f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f8:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <HAL_IncTick+0x20>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <HAL_IncTick+0x24>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4413      	add	r3, r2
 8003904:	4a04      	ldr	r2, [pc, #16]	@ (8003918 <HAL_IncTick+0x24>)
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000008 	.word	0x20000008
 8003918:	20000c84 	.word	0x20000c84

0800391c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return uwTick;  
 8003920:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <HAL_GetTick+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000c84 	.word	0x20000c84

08003934 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff ffee 	bl	800391c <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d005      	beq.n	800395a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <HAL_Delay+0x44>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800395a:	bf00      	nop
 800395c:	f7ff ffde 	bl	800391c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d8f7      	bhi.n	800395c <HAL_Delay+0x28>
  {
  }
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000008 	.word	0x20000008

0800397c <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003980:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_SuspendTick+0x1c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a04      	ldr	r2, [pc, #16]	@ (8003998 <HAL_SuspendTick+0x1c>)
 8003986:	f023 0302 	bic.w	r3, r3, #2
 800398a:	6013      	str	r3, [r2, #0]
                                                   
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e010 	.word	0xe000e010

0800399c <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80039a0:	4b05      	ldr	r3, [pc, #20]	@ (80039b8 <HAL_ResumeTick+0x1c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a04      	ldr	r2, [pc, #16]	@ (80039b8 <HAL_ResumeTick+0x1c>)
 80039a6:	f043 0302 	orr.w	r3, r3, #2
 80039aa:	6013      	str	r3, [r2, #0]
  
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e000e010 	.word	0xe000e010

080039bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b09a      	sub	sp, #104	@ 0x68
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e1e3      	b.n	8003dcc <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d176      	bne.n	8003b04 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d152      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7ff fb19 	bl	8003070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d13b      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 fa53 	bl	8004ef8 <ADC_Disable>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d12f      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
 8003a64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d12b      	bne.n	8003ac4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a70:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a74:	f023 0302 	bic.w	r3, r3, #2
 8003a78:	f043 0202 	orr.w	r2, r3, #2
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003a8e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003a9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003aa0:	4b92      	ldr	r3, [pc, #584]	@ (8003cec <HAL_ADC_Init+0x308>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a92      	ldr	r2, [pc, #584]	@ (8003cf0 <HAL_ADC_Init+0x30c>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0c9a      	lsrs	r2, r3, #18
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ab6:	e002      	b.n	8003abe <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f9      	bne.n	8003ab8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ae0:	d110      	bne.n	8003b04 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f023 0312 	bic.w	r3, r3, #18
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f040 8150 	bne.w	8003db2 <HAL_ADC_Init+0x3ce>
 8003b12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 814b 	bne.w	8003db2 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f040 8143 	bne.w	8003db2 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b34:	f043 0202 	orr.w	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b44:	d004      	beq.n	8003b50 <HAL_ADC_Init+0x16c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a6a      	ldr	r2, [pc, #424]	@ (8003cf4 <HAL_ADC_Init+0x310>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_Init+0x170>
 8003b50:	4b69      	ldr	r3, [pc, #420]	@ (8003cf8 <HAL_ADC_Init+0x314>)
 8003b52:	e000      	b.n	8003b56 <HAL_ADC_Init+0x172>
 8003b54:	4b69      	ldr	r3, [pc, #420]	@ (8003cfc <HAL_ADC_Init+0x318>)
 8003b56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b60:	d102      	bne.n	8003b68 <HAL_ADC_Init+0x184>
 8003b62:	4b64      	ldr	r3, [pc, #400]	@ (8003cf4 <HAL_ADC_Init+0x310>)
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	e01a      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a61      	ldr	r2, [pc, #388]	@ (8003cf4 <HAL_ADC_Init+0x310>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d103      	bne.n	8003b7a <HAL_ADC_Init+0x196>
 8003b72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e011      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a60      	ldr	r2, [pc, #384]	@ (8003d00 <HAL_ADC_Init+0x31c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d102      	bne.n	8003b8a <HAL_ADC_Init+0x1a6>
 8003b84:	4b5f      	ldr	r3, [pc, #380]	@ (8003d04 <HAL_ADC_Init+0x320>)
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e009      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5d      	ldr	r2, [pc, #372]	@ (8003d04 <HAL_ADC_Init+0x320>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <HAL_ADC_Init+0x1b6>
 8003b94:	4b5a      	ldr	r3, [pc, #360]	@ (8003d00 <HAL_ADC_Init+0x31c>)
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e001      	b.n	8003b9e <HAL_ADC_Init+0x1ba>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d108      	bne.n	8003bbe <HAL_ADC_Init+0x1da>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_ADC_Init+0x1da>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_ADC_Init+0x1dc>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11c      	bne.n	8003bfe <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d107      	bne.n	8003be6 <HAL_ADC_Init+0x202>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d101      	bne.n	8003be6 <HAL_ADC_Init+0x202>
 8003be2:	2301      	movs	r3, #1
 8003be4:	e000      	b.n	8003be8 <HAL_ADC_Init+0x204>
 8003be6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bfc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7e5b      	ldrb	r3, [r3, #25]
 8003c02:	035b      	lsls	r3, r3, #13
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c08:	2a01      	cmp	r2, #1
 8003c0a:	d002      	beq.n	8003c12 <HAL_ADC_Init+0x22e>
 8003c0c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003c10:	e000      	b.n	8003c14 <HAL_ADC_Init+0x230>
 8003c12:	2200      	movs	r2, #0
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c24:	4313      	orrs	r3, r2
 8003c26:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d11b      	bne.n	8003c6a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	7e5b      	ldrb	r3, [r3, #25]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d109      	bne.n	8003c4e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	045a      	lsls	r2, r3, #17
 8003c42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c44:	4313      	orrs	r3, r2
 8003c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c4c:	e00d      	b.n	8003c6a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d054      	beq.n	8003d1c <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a22      	ldr	r2, [pc, #136]	@ (8003d00 <HAL_ADC_Init+0x31c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d004      	beq.n	8003c86 <HAL_ADC_Init+0x2a2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a20      	ldr	r2, [pc, #128]	@ (8003d04 <HAL_ADC_Init+0x320>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d140      	bne.n	8003d08 <HAL_ADC_Init+0x324>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8003c8e:	d02a      	beq.n	8003ce6 <HAL_ADC_Init+0x302>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c98:	d022      	beq.n	8003ce0 <HAL_ADC_Init+0x2fc>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8003ca2:	d01a      	beq.n	8003cda <HAL_ADC_Init+0x2f6>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8003cac:	d012      	beq.n	8003cd4 <HAL_ADC_Init+0x2f0>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb2:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8003cb6:	d00a      	beq.n	8003cce <HAL_ADC_Init+0x2ea>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_ADC_Init+0x2e4>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	e023      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cc8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003ccc:	e020      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cce:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8003cd2:	e01d      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cd4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003cd8:	e01a      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cde:	e017      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003ce0:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8003ce4:	e014      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003ce6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003cea:	e011      	b.n	8003d10 <HAL_ADC_Init+0x32c>
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	431bde83 	.word	0x431bde83
 8003cf4:	50000100 	.word	0x50000100
 8003cf8:	50000300 	.word	0x50000300
 8003cfc:	50000700 	.word	0x50000700
 8003d00:	50000400 	.word	0x50000400
 8003d04:	50000500 	.word	0x50000500
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d14:	4313      	orrs	r3, r2
 8003d16:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d114      	bne.n	8003d54 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6812      	ldr	r2, [r2, #0]
 8003d34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d38:	f023 0302 	bic.w	r3, r3, #2
 8003d3c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	7e1b      	ldrb	r3, [r3, #24]
 8003d42:	039a      	lsls	r2, r3, #14
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d50:	4313      	orrs	r3, r2
 8003d52:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd4 <HAL_ADC_Init+0x3f0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8003d64:	430b      	orrs	r3, r1
 8003d66:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d10c      	bne.n	8003d8a <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d76:	f023 010f 	bic.w	r1, r3, #15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	1e5a      	subs	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d88:	e007      	b.n	8003d9a <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 020f 	bic.w	r2, r2, #15
 8003d98:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f023 0303 	bic.w	r3, r3, #3
 8003da8:	f043 0201 	orr.w	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	641a      	str	r2, [r3, #64]	@ 0x40
 8003db0:	e00a      	b.n	8003dc8 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f023 0312 	bic.w	r3, r3, #18
 8003dba:	f043 0210 	orr.w	r2, r3, #16
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003dc8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3768      	adds	r7, #104	@ 0x68
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	fff0c007 	.word	0xfff0c007

08003dd8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f040 80f9 	bne.w	8003fe6 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_Start+0x2a>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e0f4      	b.n	8003fec <HAL_ADC_Start+0x214>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f001 f810 	bl	8004e30 <ADC_Enable>
 8003e10:	4603      	mov	r3, r0
 8003e12:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 80e0 	bne.w	8003fdc <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e38:	d004      	beq.n	8003e44 <HAL_ADC_Start+0x6c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6d      	ldr	r2, [pc, #436]	@ (8003ff4 <HAL_ADC_Start+0x21c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d106      	bne.n	8003e52 <HAL_ADC_Start+0x7a>
 8003e44:	4b6c      	ldr	r3, [pc, #432]	@ (8003ff8 <HAL_ADC_Start+0x220>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 031f 	and.w	r3, r3, #31
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_ADC_Start+0x9a>
 8003e50:	e005      	b.n	8003e5e <HAL_ADC_Start+0x86>
 8003e52:	4b6a      	ldr	r3, [pc, #424]	@ (8003ffc <HAL_ADC_Start+0x224>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_ADC_Start+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e66:	d004      	beq.n	8003e72 <HAL_ADC_Start+0x9a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a64      	ldr	r2, [pc, #400]	@ (8004000 <HAL_ADC_Start+0x228>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d115      	bne.n	8003e9e <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d036      	beq.n	8003efa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e94:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e9c:	e02d      	b.n	8003efa <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eb2:	d004      	beq.n	8003ebe <HAL_ADC_Start+0xe6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a4e      	ldr	r2, [pc, #312]	@ (8003ff4 <HAL_ADC_Start+0x21c>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_ADC_Start+0xfc>
 8003ebe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e008      	b.n	8003ee6 <HAL_ADC_Start+0x10e>
 8003ed4:	4b4a      	ldr	r3, [pc, #296]	@ (8004000 <HAL_ADC_Start+0x228>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d007      	beq.n	8003efa <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003ef2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f06:	d106      	bne.n	8003f16 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0c:	f023 0206 	bic.w	r2, r3, #6
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f14:	e002      	b.n	8003f1c <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	221c      	movs	r2, #28
 8003f2a:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f34:	d004      	beq.n	8003f40 <HAL_ADC_Start+0x168>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff4 <HAL_ADC_Start+0x21c>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d106      	bne.n	8003f4e <HAL_ADC_Start+0x176>
 8003f40:	4b2d      	ldr	r3, [pc, #180]	@ (8003ff8 <HAL_ADC_Start+0x220>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 031f 	and.w	r3, r3, #31
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d03e      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f4c:	e005      	b.n	8003f5a <HAL_ADC_Start+0x182>
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <HAL_ADC_Start+0x224>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d037      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f62:	d004      	beq.n	8003f6e <HAL_ADC_Start+0x196>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a22      	ldr	r2, [pc, #136]	@ (8003ff4 <HAL_ADC_Start+0x21c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d106      	bne.n	8003f7c <HAL_ADC_Start+0x1a4>
 8003f6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ff8 <HAL_ADC_Start+0x220>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d027      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f7a:	e005      	b.n	8003f88 <HAL_ADC_Start+0x1b0>
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ffc <HAL_ADC_Start+0x224>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d020      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f90:	d004      	beq.n	8003f9c <HAL_ADC_Start+0x1c4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a17      	ldr	r2, [pc, #92]	@ (8003ff4 <HAL_ADC_Start+0x21c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d106      	bne.n	8003faa <HAL_ADC_Start+0x1d2>
 8003f9c:	4b16      	ldr	r3, [pc, #88]	@ (8003ff8 <HAL_ADC_Start+0x220>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	2b09      	cmp	r3, #9
 8003fa6:	d010      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003fa8:	e005      	b.n	8003fb6 <HAL_ADC_Start+0x1de>
 8003faa:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <HAL_ADC_Start+0x224>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 031f 	and.w	r3, r3, #31
 8003fb2:	2b09      	cmp	r3, #9
 8003fb4:	d009      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fbe:	d004      	beq.n	8003fca <HAL_ADC_Start+0x1f2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	@ (8004000 <HAL_ADC_Start+0x228>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d10f      	bne.n	8003fea <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f042 0204 	orr.w	r2, r2, #4
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	e006      	b.n	8003fea <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003fe4:	e001      	b.n	8003fea <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	50000100 	.word	0x50000100
 8003ff8:	50000300 	.word	0x50000300
 8003ffc:	50000700 	.word	0x50000700
 8004000:	50000400 	.word	0x50000400

08004004 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_ADC_Stop+0x1a>
 800401a:	2302      	movs	r3, #2
 800401c:	e023      	b.n	8004066 <HAL_ADC_Stop+0x62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004026:	216c      	movs	r1, #108	@ 0x6c
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 ffcb 	bl	8004fc4 <ADC_ConversionStop>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d111      	bne.n	800405c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 ff5d 	bl	8004ef8 <ADC_Disable>
 800403e:	4603      	mov	r3, r0
 8004040:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004042:	7bfb      	ldrb	r3, [r7, #15]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d109      	bne.n	800405c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	f043 0201 	orr.w	r2, r3, #1
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	2b08      	cmp	r3, #8
 8004084:	d102      	bne.n	800408c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004086:	2308      	movs	r3, #8
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e03a      	b.n	8004102 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004094:	d004      	beq.n	80040a0 <HAL_ADC_PollForConversion+0x30>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a72      	ldr	r2, [pc, #456]	@ (8004264 <HAL_ADC_PollForConversion+0x1f4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_ADC_PollForConversion+0x34>
 80040a0:	4b71      	ldr	r3, [pc, #452]	@ (8004268 <HAL_ADC_PollForConversion+0x1f8>)
 80040a2:	e000      	b.n	80040a6 <HAL_ADC_PollForConversion+0x36>
 80040a4:	4b71      	ldr	r3, [pc, #452]	@ (800426c <HAL_ADC_PollForConversion+0x1fc>)
 80040a6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d112      	bne.n	80040da <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d11d      	bne.n	80040fe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e0bf      	b.n	800425a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00b      	beq.n	80040fe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0ad      	b.n	800425a <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80040fe:	230c      	movs	r3, #12
 8004100:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800410a:	d004      	beq.n	8004116 <HAL_ADC_PollForConversion+0xa6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a54      	ldr	r2, [pc, #336]	@ (8004264 <HAL_ADC_PollForConversion+0x1f4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d106      	bne.n	8004124 <HAL_ADC_PollForConversion+0xb4>
 8004116:	4b54      	ldr	r3, [pc, #336]	@ (8004268 <HAL_ADC_PollForConversion+0x1f8>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	2b00      	cmp	r3, #0
 8004120:	d010      	beq.n	8004144 <HAL_ADC_PollForConversion+0xd4>
 8004122:	e005      	b.n	8004130 <HAL_ADC_PollForConversion+0xc0>
 8004124:	4b51      	ldr	r3, [pc, #324]	@ (800426c <HAL_ADC_PollForConversion+0x1fc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	2b00      	cmp	r3, #0
 800412e:	d009      	beq.n	8004144 <HAL_ADC_PollForConversion+0xd4>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004138:	d004      	beq.n	8004144 <HAL_ADC_PollForConversion+0xd4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a4c      	ldr	r2, [pc, #304]	@ (8004270 <HAL_ADC_PollForConversion+0x200>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d104      	bne.n	800414e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	613b      	str	r3, [r7, #16]
 800414c:	e00f      	b.n	800416e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004156:	d004      	beq.n	8004162 <HAL_ADC_PollForConversion+0xf2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a41      	ldr	r2, [pc, #260]	@ (8004264 <HAL_ADC_PollForConversion+0x1f4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d102      	bne.n	8004168 <HAL_ADC_PollForConversion+0xf8>
 8004162:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004166:	e000      	b.n	800416a <HAL_ADC_PollForConversion+0xfa>
 8004168:	4b41      	ldr	r3, [pc, #260]	@ (8004270 <HAL_ADC_PollForConversion+0x200>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800416e:	f7ff fbd5 	bl	800391c <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004174:	e021      	b.n	80041ba <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417c:	d01d      	beq.n	80041ba <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <HAL_ADC_PollForConversion+0x124>
 8004184:	f7ff fbca 	bl	800391c <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d212      	bcs.n	80041ba <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	f043 0204 	orr.w	r2, r3, #4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04f      	b.n	800425a <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0d6      	beq.n	8004176 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d131      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d12c      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d125      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d112      	bne.n	800422e <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d112      	bne.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	641a      	str	r2, [r3, #64]	@ 0x40
 800422c:	e00b      	b.n	8004246 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f043 0220 	orr.w	r2, r3, #32
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	f043 0201 	orr.w	r2, r3, #1
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d103      	bne.n	8004258 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	50000100 	.word	0x50000100
 8004268:	50000300 	.word	0x50000300
 800426c:	50000700 	.word	0x50000700
 8004270:	50000400 	.word	0x50000400

08004274 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	2b00      	cmp	r3, #0
 8004290:	f040 80f7 	bne.w	8004482 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_Start_DMA+0x2e>
 800429e:	2302      	movs	r3, #2
 80042a0:	e0f2      	b.n	8004488 <HAL_ADC_Start_DMA+0x214>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042b2:	d004      	beq.n	80042be <HAL_ADC_Start_DMA+0x4a>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a75      	ldr	r2, [pc, #468]	@ (8004490 <HAL_ADC_Start_DMA+0x21c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d109      	bne.n	80042d2 <HAL_ADC_Start_DMA+0x5e>
 80042be:	4b75      	ldr	r3, [pc, #468]	@ (8004494 <HAL_ADC_Start_DMA+0x220>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 031f 	and.w	r3, r3, #31
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bf0c      	ite	eq
 80042ca:	2301      	moveq	r3, #1
 80042cc:	2300      	movne	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	e008      	b.n	80042e4 <HAL_ADC_Start_DMA+0x70>
 80042d2:	4b71      	ldr	r3, [pc, #452]	@ (8004498 <HAL_ADC_Start_DMA+0x224>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80c5 	beq.w	8004474 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 fda0 	bl	8004e30 <ADC_Enable>
 80042f0:	4603      	mov	r3, r0
 80042f2:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 80b7 	bne.w	800446a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004304:	f023 0301 	bic.w	r3, r3, #1
 8004308:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004318:	d004      	beq.n	8004324 <HAL_ADC_Start_DMA+0xb0>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a5c      	ldr	r2, [pc, #368]	@ (8004490 <HAL_ADC_Start_DMA+0x21c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d106      	bne.n	8004332 <HAL_ADC_Start_DMA+0xbe>
 8004324:	4b5b      	ldr	r3, [pc, #364]	@ (8004494 <HAL_ADC_Start_DMA+0x220>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 031f 	and.w	r3, r3, #31
 800432c:	2b00      	cmp	r3, #0
 800432e:	d010      	beq.n	8004352 <HAL_ADC_Start_DMA+0xde>
 8004330:	e005      	b.n	800433e <HAL_ADC_Start_DMA+0xca>
 8004332:	4b59      	ldr	r3, [pc, #356]	@ (8004498 <HAL_ADC_Start_DMA+0x224>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_ADC_Start_DMA+0xde>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004346:	d004      	beq.n	8004352 <HAL_ADC_Start_DMA+0xde>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a53      	ldr	r2, [pc, #332]	@ (800449c <HAL_ADC_Start_DMA+0x228>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d115      	bne.n	800437e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d036      	beq.n	80043da <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004370:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004374:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800437c:	e02d      	b.n	80043da <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004382:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004392:	d004      	beq.n	800439e <HAL_ADC_Start_DMA+0x12a>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3d      	ldr	r2, [pc, #244]	@ (8004490 <HAL_ADC_Start_DMA+0x21c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d10a      	bne.n	80043b4 <HAL_ADC_Start_DMA+0x140>
 800439e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf14      	ite	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	2300      	moveq	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e008      	b.n	80043c6 <HAL_ADC_Start_DMA+0x152>
 80043b4:	4b39      	ldr	r3, [pc, #228]	@ (800449c <HAL_ADC_Start_DMA+0x228>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf14      	ite	ne
 80043c0:	2301      	movne	r3, #1
 80043c2:	2300      	moveq	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	d106      	bne.n	80043f6 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ec:	f023 0206 	bic.w	r2, r3, #6
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80043f4:	e002      	b.n	80043fc <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	4a25      	ldr	r2, [pc, #148]	@ (80044a0 <HAL_ADC_Start_DMA+0x22c>)
 800440a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	4a24      	ldr	r2, [pc, #144]	@ (80044a4 <HAL_ADC_Start_DMA+0x230>)
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	4a23      	ldr	r2, [pc, #140]	@ (80044a8 <HAL_ADC_Start_DMA+0x234>)
 800441a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	221c      	movs	r2, #28
 8004422:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0210 	orr.w	r2, r2, #16
 8004432:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f042 0201 	orr.w	r2, r2, #1
 8004442:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3340      	adds	r3, #64	@ 0x40
 800444e:	4619      	mov	r1, r3
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f000 ffc4 	bl	80053e0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0204 	orr.w	r2, r2, #4
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e00d      	b.n	8004486 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004472:	e008      	b.n	8004486 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004480:	e001      	b.n	8004486 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004482:	2302      	movs	r3, #2
 8004484:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	50000100 	.word	0x50000100
 8004494:	50000300 	.word	0x50000300
 8004498:	50000700 	.word	0x50000700
 800449c:	50000400 	.word	0x50000400
 80044a0:	08004d65 	.word	0x08004d65
 80044a4:	08004ddf 	.word	0x08004ddf
 80044a8:	08004dfb 	.word	0x08004dfb

080044ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_ADCEx_Calibration_Start+0x1c>
 80044de:	2302      	movs	r3, #2
 80044e0:	e05f      	b.n	80045a2 <HAL_ADCEx_Calibration_Start+0xdc>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fd04 	bl	8004ef8 <ADC_Disable>
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80044f4:	7bfb      	ldrb	r3, [r7, #15]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d14e      	bne.n	8004598 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800450e:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d107      	bne.n	8004526 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004524:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004534:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8004536:	f7ff f9f1 	bl	800391c <HAL_GetTick>
 800453a:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800453c:	e01c      	b.n	8004578 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800453e:	f7ff f9ed 	bl	800391c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b0a      	cmp	r3, #10
 800454a:	d915      	bls.n	8004578 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004556:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800455a:	d10d      	bne.n	8004578 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f023 0312 	bic.w	r3, r3, #18
 8004564:	f043 0210 	orr.w	r2, r3, #16
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e014      	b.n	80045a2 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004586:	d0da      	beq.n	800453e <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458c:	f023 0303 	bic.w	r3, r3, #3
 8004590:	f043 0201 	orr.w	r2, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b09b      	sub	sp, #108	@ 0x6c
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_ADC_ConfigChannel+0x22>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e2c8      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x5b4>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f040 82ac 	bne.w	8004b3e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d81c      	bhi.n	8004628 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	461a      	mov	r2, r3
 8004602:	231f      	movs	r3, #31
 8004604:	4093      	lsls	r3, r2
 8004606:	43db      	mvns	r3, r3
 8004608:	4019      	ands	r1, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fa00 f203 	lsl.w	r2, r0, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	631a      	str	r2, [r3, #48]	@ 0x30
 8004626:	e063      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	2b09      	cmp	r3, #9
 800462e:	d81e      	bhi.n	800466e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	4413      	add	r3, r2
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	3b1e      	subs	r3, #30
 8004644:	221f      	movs	r2, #31
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	4019      	ands	r1, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	4413      	add	r3, r2
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	3b1e      	subs	r3, #30
 8004660:	fa00 f203 	lsl.w	r2, r0, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	430a      	orrs	r2, r1
 800466a:	635a      	str	r2, [r3, #52]	@ 0x34
 800466c:	e040      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b0e      	cmp	r3, #14
 8004674:	d81e      	bhi.n	80046b4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	3b3c      	subs	r3, #60	@ 0x3c
 800468a:	221f      	movs	r2, #31
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	4019      	ands	r1, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	3b3c      	subs	r3, #60	@ 0x3c
 80046a6:	fa00 f203 	lsl.w	r2, r0, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80046b2:	e01d      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	4413      	add	r3, r2
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	3b5a      	subs	r3, #90	@ 0x5a
 80046c8:	221f      	movs	r2, #31
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43db      	mvns	r3, r3
 80046d0:	4019      	ands	r1, r3
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	4413      	add	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	3b5a      	subs	r3, #90	@ 0x5a
 80046e4:	fa00 f203 	lsl.w	r2, r0, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	f040 80e5 	bne.w	80048ca <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b09      	cmp	r3, #9
 8004706:	d91c      	bls.n	8004742 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4613      	mov	r3, r2
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	4413      	add	r3, r2
 8004718:	3b1e      	subs	r3, #30
 800471a:	2207      	movs	r2, #7
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	4019      	ands	r1, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	6898      	ldr	r0, [r3, #8]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	4413      	add	r3, r2
 8004732:	3b1e      	subs	r3, #30
 8004734:	fa00 f203 	lsl.w	r2, r0, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	619a      	str	r2, [r3, #24]
 8004740:	e019      	b.n	8004776 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6959      	ldr	r1, [r3, #20]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4413      	add	r3, r2
 8004752:	2207      	movs	r2, #7
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	4019      	ands	r1, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	6898      	ldr	r0, [r3, #8]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	fa00 f203 	lsl.w	r2, r0, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	08db      	lsrs	r3, r3, #3
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	3b01      	subs	r3, #1
 8004794:	2b03      	cmp	r3, #3
 8004796:	d84f      	bhi.n	8004838 <HAL_ADC_ConfigChannel+0x28c>
 8004798:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <HAL_ADC_ConfigChannel+0x1f4>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047b1 	.word	0x080047b1
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	080047f5 	.word	0x080047f5
 80047ac:	08004817 	.word	0x08004817
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80047b6:	4b99      	ldr	r3, [pc, #612]	@ (8004a1c <HAL_ADC_ConfigChannel+0x470>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	0691      	lsls	r1, r2, #26
 80047c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047c2:	430a      	orrs	r2, r1
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047ce:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80047d0:	e07b      	b.n	80048ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80047d8:	4b90      	ldr	r3, [pc, #576]	@ (8004a1c <HAL_ADC_ConfigChannel+0x470>)
 80047da:	4013      	ands	r3, r2
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	6812      	ldr	r2, [r2, #0]
 80047e0:	0691      	lsls	r1, r2, #26
 80047e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80047e4:	430a      	orrs	r2, r1
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047f0:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80047f2:	e06a      	b.n	80048ca <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80047fa:	4b88      	ldr	r3, [pc, #544]	@ (8004a1c <HAL_ADC_ConfigChannel+0x470>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	0691      	lsls	r1, r2, #26
 8004804:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004806:	430a      	orrs	r2, r1
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004812:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004814:	e059      	b.n	80048ca <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800481c:	4b7f      	ldr	r3, [pc, #508]	@ (8004a1c <HAL_ADC_ConfigChannel+0x470>)
 800481e:	4013      	ands	r3, r2
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	0691      	lsls	r1, r2, #26
 8004826:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004828:	430a      	orrs	r2, r1
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004834:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004836:	e048      	b.n	80048ca <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	069b      	lsls	r3, r3, #26
 8004848:	429a      	cmp	r2, r3
 800484a:	d107      	bne.n	800485c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800485a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004862:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	429a      	cmp	r2, r3
 800486e:	d107      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800487e:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004886:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	069b      	lsls	r3, r3, #26
 8004890:	429a      	cmp	r2, r3
 8004892:	d107      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80048a2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	069b      	lsls	r3, r3, #26
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d107      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80048c6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80048c8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d108      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x33e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x33e>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_ADC_ConfigChannel+0x340>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f040 8131 	bne.w	8004b54 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d00f      	beq.n	800491a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43da      	mvns	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	400a      	ands	r2, r1
 8004914:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8004918:	e049      	b.n	80049ae <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2201      	movs	r2, #1
 8004928:	409a      	lsls	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b09      	cmp	r3, #9
 800493a:	d91c      	bls.n	8004976 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6999      	ldr	r1, [r3, #24]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	3b1b      	subs	r3, #27
 800494e:	2207      	movs	r2, #7
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	4019      	ands	r1, r3
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6898      	ldr	r0, [r3, #8]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	3b1b      	subs	r3, #27
 8004968:	fa00 f203 	lsl.w	r2, r0, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	619a      	str	r2, [r3, #24]
 8004974:	e01b      	b.n	80049ae <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6959      	ldr	r1, [r3, #20]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	4613      	mov	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	4413      	add	r3, r2
 8004988:	2207      	movs	r2, #7
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	4019      	ands	r1, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6898      	ldr	r0, [r3, #8]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	fa00 f203 	lsl.w	r2, r0, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b6:	d004      	beq.n	80049c2 <HAL_ADC_ConfigChannel+0x416>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <HAL_ADC_ConfigChannel+0x474>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d101      	bne.n	80049c6 <HAL_ADC_ConfigChannel+0x41a>
 80049c2:	4b18      	ldr	r3, [pc, #96]	@ (8004a24 <HAL_ADC_ConfigChannel+0x478>)
 80049c4:	e000      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x41c>
 80049c6:	4b18      	ldr	r3, [pc, #96]	@ (8004a28 <HAL_ADC_ConfigChannel+0x47c>)
 80049c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d105      	bne.n	80049de <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80049d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d015      	beq.n	8004a0a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80049e2:	2b11      	cmp	r3, #17
 80049e4:	d105      	bne.n	80049f2 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80049e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00b      	beq.n	8004a0a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80049f6:	2b12      	cmp	r3, #18
 80049f8:	f040 80ac 	bne.w	8004b54 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80049fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f040 80a5 	bne.w	8004b54 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a12:	d10b      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x480>
 8004a14:	4b02      	ldr	r3, [pc, #8]	@ (8004a20 <HAL_ADC_ConfigChannel+0x474>)
 8004a16:	60fb      	str	r3, [r7, #12]
 8004a18:	e023      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x4b6>
 8004a1a:	bf00      	nop
 8004a1c:	83fff000 	.word	0x83fff000
 8004a20:	50000100 	.word	0x50000100
 8004a24:	50000300 	.word	0x50000300
 8004a28:	50000700 	.word	0x50000700
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a4e      	ldr	r2, [pc, #312]	@ (8004b6c <HAL_ADC_ConfigChannel+0x5c0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d103      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x492>
 8004a36:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	e011      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x4b6>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a4b      	ldr	r2, [pc, #300]	@ (8004b70 <HAL_ADC_ConfigChannel+0x5c4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d102      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x4a2>
 8004a48:	4b4a      	ldr	r3, [pc, #296]	@ (8004b74 <HAL_ADC_ConfigChannel+0x5c8>)
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e009      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x4b6>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a48      	ldr	r2, [pc, #288]	@ (8004b74 <HAL_ADC_ConfigChannel+0x5c8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d102      	bne.n	8004a5e <HAL_ADC_ConfigChannel+0x4b2>
 8004a58:	4b45      	ldr	r3, [pc, #276]	@ (8004b70 <HAL_ADC_ConfigChannel+0x5c4>)
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e001      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x4b6>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d108      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x4d6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x4d6>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e000      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x4d8>
 8004a82:	2300      	movs	r3, #0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d150      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a88:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d010      	beq.n	8004ab0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x4fe>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d101      	bne.n	8004aaa <HAL_ADC_ConfigChannel+0x4fe>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e000      	b.n	8004aac <HAL_ADC_ConfigChannel+0x500>
 8004aaa:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d13c      	bne.n	8004b2a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d11d      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x548>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ac0:	d118      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004aca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004acc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ace:	4b2a      	ldr	r3, [pc, #168]	@ (8004b78 <HAL_ADC_ConfigChannel+0x5cc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b7c <HAL_ADC_ConfigChannel+0x5d0>)
 8004ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad8:	0c9a      	lsrs	r2, r3, #18
 8004ada:	4613      	mov	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004ae4:	e002      	b.n	8004aec <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f9      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004af2:	e02e      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b11      	cmp	r3, #17
 8004afa:	d10b      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x568>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b04:	d106      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8004b0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b10:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b12:	e01e      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b12      	cmp	r3, #18
 8004b1a:	d11a      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b26:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b28:	e013      	b.n	8004b52 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004b3c:	e00a      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b42:	f043 0220 	orr.w	r2, r3, #32
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8004b50:	e000      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004b52:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004b5c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	376c      	adds	r7, #108	@ 0x6c
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	50000100 	.word	0x50000100
 8004b70:	50000400 	.word	0x50000400
 8004b74:	50000500 	.word	0x50000500
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	431bde83 	.word	0x431bde83

08004b80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b099      	sub	sp, #100	@ 0x64
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b98:	d102      	bne.n	8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	e01a      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a6a      	ldr	r2, [pc, #424]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d103      	bne.n	8004bb2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004baa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	e011      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a67      	ldr	r2, [pc, #412]	@ (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d102      	bne.n	8004bc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004bbc:	4b66      	ldr	r3, [pc, #408]	@ (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	e009      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a64      	ldr	r2, [pc, #400]	@ (8004d58 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d102      	bne.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004bcc:	4b61      	ldr	r3, [pc, #388]	@ (8004d54 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	e001      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0b0      	b.n	8004d42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e0a9      	b.n	8004d42 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f040 808d 	bne.w	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f040 8086 	bne.w	8004d20 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c1c:	d004      	beq.n	8004c28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4b      	ldr	r2, [pc, #300]	@ (8004d50 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d101      	bne.n	8004c2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004c28:	4b4c      	ldr	r3, [pc, #304]	@ (8004d5c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004c2a:	e000      	b.n	8004c2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004c2c:	4b4c      	ldr	r3, [pc, #304]	@ (8004d60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d040      	beq.n	8004cba <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004c38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	6859      	ldr	r1, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c4a:	035b      	lsls	r3, r3, #13
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c52:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d108      	bne.n	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d15c      	bne.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d107      	bne.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004c96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d14b      	bne.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ca4:	f023 030f 	bic.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	6811      	ldr	r1, [r2, #0]
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	6892      	ldr	r2, [r2, #8]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cb6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004cb8:	e03c      	b.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004cba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004cc4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d108      	bne.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e000      	b.n	8004ce8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d123      	bne.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 0303 	and.w	r3, r3, #3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004d08:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d112      	bne.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004d0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004d16:	f023 030f 	bic.w	r3, r3, #15
 8004d1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d1c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d1e:	e009      	b.n	8004d34 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8004d32:	e000      	b.n	8004d36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d34:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8004d42:	4618      	mov	r0, r3
 8004d44:	3764      	adds	r7, #100	@ 0x64
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	50000100 	.word	0x50000100
 8004d54:	50000400 	.word	0x50000400
 8004d58:	50000500 	.word	0x50000500
 8004d5c:	50000300 	.word	0x50000300
 8004d60:	50000700 	.word	0x50000700

08004d64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d126      	bne.n	8004dcc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d115      	bne.n	8004dc4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d111      	bne.n	8004dc4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbc:	f043 0201 	orr.w	r2, r3, #1
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7fc fcff 	bl	80017c8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004dca:	e004      	b.n	8004dd6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	4798      	blx	r3
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7fe fde5 	bl	80039bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004df2:	bf00      	nop
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e18:	f043 0204 	orr.w	r2, r3, #4
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7fe fdd5 	bl	80039d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d108      	bne.n	8004e5c <ADC_Enable+0x2c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <ADC_Enable+0x2c>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <ADC_Enable+0x2e>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d143      	bne.n	8004eea <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	4b22      	ldr	r3, [pc, #136]	@ (8004ef4 <ADC_Enable+0xc4>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00d      	beq.n	8004e8c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e74:	f043 0210 	orr.w	r2, r3, #16
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e80:	f043 0201 	orr.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e02f      	b.n	8004eec <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004e9c:	f7fe fd3e 	bl	800391c <HAL_GetTick>
 8004ea0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ea2:	e01b      	b.n	8004edc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ea4:	f7fe fd3a 	bl	800391c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d914      	bls.n	8004edc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d00d      	beq.n	8004edc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec4:	f043 0210 	orr.w	r2, r3, #16
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e007      	b.n	8004eec <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d1dc      	bne.n	8004ea4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	8000003f 	.word	0x8000003f

08004ef8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d108      	bne.n	8004f24 <ADC_Disable+0x2c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0301 	and.w	r3, r3, #1
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d101      	bne.n	8004f24 <ADC_Disable+0x2c>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <ADC_Disable+0x2e>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d047      	beq.n	8004fba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 030d 	and.w	r3, r3, #13
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d10f      	bne.n	8004f58 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689a      	ldr	r2, [r3, #8]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0202 	orr.w	r2, r2, #2
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004f50:	f7fe fce4 	bl	800391c <HAL_GetTick>
 8004f54:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004f56:	e029      	b.n	8004fac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	f043 0210 	orr.w	r2, r3, #16
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f68:	f043 0201 	orr.w	r2, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e023      	b.n	8004fbc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f74:	f7fe fcd2 	bl	800391c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d914      	bls.n	8004fac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10d      	bne.n	8004fac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	f043 0210 	orr.w	r2, r3, #16
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa0:	f043 0201 	orr.w	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e007      	b.n	8004fbc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d0dc      	beq.n	8004f74 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 809b 	beq.w	8005120 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ff8:	d12a      	bne.n	8005050 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d126      	bne.n	8005050 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8005006:	2b01      	cmp	r3, #1
 8005008:	d122      	bne.n	8005050 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800500a:	230c      	movs	r3, #12
 800500c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800500e:	e014      	b.n	800503a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4a46      	ldr	r2, [pc, #280]	@ (800512c <ADC_ConversionStop+0x168>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d90d      	bls.n	8005034 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	f043 0210 	orr.w	r2, r3, #16
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	f043 0201 	orr.w	r2, r3, #1
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44
          
          return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e076      	b.n	8005122 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	3301      	adds	r3, #1
 8005038:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005044:	2b40      	cmp	r3, #64	@ 0x40
 8005046:	d1e3      	bne.n	8005010 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2240      	movs	r2, #64	@ 0x40
 800504e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	2b60      	cmp	r3, #96	@ 0x60
 8005054:	d015      	beq.n	8005082 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b04      	cmp	r3, #4
 8005062:	d10e      	bne.n	8005082 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800506e:	2b00      	cmp	r3, #0
 8005070:	d107      	bne.n	8005082 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0210 	orr.w	r2, r2, #16
 8005080:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b0c      	cmp	r3, #12
 8005086:	d015      	beq.n	80050b4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b08      	cmp	r3, #8
 8005094:	d10e      	bne.n	80050b4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d107      	bne.n	80050b4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0220 	orr.w	r2, r2, #32
 80050b2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b60      	cmp	r3, #96	@ 0x60
 80050b8:	d005      	beq.n	80050c6 <ADC_ConversionStop+0x102>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b6c      	cmp	r3, #108	@ 0x6c
 80050be:	d105      	bne.n	80050cc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80050c0:	230c      	movs	r3, #12
 80050c2:	617b      	str	r3, [r7, #20]
        break;
 80050c4:	e005      	b.n	80050d2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80050c6:	2308      	movs	r3, #8
 80050c8:	617b      	str	r3, [r7, #20]
        break;
 80050ca:	e002      	b.n	80050d2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80050cc:	2304      	movs	r3, #4
 80050ce:	617b      	str	r3, [r7, #20]
        break;
 80050d0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80050d2:	f7fe fc23 	bl	800391c <HAL_GetTick>
 80050d6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80050d8:	e01b      	b.n	8005112 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80050da:	f7fe fc1f 	bl	800391c <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b0b      	cmp	r3, #11
 80050e6:	d914      	bls.n	8005112 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689a      	ldr	r2, [r3, #8]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4013      	ands	r3, r2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00d      	beq.n	8005112 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fa:	f043 0210 	orr.w	r2, r3, #16
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	645a      	str	r2, [r3, #68]	@ 0x44
        
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e007      	b.n	8005122 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	4013      	ands	r3, r2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1dc      	bne.n	80050da <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	000993ff 	.word	0x000993ff

08005130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005140:	4b0c      	ldr	r3, [pc, #48]	@ (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800514c:	4013      	ands	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005158:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800515c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005162:	4a04      	ldr	r2, [pc, #16]	@ (8005174 <__NVIC_SetPriorityGrouping+0x44>)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	60d3      	str	r3, [r2, #12]
}
 8005168:	bf00      	nop
 800516a:	3714      	adds	r7, #20
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	e000ed00 	.word	0xe000ed00

08005178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800517c:	4b04      	ldr	r3, [pc, #16]	@ (8005190 <__NVIC_GetPriorityGrouping+0x18>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 0307 	and.w	r3, r3, #7
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	e000ed00 	.word	0xe000ed00

08005194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	4603      	mov	r3, r0
 800519c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800519e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db0b      	blt.n	80051be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a6:	79fb      	ldrb	r3, [r7, #7]
 80051a8:	f003 021f 	and.w	r2, r3, #31
 80051ac:	4907      	ldr	r1, [pc, #28]	@ (80051cc <__NVIC_EnableIRQ+0x38>)
 80051ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2001      	movs	r0, #1
 80051b6:	fa00 f202 	lsl.w	r2, r0, r2
 80051ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000e100 	.word	0xe000e100

080051d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	6039      	str	r1, [r7, #0]
 80051da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	db0a      	blt.n	80051fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	490c      	ldr	r1, [pc, #48]	@ (800521c <__NVIC_SetPriority+0x4c>)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	440b      	add	r3, r1
 80051f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f8:	e00a      	b.n	8005210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	4908      	ldr	r1, [pc, #32]	@ (8005220 <__NVIC_SetPriority+0x50>)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	3b04      	subs	r3, #4
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	440b      	add	r3, r1
 800520e:	761a      	strb	r2, [r3, #24]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000e100 	.word	0xe000e100
 8005220:	e000ed00 	.word	0xe000ed00

08005224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	@ 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f1c3 0307 	rsb	r3, r3, #7
 800523e:	2b04      	cmp	r3, #4
 8005240:	bf28      	it	cs
 8005242:	2304      	movcs	r3, #4
 8005244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3304      	adds	r3, #4
 800524a:	2b06      	cmp	r3, #6
 800524c:	d902      	bls.n	8005254 <NVIC_EncodePriority+0x30>
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3b03      	subs	r3, #3
 8005252:	e000      	b.n	8005256 <NVIC_EncodePriority+0x32>
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005258:	f04f 32ff 	mov.w	r2, #4294967295
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43da      	mvns	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	401a      	ands	r2, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800526c:	f04f 31ff 	mov.w	r1, #4294967295
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	43d9      	mvns	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800527c:	4313      	orrs	r3, r2
         );
}
 800527e:	4618      	mov	r0, r3
 8005280:	3724      	adds	r7, #36	@ 0x24
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
	...

0800528c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3b01      	subs	r3, #1
 8005298:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800529c:	d301      	bcc.n	80052a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800529e:	2301      	movs	r3, #1
 80052a0:	e00f      	b.n	80052c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052a2:	4a0a      	ldr	r2, [pc, #40]	@ (80052cc <SysTick_Config+0x40>)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052aa:	210f      	movs	r1, #15
 80052ac:	f04f 30ff 	mov.w	r0, #4294967295
 80052b0:	f7ff ff8e 	bl	80051d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b4:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <SysTick_Config+0x40>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ba:	4b04      	ldr	r3, [pc, #16]	@ (80052cc <SysTick_Config+0x40>)
 80052bc:	2207      	movs	r2, #7
 80052be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	e000e010 	.word	0xe000e010

080052d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7ff ff29 	bl	8005130 <__NVIC_SetPriorityGrouping>
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b086      	sub	sp, #24
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	4603      	mov	r3, r0
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052f8:	f7ff ff3e 	bl	8005178 <__NVIC_GetPriorityGrouping>
 80052fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	6978      	ldr	r0, [r7, #20]
 8005304:	f7ff ff8e 	bl	8005224 <NVIC_EncodePriority>
 8005308:	4602      	mov	r2, r0
 800530a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800530e:	4611      	mov	r1, r2
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff ff5d 	bl	80051d0 <__NVIC_SetPriority>
}
 8005316:	bf00      	nop
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	4603      	mov	r3, r0
 8005326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff ff31 	bl	8005194 <__NVIC_EnableIRQ>
}
 8005332:	bf00      	nop
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ffa2 	bl	800528c <SysTick_Config>
 8005348:	4603      	mov	r3, r0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e037      	b.n	80053d8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800537e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005382:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800538c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005398:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f9bc 	bl	8005738 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_DMA_Start_IT+0x20>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e04a      	b.n	8005496 <HAL_DMA_Start_IT+0xb6>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800540e:	2b01      	cmp	r3, #1
 8005410:	d13a      	bne.n	8005488 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	68b9      	ldr	r1, [r7, #8]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 f950 	bl	80056dc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005440:	2b00      	cmp	r3, #0
 8005442:	d008      	beq.n	8005456 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 020e 	orr.w	r2, r2, #14
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e00f      	b.n	8005476 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 020a 	orr.w	r2, r2, #10
 8005464:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0204 	bic.w	r2, r2, #4
 8005474:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0201 	orr.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e005      	b.n	8005494 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005490:	2302      	movs	r3, #2
 8005492:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005494:	7dfb      	ldrb	r3, [r7, #23]
}
 8005496:	4618      	mov	r0, r3
 8005498:	3718      	adds	r7, #24
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e02e      	b.n	800550e <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d008      	beq.n	80054cc <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2204      	movs	r2, #4
 80054be:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e020      	b.n	800550e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 020e 	bic.w	r2, r2, #14
 80054da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0201 	bic.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	2101      	movs	r1, #1
 80054f6:	fa01 f202 	lsl.w	r2, r1, r2
 80054fa:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800552c:	2b02      	cmp	r3, #2
 800552e:	d005      	beq.n	800553c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2204      	movs	r2, #4
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	73fb      	strb	r3, [r7, #15]
 800553a:	e027      	b.n	800558c <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 020e 	bic.w	r2, r2, #14
 800554a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f202 	lsl.w	r2, r1, r2
 800556a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
    }
  }
  return status;
 800558c:	7bfb      	ldrb	r3, [r7, #15]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	2204      	movs	r2, #4
 80055b4:	409a      	lsls	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d024      	beq.n	8005608 <HAL_DMA_IRQHandler+0x72>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01f      	beq.n	8005608 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d107      	bne.n	80055e6 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 0204 	bic.w	r2, r2, #4
 80055e4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ee:	2104      	movs	r1, #4
 80055f0:	fa01 f202 	lsl.w	r2, r1, r2
 80055f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d06a      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005606:	e065      	b.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	2202      	movs	r2, #2
 800560e:	409a      	lsls	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4013      	ands	r3, r2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_IRQHandler+0xdc>
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d027      	beq.n	8005672 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f022 020a 	bic.w	r2, r2, #10
 800563e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	2102      	movs	r1, #2
 8005652:	fa01 f202 	lsl.w	r2, r1, r2
 8005656:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	2b00      	cmp	r3, #0
 8005666:	d035      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005670:	e030      	b.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	2208      	movs	r2, #8
 8005678:	409a      	lsls	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4013      	ands	r3, r2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d028      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d023      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 020e 	bic.w	r2, r2, #14
 800569a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	2101      	movs	r1, #1
 80056a6:	fa01 f202 	lsl.w	r2, r1, r2
 80056aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
    }
  }
}
 80056d2:	e7ff      	b.n	80056d4 <HAL_DMA_IRQHandler+0x13e>
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f2:	2101      	movs	r1, #1
 80056f4:	fa01 f202 	lsl.w	r2, r1, r2
 80056f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b10      	cmp	r3, #16
 8005708:	d108      	bne.n	800571c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800571a:	e007      	b.n	800572c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]
}
 800572c:	bf00      	nop
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	4b14      	ldr	r3, [pc, #80]	@ (8005798 <DMA_CalcBaseAndBitshift+0x60>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d80f      	bhi.n	800576c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	4b12      	ldr	r3, [pc, #72]	@ (800579c <DMA_CalcBaseAndBitshift+0x64>)
 8005754:	4413      	add	r3, r2
 8005756:	4a12      	ldr	r2, [pc, #72]	@ (80057a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	009a      	lsls	r2, r3, #2
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0f      	ldr	r2, [pc, #60]	@ (80057a4 <DMA_CalcBaseAndBitshift+0x6c>)
 8005768:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800576a:	e00e      	b.n	800578a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	4b0d      	ldr	r3, [pc, #52]	@ (80057a8 <DMA_CalcBaseAndBitshift+0x70>)
 8005774:	4413      	add	r3, r2
 8005776:	4a0a      	ldr	r2, [pc, #40]	@ (80057a0 <DMA_CalcBaseAndBitshift+0x68>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	091b      	lsrs	r3, r3, #4
 800577e:	009a      	lsls	r2, r3, #2
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a09      	ldr	r2, [pc, #36]	@ (80057ac <DMA_CalcBaseAndBitshift+0x74>)
 8005788:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40020407 	.word	0x40020407
 800579c:	bffdfff8 	.word	0xbffdfff8
 80057a0:	cccccccd 	.word	0xcccccccd
 80057a4:	40020000 	.word	0x40020000
 80057a8:	bffdfbf8 	.word	0xbffdfbf8
 80057ac:	40020400 	.word	0x40020400

080057b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057be:	e160      	b.n	8005a82 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	2101      	movs	r1, #1
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	fa01 f303 	lsl.w	r3, r1, r3
 80057cc:	4013      	ands	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 8152 	beq.w	8005a7c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d005      	beq.n	80057f0 <HAL_GPIO_Init+0x40>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 0303 	and.w	r3, r3, #3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d130      	bne.n	8005852 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	005b      	lsls	r3, r3, #1
 80057fa:	2203      	movs	r2, #3
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4013      	ands	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005826:	2201      	movs	r2, #1
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43db      	mvns	r3, r3
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4013      	ands	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	091b      	lsrs	r3, r3, #4
 800583c:	f003 0201 	and.w	r2, r3, #1
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	2b03      	cmp	r3, #3
 800585c:	d017      	beq.n	800588e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	2203      	movs	r2, #3
 800586a:	fa02 f303 	lsl.w	r3, r2, r3
 800586e:	43db      	mvns	r3, r3
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	4013      	ands	r3, r2
 8005874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d123      	bne.n	80058e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	08da      	lsrs	r2, r3, #3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3208      	adds	r2, #8
 80058a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	220f      	movs	r2, #15
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43db      	mvns	r3, r3
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4013      	ands	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	691a      	ldr	r2, [r3, #16]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	08da      	lsrs	r2, r3, #3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3208      	adds	r2, #8
 80058dc:	6939      	ldr	r1, [r7, #16]
 80058de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	2203      	movs	r2, #3
 80058ee:	fa02 f303 	lsl.w	r3, r2, r3
 80058f2:	43db      	mvns	r3, r3
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4013      	ands	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0203 	and.w	r2, r3, #3
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80ac 	beq.w	8005a7c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005924:	4b5e      	ldr	r3, [pc, #376]	@ (8005aa0 <HAL_GPIO_Init+0x2f0>)
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	4a5d      	ldr	r2, [pc, #372]	@ (8005aa0 <HAL_GPIO_Init+0x2f0>)
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	6193      	str	r3, [r2, #24]
 8005930:	4b5b      	ldr	r3, [pc, #364]	@ (8005aa0 <HAL_GPIO_Init+0x2f0>)
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	60bb      	str	r3, [r7, #8]
 800593a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800593c:	4a59      	ldr	r2, [pc, #356]	@ (8005aa4 <HAL_GPIO_Init+0x2f4>)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	089b      	lsrs	r3, r3, #2
 8005942:	3302      	adds	r3, #2
 8005944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005948:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	220f      	movs	r2, #15
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005966:	d025      	beq.n	80059b4 <HAL_GPIO_Init+0x204>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a4f      	ldr	r2, [pc, #316]	@ (8005aa8 <HAL_GPIO_Init+0x2f8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d01f      	beq.n	80059b0 <HAL_GPIO_Init+0x200>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a4e      	ldr	r2, [pc, #312]	@ (8005aac <HAL_GPIO_Init+0x2fc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d019      	beq.n	80059ac <HAL_GPIO_Init+0x1fc>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a4d      	ldr	r2, [pc, #308]	@ (8005ab0 <HAL_GPIO_Init+0x300>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d013      	beq.n	80059a8 <HAL_GPIO_Init+0x1f8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a4c      	ldr	r2, [pc, #304]	@ (8005ab4 <HAL_GPIO_Init+0x304>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00d      	beq.n	80059a4 <HAL_GPIO_Init+0x1f4>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a4b      	ldr	r2, [pc, #300]	@ (8005ab8 <HAL_GPIO_Init+0x308>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <HAL_GPIO_Init+0x1f0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a4a      	ldr	r2, [pc, #296]	@ (8005abc <HAL_GPIO_Init+0x30c>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d101      	bne.n	800599c <HAL_GPIO_Init+0x1ec>
 8005998:	2306      	movs	r3, #6
 800599a:	e00c      	b.n	80059b6 <HAL_GPIO_Init+0x206>
 800599c:	2307      	movs	r3, #7
 800599e:	e00a      	b.n	80059b6 <HAL_GPIO_Init+0x206>
 80059a0:	2305      	movs	r3, #5
 80059a2:	e008      	b.n	80059b6 <HAL_GPIO_Init+0x206>
 80059a4:	2304      	movs	r3, #4
 80059a6:	e006      	b.n	80059b6 <HAL_GPIO_Init+0x206>
 80059a8:	2303      	movs	r3, #3
 80059aa:	e004      	b.n	80059b6 <HAL_GPIO_Init+0x206>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e002      	b.n	80059b6 <HAL_GPIO_Init+0x206>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <HAL_GPIO_Init+0x206>
 80059b4:	2300      	movs	r3, #0
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	f002 0203 	and.w	r2, r2, #3
 80059bc:	0092      	lsls	r2, r2, #2
 80059be:	4093      	lsls	r3, r2
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80059c6:	4937      	ldr	r1, [pc, #220]	@ (8005aa4 <HAL_GPIO_Init+0x2f4>)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	089b      	lsrs	r3, r3, #2
 80059cc:	3302      	adds	r3, #2
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059d4:	4b3a      	ldr	r3, [pc, #232]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	43db      	mvns	r3, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4013      	ands	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80059f8:	4a31      	ldr	r2, [pc, #196]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059fe:	4b30      	ldr	r3, [pc, #192]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	43db      	mvns	r3, r3
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005a22:	4a27      	ldr	r2, [pc, #156]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a28:	4b25      	ldr	r3, [pc, #148]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	43db      	mvns	r3, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a52:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	43db      	mvns	r3, r3
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4013      	ands	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005a76:	4a12      	ldr	r2, [pc, #72]	@ (8005ac0 <HAL_GPIO_Init+0x310>)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f47f ae97 	bne.w	80057c0 <HAL_GPIO_Init+0x10>
  }
}
 8005a92:	bf00      	nop
 8005a94:	bf00      	nop
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	48000400 	.word	0x48000400
 8005aac:	48000800 	.word	0x48000800
 8005ab0:	48000c00 	.word	0x48000c00
 8005ab4:	48001000 	.word	0x48001000
 8005ab8:	48001400 	.word	0x48001400
 8005abc:	48001800 	.word	0x48001800
 8005ac0:	40010400 	.word	0x40010400

08005ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d002      	beq.n	8005ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005adc:	2301      	movs	r3, #1
 8005ade:	73fb      	strb	r3, [r7, #15]
 8005ae0:	e001      	b.n	8005ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
 8005b00:	4613      	mov	r3, r2
 8005b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b04:	787b      	ldrb	r3, [r7, #1]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005b10:	e002      	b.n	8005b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005b12:	887a      	ldrh	r2, [r7, #2]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d006      	beq.n	8005b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b3a:	4a05      	ldr	r2, [pc, #20]	@ (8005b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f00a ffbc 	bl	8010ac0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40010400 	.word	0x40010400

08005b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e08d      	b.n	8005c82 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fd fb24 	bl	80031c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	@ 0x24
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685a      	ldr	r2, [r3, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ba4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005bb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d107      	bne.n	8005bce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005bca:	609a      	str	r2, [r3, #8]
 8005bcc:	e006      	b.n	8005bdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005bda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d108      	bne.n	8005bf6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bf2:	605a      	str	r2, [r3, #4]
 8005bf4:	e007      	b.n	8005c06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005c14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69d9      	ldr	r1, [r3, #28]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1a      	ldr	r2, [r3, #32]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f042 0201 	orr.w	r2, r2, #1
 8005c62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af02      	add	r7, sp, #8
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	461a      	mov	r2, r3
 8005c98:	460b      	mov	r3, r1
 8005c9a:	817b      	strh	r3, [r7, #10]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b20      	cmp	r3, #32
 8005caa:	f040 80fd 	bne.w	8005ea8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d101      	bne.n	8005cbc <HAL_I2C_Master_Transmit+0x30>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	e0f6      	b.n	8005eaa <HAL_I2C_Master_Transmit+0x21e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cc4:	f7fd fe2a 	bl	800391c <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2319      	movs	r3, #25
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fb72 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0e1      	b.n	8005eaa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2221      	movs	r2, #33	@ 0x21
 8005cea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	893a      	ldrh	r2, [r7, #8]
 8005d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2bff      	cmp	r3, #255	@ 0xff
 8005d16:	d906      	bls.n	8005d26 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	22ff      	movs	r2, #255	@ 0xff
 8005d1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005d1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e007      	b.n	8005d36 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005d30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d34:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d024      	beq.n	8005d88 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d66:	3b01      	subs	r3, #1
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	3301      	adds	r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	8979      	ldrh	r1, [r7, #10]
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8005eb4 <HAL_I2C_Master_Transmit+0x228>)
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fd6d 	bl	8006860 <I2C_TransferConfig>
 8005d86:	e066      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	8979      	ldrh	r1, [r7, #10]
 8005d90:	4b48      	ldr	r3, [pc, #288]	@ (8005eb4 <HAL_I2C_Master_Transmit+0x228>)
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fd62 	bl	8006860 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005d9c:	e05b      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	6a39      	ldr	r1, [r7, #32]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 fb65 	bl	8006472 <I2C_WaitOnTXISFlagUntilTimeout>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e07b      	b.n	8005eaa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d034      	beq.n	8005e56 <HAL_I2C_Master_Transmit+0x1ca>
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d130      	bne.n	8005e56 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2180      	movs	r1, #128	@ 0x80
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fade 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e04d      	b.n	8005eaa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2bff      	cmp	r3, #255	@ 0xff
 8005e16:	d90e      	bls.n	8005e36 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	22ff      	movs	r2, #255	@ 0xff
 8005e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	8979      	ldrh	r1, [r7, #10]
 8005e26:	2300      	movs	r3, #0
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fd16 	bl	8006860 <I2C_TransferConfig>
 8005e34:	e00f      	b.n	8005e56 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	8979      	ldrh	r1, [r7, #10]
 8005e48:	2300      	movs	r3, #0
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fd05 	bl	8006860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d19e      	bne.n	8005d9e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	6a39      	ldr	r1, [r7, #32]
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fb4b 	bl	8006500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e01a      	b.n	8005eaa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb8 <HAL_I2C_Master_Transmit+0x22c>)
 8005e88:	400b      	ands	r3, r1
 8005e8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2220      	movs	r2, #32
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e000      	b.n	8005eaa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005ea8:	2302      	movs	r3, #2
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	80002000 	.word	0x80002000
 8005eb8:	fe00e800 	.word	0xfe00e800

08005ebc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	460b      	mov	r3, r1
 8005eca:	817b      	strh	r3, [r7, #10]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	f040 80db 	bne.w	8006094 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_I2C_Master_Receive+0x30>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e0d4      	b.n	8006096 <HAL_I2C_Master_Receive+0x1da>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ef4:	f7fd fd12 	bl	800391c <HAL_GetTick>
 8005ef8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	2319      	movs	r3, #25
 8005f00:	2201      	movs	r2, #1
 8005f02:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 fa5a 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0bf      	b.n	8006096 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2222      	movs	r2, #34	@ 0x22
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2210      	movs	r2, #16
 8005f22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	893a      	ldrh	r2, [r7, #8]
 8005f36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2bff      	cmp	r3, #255	@ 0xff
 8005f46:	d90e      	bls.n	8005f66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	8979      	ldrh	r1, [r7, #10]
 8005f56:	4b52      	ldr	r3, [pc, #328]	@ (80060a0 <HAL_I2C_Master_Receive+0x1e4>)
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fc7e 	bl	8006860 <I2C_TransferConfig>
 8005f64:	e06d      	b.n	8006042 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	8979      	ldrh	r1, [r7, #10]
 8005f78:	4b49      	ldr	r3, [pc, #292]	@ (80060a0 <HAL_I2C_Master_Receive+0x1e4>)
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 fc6d 	bl	8006860 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005f86:	e05c      	b.n	8006042 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	6a39      	ldr	r1, [r7, #32]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 fafb 	bl	8006588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e07c      	b.n	8006096 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	b2d2      	uxtb	r2, r2
 8005fa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d034      	beq.n	8006042 <HAL_I2C_Master_Receive+0x186>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d130      	bne.n	8006042 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2180      	movs	r1, #128	@ 0x80
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f9e8 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e04d      	b.n	8006096 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2bff      	cmp	r3, #255	@ 0xff
 8006002:	d90e      	bls.n	8006022 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	22ff      	movs	r2, #255	@ 0xff
 8006008:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800600e:	b2da      	uxtb	r2, r3
 8006010:	8979      	ldrh	r1, [r7, #10]
 8006012:	2300      	movs	r3, #0
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fc20 	bl	8006860 <I2C_TransferConfig>
 8006020:	e00f      	b.n	8006042 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006030:	b2da      	uxtb	r2, r3
 8006032:	8979      	ldrh	r1, [r7, #10]
 8006034:	2300      	movs	r3, #0
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fc0f 	bl	8006860 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d19d      	bne.n	8005f88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	6a39      	ldr	r1, [r7, #32]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 fa55 	bl	8006500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e01a      	b.n	8006096 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2220      	movs	r2, #32
 8006066:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	4b0c      	ldr	r3, [pc, #48]	@ (80060a4 <HAL_I2C_Master_Receive+0x1e8>)
 8006074:	400b      	ands	r3, r1
 8006076:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	e000      	b.n	8006096 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006094:	2302      	movs	r3, #2
  }
}
 8006096:	4618      	mov	r0, r3
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	80002400 	.word	0x80002400
 80060a4:	fe00e800 	.word	0xfe00e800

080060a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	461a      	mov	r2, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	817b      	strh	r3, [r7, #10]
 80060ba:	460b      	mov	r3, r1
 80060bc:	813b      	strh	r3, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	f040 80f9 	bne.w	80062c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d002      	beq.n	80060dc <HAL_I2C_Mem_Write+0x34>
 80060d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d105      	bne.n	80060e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0ed      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_I2C_Mem_Write+0x4e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e0e6      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80060fe:	f7fd fc0d 	bl	800391c <HAL_GetTick>
 8006102:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	9300      	str	r3, [sp, #0]
 8006108:	2319      	movs	r3, #25
 800610a:	2201      	movs	r2, #1
 800610c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f955 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e0d1      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2221      	movs	r2, #33	@ 0x21
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2240      	movs	r2, #64	@ 0x40
 800612c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a3a      	ldr	r2, [r7, #32]
 800613a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006140:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006148:	88f8      	ldrh	r0, [r7, #6]
 800614a:	893a      	ldrh	r2, [r7, #8]
 800614c:	8979      	ldrh	r1, [r7, #10]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	4603      	mov	r3, r0
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f8b9 	bl	80062d0 <I2C_RequestMemoryWrite>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0a9      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2bff      	cmp	r3, #255	@ 0xff
 8006178:	d90e      	bls.n	8006198 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	22ff      	movs	r2, #255	@ 0xff
 800617e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006184:	b2da      	uxtb	r2, r3
 8006186:	8979      	ldrh	r1, [r7, #10]
 8006188:	2300      	movs	r3, #0
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f000 fb65 	bl	8006860 <I2C_TransferConfig>
 8006196:	e00f      	b.n	80061b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	8979      	ldrh	r1, [r7, #10]
 80061aa:	2300      	movs	r3, #0
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fb54 	bl	8006860 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f958 	bl	8006472 <I2C_WaitOnTXISFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e07b      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29a      	uxth	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d034      	beq.n	8006270 <HAL_I2C_Mem_Write+0x1c8>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800620a:	2b00      	cmp	r3, #0
 800620c:	d130      	bne.n	8006270 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006214:	2200      	movs	r2, #0
 8006216:	2180      	movs	r1, #128	@ 0x80
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f8d1 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e04d      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800622c:	b29b      	uxth	r3, r3
 800622e:	2bff      	cmp	r3, #255	@ 0xff
 8006230:	d90e      	bls.n	8006250 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	22ff      	movs	r2, #255	@ 0xff
 8006236:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623c:	b2da      	uxtb	r2, r3
 800623e:	8979      	ldrh	r1, [r7, #10]
 8006240:	2300      	movs	r3, #0
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fb09 	bl	8006860 <I2C_TransferConfig>
 800624e:	e00f      	b.n	8006270 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006254:	b29a      	uxth	r2, r3
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800625e:	b2da      	uxtb	r2, r3
 8006260:	8979      	ldrh	r1, [r7, #10]
 8006262:	2300      	movs	r3, #0
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 faf8 	bl	8006860 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006274:	b29b      	uxth	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d19e      	bne.n	80061b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f93e 	bl	8006500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e01a      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2220      	movs	r2, #32
 8006294:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6859      	ldr	r1, [r3, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	4b0a      	ldr	r3, [pc, #40]	@ (80062cc <HAL_I2C_Mem_Write+0x224>)
 80062a2:	400b      	ands	r3, r1
 80062a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	e000      	b.n	80062c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062c2:	2302      	movs	r3, #2
  }
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	fe00e800 	.word	0xfe00e800

080062d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af02      	add	r7, sp, #8
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	4608      	mov	r0, r1
 80062da:	4611      	mov	r1, r2
 80062dc:	461a      	mov	r2, r3
 80062de:	4603      	mov	r3, r0
 80062e0:	817b      	strh	r3, [r7, #10]
 80062e2:	460b      	mov	r3, r1
 80062e4:	813b      	strh	r3, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062ea:	88fb      	ldrh	r3, [r7, #6]
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	8979      	ldrh	r1, [r7, #10]
 80062f0:	4b20      	ldr	r3, [pc, #128]	@ (8006374 <I2C_RequestMemoryWrite+0xa4>)
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 fab1 	bl	8006860 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fe:	69fa      	ldr	r2, [r7, #28]
 8006300:	69b9      	ldr	r1, [r7, #24]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f8b5 	bl	8006472 <I2C_WaitOnTXISFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e02c      	b.n	800636c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d105      	bne.n	8006324 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006318:	893b      	ldrh	r3, [r7, #8]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	629a      	str	r2, [r3, #40]	@ 0x28
 8006322:	e015      	b.n	8006350 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006324:	893b      	ldrh	r3, [r7, #8]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b29b      	uxth	r3, r3
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	69b9      	ldr	r1, [r7, #24]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f89b 	bl	8006472 <I2C_WaitOnTXISFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e012      	b.n	800636c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006346:	893b      	ldrh	r3, [r7, #8]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2200      	movs	r2, #0
 8006358:	2180      	movs	r1, #128	@ 0x80
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f830 	bl	80063c0 <I2C_WaitOnFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800636a:	2300      	movs	r3, #0
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	80002000 	.word	0x80002000

08006378 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b02      	cmp	r3, #2
 800638c:	d103      	bne.n	8006396 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2200      	movs	r2, #0
 8006394:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d007      	beq.n	80063b4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699a      	ldr	r2, [r3, #24]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	619a      	str	r2, [r3, #24]
  }
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	603b      	str	r3, [r7, #0]
 80063cc:	4613      	mov	r3, r2
 80063ce:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d0:	e03b      	b.n	800644a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 f962 	bl	80066a0 <I2C_IsErrorOccurred>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d001      	beq.n	80063e6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e041      	b.n	800646a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d02d      	beq.n	800644a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ee:	f7fd fa95 	bl	800391c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d302      	bcc.n	8006404 <I2C_WaitOnFlagUntilTimeout+0x44>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d122      	bne.n	800644a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4013      	ands	r3, r2
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	429a      	cmp	r2, r3
 8006412:	bf0c      	ite	eq
 8006414:	2301      	moveq	r3, #1
 8006416:	2300      	movne	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	429a      	cmp	r2, r3
 8006420:	d113      	bne.n	800644a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e00f      	b.n	800646a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	4013      	ands	r3, r2
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	bf0c      	ite	eq
 800645a:	2301      	moveq	r3, #1
 800645c:	2300      	movne	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	461a      	mov	r2, r3
 8006462:	79fb      	ldrb	r3, [r7, #7]
 8006464:	429a      	cmp	r2, r3
 8006466:	d0b4      	beq.n	80063d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800647e:	e033      	b.n	80064e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f90b 	bl	80066a0 <I2C_IsErrorOccurred>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e031      	b.n	80064f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649a:	d025      	beq.n	80064e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649c:	f7fd fa3e 	bl	800391c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d302      	bcc.n	80064b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d11a      	bne.n	80064e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d013      	beq.n	80064e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c4:	f043 0220 	orr.w	r2, r3, #32
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e007      	b.n	80064f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d1c4      	bne.n	8006480 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800650c:	e02f      	b.n	800656e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f8c4 	bl	80066a0 <I2C_IsErrorOccurred>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e02d      	b.n	800657e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006522:	f7fd f9fb 	bl	800391c <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	429a      	cmp	r2, r3
 8006530:	d302      	bcc.n	8006538 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11a      	bne.n	800656e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b20      	cmp	r3, #32
 8006544:	d013      	beq.n	800656e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2220      	movs	r2, #32
 8006556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e007      	b.n	800657e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b20      	cmp	r3, #32
 800657a:	d1c8      	bne.n	800650e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006598:	e071      	b.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 f87e 	bl	80066a0 <I2C_IsErrorOccurred>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d13b      	bne.n	8006634 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d138      	bne.n	8006634 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	699b      	ldr	r3, [r3, #24]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d105      	bne.n	80065dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d121      	bne.n	800662e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2210      	movs	r2, #16
 80065f0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2204      	movs	r2, #4
 80065f6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2220      	movs	r2, #32
 80065fe:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b24      	ldr	r3, [pc, #144]	@ (800669c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800660c:	400b      	ands	r3, r1
 800660e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]
 800662c:	e002      	b.n	8006634 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006634:	f7fd f972 	bl	800391c <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	68ba      	ldr	r2, [r7, #8]
 8006640:	429a      	cmp	r2, r3
 8006642:	d302      	bcc.n	800664a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d119      	bne.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800664a:	7dfb      	ldrb	r3, [r7, #23]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d116      	bne.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	f003 0304 	and.w	r3, r3, #4
 800665a:	2b04      	cmp	r3, #4
 800665c:	d00f      	beq.n	800667e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006662:	f043 0220 	orr.w	r2, r3, #32
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2220      	movs	r2, #32
 800666e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0304 	and.w	r3, r3, #4
 8006688:	2b04      	cmp	r3, #4
 800668a:	d002      	beq.n	8006692 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d083      	beq.n	800659a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8006692:	7dfb      	ldrb	r3, [r7, #23]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	fe00e800 	.word	0xfe00e800

080066a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08a      	sub	sp, #40	@ 0x28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d068      	beq.n	800679e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2210      	movs	r2, #16
 80066d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066d4:	e049      	b.n	800676a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d045      	beq.n	800676a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fd f91d 	bl	800391c <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <I2C_IsErrorOccurred+0x54>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d13a      	bne.n	800676a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006706:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006716:	d121      	bne.n	800675c <I2C_IsErrorOccurred+0xbc>
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800671e:	d01d      	beq.n	800675c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	2b20      	cmp	r3, #32
 8006724:	d01a      	beq.n	800675c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006734:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006736:	f7fd f8f1 	bl	800391c <HAL_GetTick>
 800673a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800673c:	e00e      	b.n	800675c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800673e:	f7fd f8ed 	bl	800391c <HAL_GetTick>
 8006742:	4602      	mov	r2, r0
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	2b19      	cmp	r3, #25
 800674a:	d907      	bls.n	800675c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800674c:	6a3b      	ldr	r3, [r7, #32]
 800674e:	f043 0320 	orr.w	r3, r3, #32
 8006752:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800675a:	e006      	b.n	800676a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d1e9      	bne.n	800673e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b20      	cmp	r3, #32
 8006776:	d003      	beq.n	8006780 <I2C_IsErrorOccurred+0xe0>
 8006778:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0aa      	beq.n	80066d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2220      	movs	r2, #32
 800678e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	f043 0304 	orr.w	r3, r3, #4
 8006796:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80067c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f043 0308 	orr.w	r3, r3, #8
 80067d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00b      	beq.n	800680c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	f043 0302 	orr.w	r3, r3, #2
 80067fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006804:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800680c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01c      	beq.n	800684e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff fdaf 	bl	8006378 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6859      	ldr	r1, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b0d      	ldr	r3, [pc, #52]	@ (800685c <I2C_IsErrorOccurred+0x1bc>)
 8006826:	400b      	ands	r3, r1
 8006828:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	431a      	orrs	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800684e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006852:	4618      	mov	r0, r3
 8006854:	3728      	adds	r7, #40	@ 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	fe00e800 	.word	0xfe00e800

08006860 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	817b      	strh	r3, [r7, #10]
 800686e:	4613      	mov	r3, r2
 8006870:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006878:	7a7b      	ldrb	r3, [r7, #9]
 800687a:	041b      	lsls	r3, r3, #16
 800687c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006880:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	4313      	orrs	r3, r2
 800688a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800688e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	0d5b      	lsrs	r3, r3, #21
 800689a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800689e:	4b08      	ldr	r3, [pc, #32]	@ (80068c0 <I2C_TransferConfig+0x60>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	43db      	mvns	r3, r3
 80068a4:	ea02 0103 	and.w	r1, r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	03ff63ff 	.word	0x03ff63ff

080068c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d138      	bne.n	800694c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e032      	b.n	800694e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2224      	movs	r2, #36	@ 0x24
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0201 	bic.w	r2, r2, #1
 8006906:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006916:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6819      	ldr	r1, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006948:	2300      	movs	r3, #0
 800694a:	e000      	b.n	800694e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800694c:	2302      	movs	r3, #2
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b20      	cmp	r3, #32
 800696e:	d139      	bne.n	80069e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006976:	2b01      	cmp	r3, #1
 8006978:	d101      	bne.n	800697e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800697a:	2302      	movs	r3, #2
 800697c:	e033      	b.n	80069e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2224      	movs	r2, #36	@ 0x24
 800698a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80069ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	021b      	lsls	r3, r3, #8
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0201 	orr.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	e000      	b.n	80069e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	460b      	mov	r3, r1
 80069fe:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8006a00:	4b09      	ldr	r3, [pc, #36]	@ (8006a28 <HAL_PWR_EnterSLEEPMode+0x34>)
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	4a08      	ldr	r2, [pc, #32]	@ (8006a28 <HAL_PWR_EnterSLEEPMode+0x34>)
 8006a06:	f023 0304 	bic.w	r3, r3, #4
 8006a0a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d101      	bne.n	8006a16 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006a12:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8006a14:	e002      	b.n	8006a1c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8006a16:	bf40      	sev
    __WFE();
 8006a18:	bf20      	wfe
    __WFE();
 8006a1a:	bf20      	wfe
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a3c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d102      	bne.n	8006a52 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f001 b83a 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006a56:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 816f 	beq.w	8006d46 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006a68:	4bb5      	ldr	r3, [pc, #724]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f003 030c 	and.w	r3, r3, #12
 8006a70:	2b04      	cmp	r3, #4
 8006a72:	d00c      	beq.n	8006a8e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a74:	4bb2      	ldr	r3, [pc, #712]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f003 030c 	and.w	r3, r3, #12
 8006a7c:	2b08      	cmp	r3, #8
 8006a7e:	d15c      	bne.n	8006b3a <HAL_RCC_OscConfig+0x10e>
 8006a80:	4baf      	ldr	r3, [pc, #700]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a8c:	d155      	bne.n	8006b3a <HAL_RCC_OscConfig+0x10e>
 8006a8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a92:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8006a9a:	fa93 f3a3 	rbit	r3, r3
 8006a9e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006aa2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa6:	fab3 f383 	clz	r3, r3
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x94>
 8006aba:	4ba1      	ldr	r3, [pc, #644]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	e015      	b.n	8006aec <HAL_RCC_OscConfig+0xc0>
 8006ac0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ac4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ac8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8006acc:	fa93 f3a3 	rbit	r3, r3
 8006ad0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8006ad4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ad8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8006adc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8006ae0:	fa93 f3a3 	rbit	r3, r3
 8006ae4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8006ae8:	4b95      	ldr	r3, [pc, #596]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006af0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8006af4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8006af8:	fa92 f2a2 	rbit	r2, r2
 8006afc:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8006b00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8006b04:	fab2 f282 	clz	r2, r2
 8006b08:	b2d2      	uxtb	r2, r2
 8006b0a:	f042 0220 	orr.w	r2, r2, #32
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	f002 021f 	and.w	r2, r2, #31
 8006b14:	2101      	movs	r1, #1
 8006b16:	fa01 f202 	lsl.w	r2, r1, r2
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f000 8111 	beq.w	8006d44 <HAL_RCC_OscConfig+0x318>
 8006b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f040 8108 	bne.w	8006d44 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f000 bfc6 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b4a:	d106      	bne.n	8006b5a <HAL_RCC_OscConfig+0x12e>
 8006b4c:	4b7c      	ldr	r3, [pc, #496]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a7b      	ldr	r2, [pc, #492]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	e036      	b.n	8006bc8 <HAL_RCC_OscConfig+0x19c>
 8006b5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b5e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10c      	bne.n	8006b84 <HAL_RCC_OscConfig+0x158>
 8006b6a:	4b75      	ldr	r3, [pc, #468]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a74      	ldr	r2, [pc, #464]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	4b72      	ldr	r3, [pc, #456]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a71      	ldr	r2, [pc, #452]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	e021      	b.n	8006bc8 <HAL_RCC_OscConfig+0x19c>
 8006b84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006b88:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b94:	d10c      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x184>
 8006b96:	4b6a      	ldr	r3, [pc, #424]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a69      	ldr	r2, [pc, #420]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006b9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	4b67      	ldr	r3, [pc, #412]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a66      	ldr	r2, [pc, #408]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e00b      	b.n	8006bc8 <HAL_RCC_OscConfig+0x19c>
 8006bb0:	4b63      	ldr	r3, [pc, #396]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a62      	ldr	r2, [pc, #392]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bba:	6013      	str	r3, [r2, #0]
 8006bbc:	4b60      	ldr	r3, [pc, #384]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a5f      	ldr	r2, [pc, #380]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bc6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006bcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d059      	beq.n	8006c8c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd8:	f7fc fea0 	bl	800391c <HAL_GetTick>
 8006bdc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006be0:	e00a      	b.n	8006bf8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be2:	f7fc fe9b 	bl	800391c <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	@ 0x64
 8006bf0:	d902      	bls.n	8006bf8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	f000 bf67 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
 8006bf8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006bfc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c00:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8006c04:	fa93 f3a3 	rbit	r3, r3
 8006c08:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8006c0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c10:	fab3 f383 	clz	r3, r3
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	095b      	lsrs	r3, r3, #5
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	f043 0301 	orr.w	r3, r3, #1
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d102      	bne.n	8006c2a <HAL_RCC_OscConfig+0x1fe>
 8006c24:	4b46      	ldr	r3, [pc, #280]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	e015      	b.n	8006c56 <HAL_RCC_OscConfig+0x22a>
 8006c2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006c2e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8006c36:	fa93 f3a3 	rbit	r3, r3
 8006c3a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8006c3e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006c42:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8006c46:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8006c4a:	fa93 f3a3 	rbit	r3, r3
 8006c4e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8006c52:	4b3b      	ldr	r3, [pc, #236]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006c5a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8006c5e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8006c62:	fa92 f2a2 	rbit	r2, r2
 8006c66:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8006c6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8006c6e:	fab2 f282 	clz	r2, r2
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	f042 0220 	orr.w	r2, r2, #32
 8006c78:	b2d2      	uxtb	r2, r2
 8006c7a:	f002 021f 	and.w	r2, r2, #31
 8006c7e:	2101      	movs	r1, #1
 8006c80:	fa01 f202 	lsl.w	r2, r1, r2
 8006c84:	4013      	ands	r3, r2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0ab      	beq.n	8006be2 <HAL_RCC_OscConfig+0x1b6>
 8006c8a:	e05c      	b.n	8006d46 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c8c:	f7fc fe46 	bl	800391c <HAL_GetTick>
 8006c90:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c94:	e00a      	b.n	8006cac <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c96:	f7fc fe41 	bl	800391c <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b64      	cmp	r3, #100	@ 0x64
 8006ca4:	d902      	bls.n	8006cac <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	f000 bf0d 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
 8006cac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006cb0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8006cb8:	fa93 f3a3 	rbit	r3, r3
 8006cbc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8006cc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc4:	fab3 f383 	clz	r3, r3
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f043 0301 	orr.w	r3, r3, #1
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d102      	bne.n	8006cde <HAL_RCC_OscConfig+0x2b2>
 8006cd8:	4b19      	ldr	r3, [pc, #100]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	e015      	b.n	8006d0a <HAL_RCC_OscConfig+0x2de>
 8006cde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006ce2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ce6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8006cea:	fa93 f3a3 	rbit	r3, r3
 8006cee:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8006cf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006cf6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8006cfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8006cfe:	fa93 f3a3 	rbit	r3, r3
 8006d02:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8006d06:	4b0e      	ldr	r3, [pc, #56]	@ (8006d40 <HAL_RCC_OscConfig+0x314>)
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006d0e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8006d12:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8006d16:	fa92 f2a2 	rbit	r2, r2
 8006d1a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8006d1e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8006d22:	fab2 f282 	clz	r2, r2
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	f042 0220 	orr.w	r2, r2, #32
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	f002 021f 	and.w	r2, r2, #31
 8006d32:	2101      	movs	r1, #1
 8006d34:	fa01 f202 	lsl.w	r2, r1, r2
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1ab      	bne.n	8006c96 <HAL_RCC_OscConfig+0x26a>
 8006d3e:	e002      	b.n	8006d46 <HAL_RCC_OscConfig+0x31a>
 8006d40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 817f 	beq.w	800705a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006d5c:	4ba7      	ldr	r3, [pc, #668]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f003 030c 	and.w	r3, r3, #12
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00c      	beq.n	8006d82 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006d68:	4ba4      	ldr	r3, [pc, #656]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f003 030c 	and.w	r3, r3, #12
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d173      	bne.n	8006e5c <HAL_RCC_OscConfig+0x430>
 8006d74:	4ba1      	ldr	r3, [pc, #644]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8006d7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d80:	d16c      	bne.n	8006e5c <HAL_RCC_OscConfig+0x430>
 8006d82:	2302      	movs	r3, #2
 8006d84:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d88:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8006d8c:	fa93 f3a3 	rbit	r3, r3
 8006d90:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8006d94:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d98:	fab3 f383 	clz	r3, r3
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d102      	bne.n	8006db2 <HAL_RCC_OscConfig+0x386>
 8006dac:	4b93      	ldr	r3, [pc, #588]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	e013      	b.n	8006dda <HAL_RCC_OscConfig+0x3ae>
 8006db2:	2302      	movs	r3, #2
 8006db4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006db8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8006dbc:	fa93 f3a3 	rbit	r3, r3
 8006dc0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8006dca:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8006dce:	fa93 f3a3 	rbit	r3, r3
 8006dd2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8006dd6:	4b89      	ldr	r3, [pc, #548]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8006de0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8006de4:	fa92 f2a2 	rbit	r2, r2
 8006de8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8006dec:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8006df0:	fab2 f282 	clz	r2, r2
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	f042 0220 	orr.w	r2, r2, #32
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	f002 021f 	and.w	r2, r2, #31
 8006e00:	2101      	movs	r1, #1
 8006e02:	fa01 f202 	lsl.w	r2, r1, r2
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <HAL_RCC_OscConfig+0x3f6>
 8006e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e10:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d002      	beq.n	8006e22 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f000 be52 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e22:	4b76      	ldr	r3, [pc, #472]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	21f8      	movs	r1, #248	@ 0xf8
 8006e38:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e3c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8006e40:	fa91 f1a1 	rbit	r1, r1
 8006e44:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8006e48:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8006e4c:	fab1 f181 	clz	r1, r1
 8006e50:	b2c9      	uxtb	r1, r1
 8006e52:	408b      	lsls	r3, r1
 8006e54:	4969      	ldr	r1, [pc, #420]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e5a:	e0fe      	b.n	800705a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006e60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8088 	beq.w	8006f7e <HAL_RCC_OscConfig+0x552>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e74:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8006e78:	fa93 f3a3 	rbit	r3, r3
 8006e7c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8006e80:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e84:	fab3 f383 	clz	r3, r3
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006e8e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	461a      	mov	r2, r3
 8006e96:	2301      	movs	r3, #1
 8006e98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9a:	f7fc fd3f 	bl	800391c <HAL_GetTick>
 8006e9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea2:	e00a      	b.n	8006eba <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea4:	f7fc fd3a 	bl	800391c <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d902      	bls.n	8006eba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	f000 be06 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006ec4:	fa93 f3a3 	rbit	r3, r3
 8006ec8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8006ecc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ed0:	fab3 f383 	clz	r3, r3
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	f043 0301 	orr.w	r3, r3, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d102      	bne.n	8006eea <HAL_RCC_OscConfig+0x4be>
 8006ee4:	4b45      	ldr	r3, [pc, #276]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	e013      	b.n	8006f12 <HAL_RCC_OscConfig+0x4e6>
 8006eea:	2302      	movs	r3, #2
 8006eec:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006ef4:	fa93 f3a3 	rbit	r3, r3
 8006ef8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8006efc:	2302      	movs	r3, #2
 8006efe:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8006f02:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006f06:	fa93 f3a3 	rbit	r3, r3
 8006f0a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8006f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f12:	2202      	movs	r2, #2
 8006f14:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8006f18:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006f1c:	fa92 f2a2 	rbit	r2, r2
 8006f20:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8006f24:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8006f28:	fab2 f282 	clz	r2, r2
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	f042 0220 	orr.w	r2, r2, #32
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	f002 021f 	and.w	r2, r2, #31
 8006f38:	2101      	movs	r1, #1
 8006f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f3e:	4013      	ands	r3, r2
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d0af      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f44:	4b2d      	ldr	r3, [pc, #180]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8006f50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	21f8      	movs	r1, #248	@ 0xf8
 8006f5a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f5e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8006f62:	fa91 f1a1 	rbit	r1, r1
 8006f66:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8006f6a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006f6e:	fab1 f181 	clz	r1, r1
 8006f72:	b2c9      	uxtb	r1, r1
 8006f74:	408b      	lsls	r3, r1
 8006f76:	4921      	ldr	r1, [pc, #132]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	600b      	str	r3, [r1, #0]
 8006f7c:	e06d      	b.n	800705a <HAL_RCC_OscConfig+0x62e>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f84:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8006f88:	fa93 f3a3 	rbit	r3, r3
 8006f8c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8006f90:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f94:	fab3 f383 	clz	r3, r3
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8006f9e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006faa:	f7fc fcb7 	bl	800391c <HAL_GetTick>
 8006fae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fb2:	e00a      	b.n	8006fca <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fb4:	f7fc fcb2 	bl	800391c <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d902      	bls.n	8006fca <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	f000 bd7e 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006fd4:	fa93 f3a3 	rbit	r3, r3
 8006fd8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8006fdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f043 0301 	orr.w	r3, r3, #1
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d105      	bne.n	8007000 <HAL_RCC_OscConfig+0x5d4>
 8006ff4:	4b01      	ldr	r3, [pc, #4]	@ (8006ffc <HAL_RCC_OscConfig+0x5d0>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	e016      	b.n	8007028 <HAL_RCC_OscConfig+0x5fc>
 8006ffa:	bf00      	nop
 8006ffc:	40021000 	.word	0x40021000
 8007000:	2302      	movs	r3, #2
 8007002:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007006:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800700a:	fa93 f3a3 	rbit	r3, r3
 800700e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8007012:	2302      	movs	r3, #2
 8007014:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007018:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800701c:	fa93 f3a3 	rbit	r3, r3
 8007020:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007024:	4bbf      	ldr	r3, [pc, #764]	@ (8007324 <HAL_RCC_OscConfig+0x8f8>)
 8007026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007028:	2202      	movs	r2, #2
 800702a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800702e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8007032:	fa92 f2a2 	rbit	r2, r2
 8007036:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800703a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800703e:	fab2 f282 	clz	r2, r2
 8007042:	b2d2      	uxtb	r2, r2
 8007044:	f042 0220 	orr.w	r2, r2, #32
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	f002 021f 	and.w	r2, r2, #31
 800704e:	2101      	movs	r1, #1
 8007050:	fa01 f202 	lsl.w	r2, r1, r2
 8007054:	4013      	ands	r3, r2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d1ac      	bne.n	8006fb4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800705a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800705e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8113 	beq.w	8007296 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007074:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d07c      	beq.n	800717a <HAL_RCC_OscConfig+0x74e>
 8007080:	2301      	movs	r3, #1
 8007082:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800708a:	fa93 f3a3 	rbit	r3, r3
 800708e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8007092:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007096:	fab3 f383 	clz	r3, r3
 800709a:	b2db      	uxtb	r3, r3
 800709c:	461a      	mov	r2, r3
 800709e:	4ba2      	ldr	r3, [pc, #648]	@ (8007328 <HAL_RCC_OscConfig+0x8fc>)
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	461a      	mov	r2, r3
 80070a6:	2301      	movs	r3, #1
 80070a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070aa:	f7fc fc37 	bl	800391c <HAL_GetTick>
 80070ae:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070b2:	e00a      	b.n	80070ca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070b4:	f7fc fc32 	bl	800391c <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d902      	bls.n	80070ca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	f000 bcfe 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
 80070ca:	2302      	movs	r3, #2
 80070cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d4:	fa93 f2a3 	rbit	r2, r3
 80070d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070dc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ea:	2202      	movs	r2, #2
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80070f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	fa93 f2a3 	rbit	r2, r3
 80070fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800710a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800710e:	2202      	movs	r2, #2
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007116:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	fa93 f2a3 	rbit	r2, r3
 8007120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007124:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8007128:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712a:	4b7e      	ldr	r3, [pc, #504]	@ (8007324 <HAL_RCC_OscConfig+0x8f8>)
 800712c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800712e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007132:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007136:	2102      	movs	r1, #2
 8007138:	6019      	str	r1, [r3, #0]
 800713a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800713e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	fa93 f1a3 	rbit	r1, r3
 8007148:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800714c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8007150:	6019      	str	r1, [r3, #0]
  return result;
 8007152:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007156:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	fab3 f383 	clz	r3, r3
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007166:	b2db      	uxtb	r3, r3
 8007168:	f003 031f 	and.w	r3, r3, #31
 800716c:	2101      	movs	r1, #1
 800716e:	fa01 f303 	lsl.w	r3, r1, r3
 8007172:	4013      	ands	r3, r2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d09d      	beq.n	80070b4 <HAL_RCC_OscConfig+0x688>
 8007178:	e08d      	b.n	8007296 <HAL_RCC_OscConfig+0x86a>
 800717a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800717e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007186:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800718a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	fa93 f2a3 	rbit	r2, r3
 8007194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007198:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800719c:	601a      	str	r2, [r3, #0]
  return result;
 800719e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80071a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071a8:	fab3 f383 	clz	r3, r3
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	461a      	mov	r2, r3
 80071b0:	4b5d      	ldr	r3, [pc, #372]	@ (8007328 <HAL_RCC_OscConfig+0x8fc>)
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	461a      	mov	r2, r3
 80071b8:	2300      	movs	r3, #0
 80071ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071bc:	f7fc fbae 	bl	800391c <HAL_GetTick>
 80071c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c4:	e00a      	b.n	80071dc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071c6:	f7fc fba9 	bl	800391c <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d902      	bls.n	80071dc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	f000 bc75 	b.w	8007ac6 <HAL_RCC_OscConfig+0x109a>
 80071dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80071e4:	2202      	movs	r2, #2
 80071e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	fa93 f2a3 	rbit	r2, r3
 80071f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80071fa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007204:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007208:	2202      	movs	r2, #2
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007210:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	fa93 f2a3 	rbit	r2, r3
 800721a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800721e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007228:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800722c:	2202      	movs	r2, #2
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007234:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	fa93 f2a3 	rbit	r2, r3
 800723e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007242:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007246:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007248:	4b36      	ldr	r3, [pc, #216]	@ (8007324 <HAL_RCC_OscConfig+0x8f8>)
 800724a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800724c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007254:	2102      	movs	r1, #2
 8007256:	6019      	str	r1, [r3, #0]
 8007258:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800725c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	fa93 f1a3 	rbit	r1, r3
 8007266:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800726a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800726e:	6019      	str	r1, [r3, #0]
  return result;
 8007270:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007274:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007284:	b2db      	uxtb	r3, r3
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2101      	movs	r1, #1
 800728c:	fa01 f303 	lsl.w	r3, r1, r3
 8007290:	4013      	ands	r3, r2
 8007292:	2b00      	cmp	r3, #0
 8007294:	d197      	bne.n	80071c6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007296:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800729a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 81a5 	beq.w	80075f6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072b2:	4b1c      	ldr	r3, [pc, #112]	@ (8007324 <HAL_RCC_OscConfig+0x8f8>)
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d116      	bne.n	80072ec <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072be:	4b19      	ldr	r3, [pc, #100]	@ (8007324 <HAL_RCC_OscConfig+0x8f8>)
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	4a18      	ldr	r2, [pc, #96]	@ (8007324 <HAL_RCC_OscConfig+0x8f8>)
 80072c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072c8:	61d3      	str	r3, [r2, #28]
 80072ca:	4b16      	ldr	r3, [pc, #88]	@ (8007324 <HAL_RCC_OscConfig+0x8f8>)
 80072cc:	69db      	ldr	r3, [r3, #28]
 80072ce:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80072d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80072d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80072e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80072e4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072ec:	4b0f      	ldr	r3, [pc, #60]	@ (800732c <HAL_RCC_OscConfig+0x900>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d121      	bne.n	800733c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80072f8:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <HAL_RCC_OscConfig+0x900>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a0b      	ldr	r2, [pc, #44]	@ (800732c <HAL_RCC_OscConfig+0x900>)
 80072fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007302:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007304:	f7fc fb0a 	bl	800391c <HAL_GetTick>
 8007308:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800730c:	e010      	b.n	8007330 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800730e:	f7fc fb05 	bl	800391c <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	2b64      	cmp	r3, #100	@ 0x64
 800731c:	d908      	bls.n	8007330 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e3d1      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
 8007322:	bf00      	nop
 8007324:	40021000 	.word	0x40021000
 8007328:	10908120 	.word	0x10908120
 800732c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007330:	4b8d      	ldr	r3, [pc, #564]	@ (8007568 <HAL_RCC_OscConfig+0xb3c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0e8      	beq.n	800730e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800733c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007340:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b01      	cmp	r3, #1
 800734a:	d106      	bne.n	800735a <HAL_RCC_OscConfig+0x92e>
 800734c:	4b87      	ldr	r3, [pc, #540]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	4a86      	ldr	r2, [pc, #536]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 8007352:	f043 0301 	orr.w	r3, r3, #1
 8007356:	6213      	str	r3, [r2, #32]
 8007358:	e035      	b.n	80073c6 <HAL_RCC_OscConfig+0x99a>
 800735a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800735e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10c      	bne.n	8007384 <HAL_RCC_OscConfig+0x958>
 800736a:	4b80      	ldr	r3, [pc, #512]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	4a7f      	ldr	r2, [pc, #508]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	6213      	str	r3, [r2, #32]
 8007376:	4b7d      	ldr	r3, [pc, #500]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	4a7c      	ldr	r2, [pc, #496]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 800737c:	f023 0304 	bic.w	r3, r3, #4
 8007380:	6213      	str	r3, [r2, #32]
 8007382:	e020      	b.n	80073c6 <HAL_RCC_OscConfig+0x99a>
 8007384:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007388:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b05      	cmp	r3, #5
 8007392:	d10c      	bne.n	80073ae <HAL_RCC_OscConfig+0x982>
 8007394:	4b75      	ldr	r3, [pc, #468]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	4a74      	ldr	r2, [pc, #464]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 800739a:	f043 0304 	orr.w	r3, r3, #4
 800739e:	6213      	str	r3, [r2, #32]
 80073a0:	4b72      	ldr	r3, [pc, #456]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	4a71      	ldr	r2, [pc, #452]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	6213      	str	r3, [r2, #32]
 80073ac:	e00b      	b.n	80073c6 <HAL_RCC_OscConfig+0x99a>
 80073ae:	4b6f      	ldr	r3, [pc, #444]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	4a6e      	ldr	r2, [pc, #440]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	6213      	str	r3, [r2, #32]
 80073ba:	4b6c      	ldr	r3, [pc, #432]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	4a6b      	ldr	r2, [pc, #428]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 80073c0:	f023 0304 	bic.w	r3, r3, #4
 80073c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80073ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 8081 	beq.w	80074da <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d8:	f7fc faa0 	bl	800391c <HAL_GetTick>
 80073dc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e0:	e00b      	b.n	80073fa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073e2:	f7fc fa9b 	bl	800391c <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80073ec:	1ad3      	subs	r3, r2, r3
 80073ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d901      	bls.n	80073fa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e365      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
 80073fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80073fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8007402:	2202      	movs	r2, #2
 8007404:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007406:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800740a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	fa93 f2a3 	rbit	r2, r3
 8007414:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007418:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007422:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8007426:	2202      	movs	r2, #2
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800742e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	fa93 f2a3 	rbit	r2, r3
 8007438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800743c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8007440:	601a      	str	r2, [r3, #0]
  return result;
 8007442:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007446:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800744a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800744c:	fab3 f383 	clz	r3, r3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f043 0302 	orr.w	r3, r3, #2
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b02      	cmp	r3, #2
 800745e:	d102      	bne.n	8007466 <HAL_RCC_OscConfig+0xa3a>
 8007460:	4b42      	ldr	r3, [pc, #264]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	e013      	b.n	800748e <HAL_RCC_OscConfig+0xa62>
 8007466:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800746a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800746e:	2202      	movs	r2, #2
 8007470:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007472:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007476:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	fa93 f2a3 	rbit	r2, r3
 8007480:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007484:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	4b38      	ldr	r3, [pc, #224]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 800748c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007492:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8007496:	2102      	movs	r1, #2
 8007498:	6011      	str	r1, [r2, #0]
 800749a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800749e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	fa92 f1a2 	rbit	r1, r2
 80074a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80074ac:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80074b0:	6011      	str	r1, [r2, #0]
  return result;
 80074b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80074b6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	fab2 f282 	clz	r2, r2
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	f002 021f 	and.w	r2, r2, #31
 80074cc:	2101      	movs	r1, #1
 80074ce:	fa01 f202 	lsl.w	r2, r1, r2
 80074d2:	4013      	ands	r3, r2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d084      	beq.n	80073e2 <HAL_RCC_OscConfig+0x9b6>
 80074d8:	e083      	b.n	80075e2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074da:	f7fc fa1f 	bl	800391c <HAL_GetTick>
 80074de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80074e2:	e00b      	b.n	80074fc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074e4:	f7fc fa1a 	bl	800391c <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d901      	bls.n	80074fc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e2e4      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
 80074fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007500:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8007504:	2202      	movs	r2, #2
 8007506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800750c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	fa93 f2a3 	rbit	r2, r3
 8007516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800751a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007524:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007528:	2202      	movs	r2, #2
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007530:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	fa93 f2a3 	rbit	r2, r3
 800753a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800753e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8007542:	601a      	str	r2, [r3, #0]
  return result;
 8007544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007548:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800754c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800754e:	fab3 f383 	clz	r3, r3
 8007552:	b2db      	uxtb	r3, r3
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f043 0302 	orr.w	r3, r3, #2
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b02      	cmp	r3, #2
 8007560:	d106      	bne.n	8007570 <HAL_RCC_OscConfig+0xb44>
 8007562:	4b02      	ldr	r3, [pc, #8]	@ (800756c <HAL_RCC_OscConfig+0xb40>)
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	e017      	b.n	8007598 <HAL_RCC_OscConfig+0xb6c>
 8007568:	40007000 	.word	0x40007000
 800756c:	40021000 	.word	0x40021000
 8007570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007574:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007578:	2202      	movs	r2, #2
 800757a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007580:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	fa93 f2a3 	rbit	r2, r3
 800758a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800758e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	4bb3      	ldr	r3, [pc, #716]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 8007596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007598:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800759c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80075a0:	2102      	movs	r1, #2
 80075a2:	6011      	str	r1, [r2, #0]
 80075a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80075a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80075ac:	6812      	ldr	r2, [r2, #0]
 80075ae:	fa92 f1a2 	rbit	r1, r2
 80075b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80075b6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80075ba:	6011      	str	r1, [r2, #0]
  return result;
 80075bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80075c0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	fab2 f282 	clz	r2, r2
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	f002 021f 	and.w	r2, r2, #31
 80075d6:	2101      	movs	r1, #1
 80075d8:	fa01 f202 	lsl.w	r2, r1, r2
 80075dc:	4013      	ands	r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d180      	bne.n	80074e4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80075e2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d105      	bne.n	80075f6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ea:	4b9e      	ldr	r3, [pc, #632]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	4a9d      	ldr	r2, [pc, #628]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 80075f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075f4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80075fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 825e 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007608:	4b96      	ldr	r3, [pc, #600]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f003 030c 	and.w	r3, r3, #12
 8007610:	2b08      	cmp	r3, #8
 8007612:	f000 821f 	beq.w	8007a54 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800761a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2b02      	cmp	r3, #2
 8007624:	f040 8170 	bne.w	8007908 <HAL_RCC_OscConfig+0xedc>
 8007628:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800762c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8007630:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800763a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	fa93 f2a3 	rbit	r2, r3
 8007644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007648:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800764c:	601a      	str	r2, [r3, #0]
  return result;
 800764e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007652:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8007656:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007658:	fab3 f383 	clz	r3, r3
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007662:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	461a      	mov	r2, r3
 800766a:	2300      	movs	r3, #0
 800766c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800766e:	f7fc f955 	bl	800391c <HAL_GetTick>
 8007672:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007676:	e009      	b.n	800768c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007678:	f7fc f950 	bl	800391c <HAL_GetTick>
 800767c:	4602      	mov	r2, r0
 800767e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e21c      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
 800768c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007690:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8007694:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007698:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800769a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800769e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	fa93 f2a3 	rbit	r2, r3
 80076a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80076ac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80076b0:	601a      	str	r2, [r3, #0]
  return result;
 80076b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80076b6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80076ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076bc:	fab3 f383 	clz	r3, r3
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d102      	bne.n	80076d6 <HAL_RCC_OscConfig+0xcaa>
 80076d0:	4b64      	ldr	r3, [pc, #400]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	e027      	b.n	8007726 <HAL_RCC_OscConfig+0xcfa>
 80076d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80076da:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80076de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80076e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80076e8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	fa93 f2a3 	rbit	r2, r3
 80076f2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80076f6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007700:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007704:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800770e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	fa93 f2a3 	rbit	r2, r3
 8007718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800771c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	4b50      	ldr	r3, [pc, #320]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 8007724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007726:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800772a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800772e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007732:	6011      	str	r1, [r2, #0]
 8007734:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007738:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800773c:	6812      	ldr	r2, [r2, #0]
 800773e:	fa92 f1a2 	rbit	r1, r2
 8007742:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007746:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800774a:	6011      	str	r1, [r2, #0]
  return result;
 800774c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007750:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8007754:	6812      	ldr	r2, [r2, #0]
 8007756:	fab2 f282 	clz	r2, r2
 800775a:	b2d2      	uxtb	r2, r2
 800775c:	f042 0220 	orr.w	r2, r2, #32
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	f002 021f 	and.w	r2, r2, #31
 8007766:	2101      	movs	r1, #1
 8007768:	fa01 f202 	lsl.w	r2, r1, r2
 800776c:	4013      	ands	r3, r2
 800776e:	2b00      	cmp	r3, #0
 8007770:	d182      	bne.n	8007678 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007772:	4b3c      	ldr	r3, [pc, #240]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	f023 020f 	bic.w	r2, r3, #15
 800777a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800777e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007786:	4937      	ldr	r1, [pc, #220]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 8007788:	4313      	orrs	r3, r2
 800778a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800778c:	4b35      	ldr	r3, [pc, #212]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8007794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007798:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6a19      	ldr	r1, [r3, #32]
 80077a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69db      	ldr	r3, [r3, #28]
 80077ac:	430b      	orrs	r3, r1
 80077ae:	492d      	ldr	r1, [pc, #180]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	604b      	str	r3, [r1, #4]
 80077b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077b8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80077bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077c6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	fa93 f2a3 	rbit	r2, r3
 80077d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80077d8:	601a      	str	r2, [r3, #0]
  return result;
 80077da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80077de:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80077e2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077e4:	fab3 f383 	clz	r3, r3
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80077ee:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	461a      	mov	r2, r3
 80077f6:	2301      	movs	r3, #1
 80077f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077fa:	f7fc f88f 	bl	800391c <HAL_GetTick>
 80077fe:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007802:	e009      	b.n	8007818 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007804:	f7fc f88a 	bl	800391c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	2b02      	cmp	r3, #2
 8007812:	d901      	bls.n	8007818 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e156      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
 8007818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800781c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8007820:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007826:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800782a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	fa93 f2a3 	rbit	r2, r3
 8007834:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007838:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800783c:	601a      	str	r2, [r3, #0]
  return result;
 800783e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007842:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8007846:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007848:	fab3 f383 	clz	r3, r3
 800784c:	b2db      	uxtb	r3, r3
 800784e:	095b      	lsrs	r3, r3, #5
 8007850:	b2db      	uxtb	r3, r3
 8007852:	f043 0301 	orr.w	r3, r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d105      	bne.n	8007868 <HAL_RCC_OscConfig+0xe3c>
 800785c:	4b01      	ldr	r3, [pc, #4]	@ (8007864 <HAL_RCC_OscConfig+0xe38>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	e02a      	b.n	80078b8 <HAL_RCC_OscConfig+0xe8c>
 8007862:	bf00      	nop
 8007864:	40021000 	.word	0x40021000
 8007868:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800786c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8007870:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007874:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007876:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800787a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	fa93 f2a3 	rbit	r2, r3
 8007884:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007888:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007892:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007896:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80078a0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	fa93 f2a3 	rbit	r2, r3
 80078aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80078ae:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	4b86      	ldr	r3, [pc, #536]	@ (8007ad0 <HAL_RCC_OscConfig+0x10a4>)
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80078bc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80078c0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80078ca:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80078ce:	6812      	ldr	r2, [r2, #0]
 80078d0:	fa92 f1a2 	rbit	r1, r2
 80078d4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80078d8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80078dc:	6011      	str	r1, [r2, #0]
  return result;
 80078de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80078e2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80078e6:	6812      	ldr	r2, [r2, #0]
 80078e8:	fab2 f282 	clz	r2, r2
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	f042 0220 	orr.w	r2, r2, #32
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	f002 021f 	and.w	r2, r2, #31
 80078f8:	2101      	movs	r1, #1
 80078fa:	fa01 f202 	lsl.w	r2, r1, r2
 80078fe:	4013      	ands	r3, r2
 8007900:	2b00      	cmp	r3, #0
 8007902:	f43f af7f 	beq.w	8007804 <HAL_RCC_OscConfig+0xdd8>
 8007906:	e0dd      	b.n	8007ac4 <HAL_RCC_OscConfig+0x1098>
 8007908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800790c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007910:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007916:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800791a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	fa93 f2a3 	rbit	r2, r3
 8007924:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007928:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800792c:	601a      	str	r2, [r3, #0]
  return result;
 800792e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007932:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007936:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007938:	fab3 f383 	clz	r3, r3
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8007942:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	461a      	mov	r2, r3
 800794a:	2300      	movs	r3, #0
 800794c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800794e:	f7fb ffe5 	bl	800391c <HAL_GetTick>
 8007952:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007956:	e009      	b.n	800796c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007958:	f7fb ffe0 	bl	800391c <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e0ac      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
 800796c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007970:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007974:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800797a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800797e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	fa93 f2a3 	rbit	r2, r3
 8007988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800798c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8007990:	601a      	str	r2, [r3, #0]
  return result;
 8007992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007996:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800799a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800799c:	fab3 f383 	clz	r3, r3
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d102      	bne.n	80079b6 <HAL_RCC_OscConfig+0xf8a>
 80079b0:	4b47      	ldr	r3, [pc, #284]	@ (8007ad0 <HAL_RCC_OscConfig+0x10a4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	e027      	b.n	8007a06 <HAL_RCC_OscConfig+0xfda>
 80079b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079ba:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80079be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80079c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079c8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	fa93 f2a3 	rbit	r2, r3
 80079d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079d6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80079e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079ee:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	fa93 f2a3 	rbit	r2, r3
 80079f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80079fc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	4b33      	ldr	r3, [pc, #204]	@ (8007ad0 <HAL_RCC_OscConfig+0x10a4>)
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007a0a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8007a0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8007a12:	6011      	str	r1, [r2, #0]
 8007a14:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007a18:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8007a1c:	6812      	ldr	r2, [r2, #0]
 8007a1e:	fa92 f1a2 	rbit	r1, r2
 8007a22:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007a26:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8007a2a:	6011      	str	r1, [r2, #0]
  return result;
 8007a2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8007a30:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8007a34:	6812      	ldr	r2, [r2, #0]
 8007a36:	fab2 f282 	clz	r2, r2
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	f042 0220 	orr.w	r2, r2, #32
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	f002 021f 	and.w	r2, r2, #31
 8007a46:	2101      	movs	r1, #1
 8007a48:	fa01 f202 	lsl.w	r2, r1, r2
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d182      	bne.n	8007958 <HAL_RCC_OscConfig+0xf2c>
 8007a52:	e037      	b.n	8007ac4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a58:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e02e      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a68:	4b19      	ldr	r3, [pc, #100]	@ (8007ad0 <HAL_RCC_OscConfig+0x10a4>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8007a70:	4b17      	ldr	r3, [pc, #92]	@ (8007ad0 <HAL_RCC_OscConfig+0x10a4>)
 8007a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a74:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007a78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007a7c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8007a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a84:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d117      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007a90:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8007a94:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007a9c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d10b      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8007aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8007ab4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d001      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40021000 	.word	0x40021000

08007ad4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b09e      	sub	sp, #120	@ 0x78
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d101      	bne.n	8007aec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e162      	b.n	8007db2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007aec:	4b90      	ldr	r3, [pc, #576]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d910      	bls.n	8007b1c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007afa:	4b8d      	ldr	r3, [pc, #564]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f023 0207 	bic.w	r2, r3, #7
 8007b02:	498b      	ldr	r1, [pc, #556]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b0a:	4b89      	ldr	r3, [pc, #548]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d001      	beq.n	8007b1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e14a      	b.n	8007db2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d008      	beq.n	8007b3a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b28:	4b82      	ldr	r3, [pc, #520]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	497f      	ldr	r1, [pc, #508]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0301 	and.w	r3, r3, #1
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80dc 	beq.w	8007d00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d13c      	bne.n	8007bca <HAL_RCC_ClockConfig+0xf6>
 8007b50:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b54:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b58:	fa93 f3a3 	rbit	r3, r3
 8007b5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8007b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b60:	fab3 f383 	clz	r3, r3
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	095b      	lsrs	r3, r3, #5
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d102      	bne.n	8007b7a <HAL_RCC_ClockConfig+0xa6>
 8007b74:	4b6f      	ldr	r3, [pc, #444]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	e00f      	b.n	8007b9a <HAL_RCC_ClockConfig+0xc6>
 8007b7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b82:	fa93 f3a3 	rbit	r3, r3
 8007b86:	667b      	str	r3, [r7, #100]	@ 0x64
 8007b88:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007b8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b90:	fa93 f3a3 	rbit	r3, r3
 8007b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b96:	4b67      	ldr	r3, [pc, #412]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007b9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ba0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ba2:	fa92 f2a2 	rbit	r2, r2
 8007ba6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8007ba8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007baa:	fab2 f282 	clz	r2, r2
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	f042 0220 	orr.w	r2, r2, #32
 8007bb4:	b2d2      	uxtb	r2, r2
 8007bb6:	f002 021f 	and.w	r2, r2, #31
 8007bba:	2101      	movs	r1, #1
 8007bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d17b      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e0f3      	b.n	8007db2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b02      	cmp	r3, #2
 8007bd0:	d13c      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x178>
 8007bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007bd6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bda:	fa93 f3a3 	rbit	r3, r3
 8007bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be2:	fab3 f383 	clz	r3, r3
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	f043 0301 	orr.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d102      	bne.n	8007bfc <HAL_RCC_ClockConfig+0x128>
 8007bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	e00f      	b.n	8007c1c <HAL_RCC_ClockConfig+0x148>
 8007bfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c04:	fa93 f3a3 	rbit	r3, r3
 8007c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c12:	fa93 f3a3 	rbit	r3, r3
 8007c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c18:	4b46      	ldr	r3, [pc, #280]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007c20:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007c22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c24:	fa92 f2a2 	rbit	r2, r2
 8007c28:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8007c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c2c:	fab2 f282 	clz	r2, r2
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	f042 0220 	orr.w	r2, r2, #32
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	f002 021f 	and.w	r2, r2, #31
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8007c42:	4013      	ands	r3, r2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d13a      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0b2      	b.n	8007db2 <HAL_RCC_ClockConfig+0x2de>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	fa93 f3a3 	rbit	r3, r3
 8007c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c5a:	fab3 f383 	clz	r3, r3
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	095b      	lsrs	r3, r3, #5
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d102      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x1a0>
 8007c6e:	4b31      	ldr	r3, [pc, #196]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	e00d      	b.n	8007c90 <HAL_RCC_ClockConfig+0x1bc>
 8007c74:	2302      	movs	r3, #2
 8007c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	fa93 f3a3 	rbit	r3, r3
 8007c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c80:	2302      	movs	r3, #2
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
 8007c86:	fa93 f3a3 	rbit	r3, r3
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	4b29      	ldr	r3, [pc, #164]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c90:	2202      	movs	r2, #2
 8007c92:	61ba      	str	r2, [r7, #24]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	fa92 f2a2 	rbit	r2, r2
 8007c9a:	617a      	str	r2, [r7, #20]
  return result;
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	fab2 f282 	clz	r2, r2
 8007ca2:	b2d2      	uxtb	r2, r2
 8007ca4:	f042 0220 	orr.w	r2, r2, #32
 8007ca8:	b2d2      	uxtb	r2, r2
 8007caa:	f002 021f 	and.w	r2, r2, #31
 8007cae:	2101      	movs	r1, #1
 8007cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e079      	b.n	8007db2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	f023 0203 	bic.w	r2, r3, #3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	491a      	ldr	r1, [pc, #104]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cd0:	f7fb fe24 	bl	800391c <HAL_GetTick>
 8007cd4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cd6:	e00a      	b.n	8007cee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007cd8:	f7fb fe20 	bl	800391c <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d901      	bls.n	8007cee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007cea:	2303      	movs	r3, #3
 8007cec:	e061      	b.n	8007db2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cee:	4b11      	ldr	r3, [pc, #68]	@ (8007d34 <HAL_RCC_ClockConfig+0x260>)
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f003 020c 	and.w	r2, r3, #12
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d1eb      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d00:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0307 	and.w	r3, r3, #7
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d214      	bcs.n	8007d38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d0e:	4b08      	ldr	r3, [pc, #32]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f023 0207 	bic.w	r2, r3, #7
 8007d16:	4906      	ldr	r1, [pc, #24]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d1e:	4b04      	ldr	r3, [pc, #16]	@ (8007d30 <HAL_RCC_ClockConfig+0x25c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d005      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e040      	b.n	8007db2 <HAL_RCC_ClockConfig+0x2de>
 8007d30:	40022000 	.word	0x40022000
 8007d34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d44:	4b1d      	ldr	r3, [pc, #116]	@ (8007dbc <HAL_RCC_ClockConfig+0x2e8>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	491a      	ldr	r1, [pc, #104]	@ (8007dbc <HAL_RCC_ClockConfig+0x2e8>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 0308 	and.w	r3, r3, #8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d62:	4b16      	ldr	r3, [pc, #88]	@ (8007dbc <HAL_RCC_ClockConfig+0x2e8>)
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	00db      	lsls	r3, r3, #3
 8007d70:	4912      	ldr	r1, [pc, #72]	@ (8007dbc <HAL_RCC_ClockConfig+0x2e8>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007d76:	f000 f829 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007dbc <HAL_RCC_ClockConfig+0x2e8>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d84:	22f0      	movs	r2, #240	@ 0xf0
 8007d86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	fa92 f2a2 	rbit	r2, r2
 8007d8e:	60fa      	str	r2, [r7, #12]
  return result;
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	fab2 f282 	clz	r2, r2
 8007d96:	b2d2      	uxtb	r2, r2
 8007d98:	40d3      	lsrs	r3, r2
 8007d9a:	4a09      	ldr	r2, [pc, #36]	@ (8007dc0 <HAL_RCC_ClockConfig+0x2ec>)
 8007d9c:	5cd3      	ldrb	r3, [r2, r3]
 8007d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8007da2:	4a08      	ldr	r2, [pc, #32]	@ (8007dc4 <HAL_RCC_ClockConfig+0x2f0>)
 8007da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007da6:	4b08      	ldr	r3, [pc, #32]	@ (8007dc8 <HAL_RCC_ClockConfig+0x2f4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fb fd72 	bl	8003894 <HAL_InitTick>
  
  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3778      	adds	r7, #120	@ 0x78
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	08014988 	.word	0x08014988
 8007dc4:	20000000 	.word	0x20000000
 8007dc8:	20000004 	.word	0x20000004

08007dcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b087      	sub	sp, #28
 8007dd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60bb      	str	r3, [r7, #8]
 8007dda:	2300      	movs	r3, #0
 8007ddc:	617b      	str	r3, [r7, #20]
 8007dde:	2300      	movs	r3, #0
 8007de0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8007de6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f003 030c 	and.w	r3, r3, #12
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d002      	beq.n	8007dfc <HAL_RCC_GetSysClockFreq+0x30>
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d003      	beq.n	8007e02 <HAL_RCC_GetSysClockFreq+0x36>
 8007dfa:	e029      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007dfe:	613b      	str	r3, [r7, #16]
      break;
 8007e00:	e029      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	0c9b      	lsrs	r3, r3, #18
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	4a18      	ldr	r2, [pc, #96]	@ (8007e6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8007e0c:	5cd3      	ldrb	r3, [r2, r3]
 8007e0e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8007e10:	4b14      	ldr	r3, [pc, #80]	@ (8007e64 <HAL_RCC_GetSysClockFreq+0x98>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	4a15      	ldr	r2, [pc, #84]	@ (8007e70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007e1a:	5cd3      	ldrb	r3, [r2, r3]
 8007e1c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d008      	beq.n	8007e3a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007e28:	4a0f      	ldr	r2, [pc, #60]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	fb02 f303 	mul.w	r3, r2, r3
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	e007      	b.n	8007e4a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007e3a:	4a0b      	ldr	r2, [pc, #44]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	613b      	str	r3, [r7, #16]
      break;
 8007e4e:	e002      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007e50:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007e52:	613b      	str	r3, [r7, #16]
      break;
 8007e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e56:	693b      	ldr	r3, [r7, #16]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	371c      	adds	r7, #28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	40021000 	.word	0x40021000
 8007e68:	007a1200 	.word	0x007a1200
 8007e6c:	080149a0 	.word	0x080149a0
 8007e70:	080149b0 	.word	0x080149b0

08007e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e78:	4b03      	ldr	r3, [pc, #12]	@ (8007e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20000000 	.word	0x20000000

08007e8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8007e92:	f7ff ffef 	bl	8007e74 <HAL_RCC_GetHCLKFreq>
 8007e96:	4601      	mov	r1, r0
 8007e98:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ea0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8007ea4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	fa92 f2a2 	rbit	r2, r2
 8007eac:	603a      	str	r2, [r7, #0]
  return result;
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	fab2 f282 	clz	r2, r2
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	40d3      	lsrs	r3, r2
 8007eb8:	4a04      	ldr	r2, [pc, #16]	@ (8007ecc <HAL_RCC_GetPCLK1Freq+0x40>)
 8007eba:	5cd3      	ldrb	r3, [r2, r3]
 8007ebc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40021000 	.word	0x40021000
 8007ecc:	08014998 	.word	0x08014998

08007ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8007ed6:	f7ff ffcd 	bl	8007e74 <HAL_RCC_GetHCLKFreq>
 8007eda:	4601      	mov	r1, r0
 8007edc:	4b0b      	ldr	r3, [pc, #44]	@ (8007f0c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8007ee4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8007ee8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	fa92 f2a2 	rbit	r2, r2
 8007ef0:	603a      	str	r2, [r7, #0]
  return result;
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	fab2 f282 	clz	r2, r2
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	40d3      	lsrs	r3, r2
 8007efc:	4a04      	ldr	r2, [pc, #16]	@ (8007f10 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007efe:	5cd3      	ldrb	r3, [r2, r3]
 8007f00:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8007f04:	4618      	mov	r0, r3
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40021000 	.word	0x40021000
 8007f10:	08014998 	.word	0x08014998

08007f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b092      	sub	sp, #72	@ 0x48
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8007f20:	2300      	movs	r3, #0
 8007f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8007f24:	2300      	movs	r3, #0
 8007f26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 80d4 	beq.w	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f38:	4b4e      	ldr	r3, [pc, #312]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f3a:	69db      	ldr	r3, [r3, #28]
 8007f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10e      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f44:	4b4b      	ldr	r3, [pc, #300]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	4a4a      	ldr	r2, [pc, #296]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f4e:	61d3      	str	r3, [r2, #28]
 8007f50:	4b48      	ldr	r3, [pc, #288]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f62:	4b45      	ldr	r3, [pc, #276]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d118      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007f6e:	4b42      	ldr	r3, [pc, #264]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a41      	ldr	r2, [pc, #260]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f78:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f7a:	f7fb fccf 	bl	800391c <HAL_GetTick>
 8007f7e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f80:	e008      	b.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f82:	f7fb fccb 	bl	800391c <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b64      	cmp	r3, #100	@ 0x64
 8007f8e:	d901      	bls.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e1d6      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007f94:	4b38      	ldr	r3, [pc, #224]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d0f0      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fa0:	4b34      	ldr	r3, [pc, #208]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 8084 	beq.w	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d07c      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007fce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	fa93 f3a3 	rbit	r3, r3
 8007fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8007fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fda:	fab3 f383 	clz	r3, r3
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4b26      	ldr	r3, [pc, #152]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007fe4:	4413      	add	r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	461a      	mov	r2, r3
 8007fea:	2301      	movs	r3, #1
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	fa93 f3a3 	rbit	r3, r3
 8007ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007ffe:	fab3 f383 	clz	r3, r3
 8008002:	b2db      	uxtb	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	4b1d      	ldr	r3, [pc, #116]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	461a      	mov	r2, r3
 800800e:	2300      	movs	r3, #0
 8008010:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008012:	4a18      	ldr	r2, [pc, #96]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008016:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d04b      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008022:	f7fb fc7b 	bl	800391c <HAL_GetTick>
 8008026:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008028:	e00a      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800802a:	f7fb fc77 	bl	800391c <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008038:	4293      	cmp	r3, r2
 800803a:	d901      	bls.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e180      	b.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8008040:	2302      	movs	r3, #2
 8008042:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008046:	fa93 f3a3 	rbit	r3, r3
 800804a:	627b      	str	r3, [r7, #36]	@ 0x24
 800804c:	2302      	movs	r3, #2
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	fa93 f3a3 	rbit	r3, r3
 8008056:	61fb      	str	r3, [r7, #28]
  return result;
 8008058:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800805a:	fab3 f383 	clz	r3, r3
 800805e:	b2db      	uxtb	r3, r3
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f043 0302 	orr.w	r3, r3, #2
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b02      	cmp	r3, #2
 800806c:	d108      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800806e:	4b01      	ldr	r3, [pc, #4]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008070:	6a1b      	ldr	r3, [r3, #32]
 8008072:	e00d      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008074:	40021000 	.word	0x40021000
 8008078:	40007000 	.word	0x40007000
 800807c:	10908100 	.word	0x10908100
 8008080:	2302      	movs	r3, #2
 8008082:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	fa93 f3a3 	rbit	r3, r3
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	4b9a      	ldr	r3, [pc, #616]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800808e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008090:	2202      	movs	r2, #2
 8008092:	613a      	str	r2, [r7, #16]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	fa92 f2a2 	rbit	r2, r2
 800809a:	60fa      	str	r2, [r7, #12]
  return result;
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	fab2 f282 	clz	r2, r2
 80080a2:	b2d2      	uxtb	r2, r2
 80080a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080a8:	b2d2      	uxtb	r2, r2
 80080aa:	f002 021f 	and.w	r2, r2, #31
 80080ae:	2101      	movs	r1, #1
 80080b0:	fa01 f202 	lsl.w	r2, r1, r2
 80080b4:	4013      	ands	r3, r2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0b7      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80080ba:	4b8f      	ldr	r3, [pc, #572]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	498c      	ldr	r1, [pc, #560]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80080cc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d105      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80080d4:	4b88      	ldr	r3, [pc, #544]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	4a87      	ldr	r2, [pc, #540]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d008      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80080ec:	4b82      	ldr	r3, [pc, #520]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f0:	f023 0203 	bic.w	r2, r3, #3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	497f      	ldr	r1, [pc, #508]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800810a:	4b7b      	ldr	r3, [pc, #492]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800810c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	4978      	ldr	r1, [pc, #480]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008118:	4313      	orrs	r3, r2
 800811a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 0304 	and.w	r3, r3, #4
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008128:	4b73      	ldr	r3, [pc, #460]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800812a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800812c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	4970      	ldr	r1, [pc, #448]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008136:	4313      	orrs	r3, r2
 8008138:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b00      	cmp	r3, #0
 8008144:	d008      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008146:	4b6c      	ldr	r3, [pc, #432]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800814a:	f023 0210 	bic.w	r2, r3, #16
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	4969      	ldr	r1, [pc, #420]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008154:	4313      	orrs	r3, r2
 8008156:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008164:	4b64      	ldr	r3, [pc, #400]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008170:	4961      	ldr	r1, [pc, #388]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008172:	4313      	orrs	r3, r2
 8008174:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008182:	4b5d      	ldr	r3, [pc, #372]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008186:	f023 0220 	bic.w	r2, r3, #32
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	495a      	ldr	r1, [pc, #360]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008190:	4313      	orrs	r3, r2
 8008192:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081a0:	4b55      	ldr	r3, [pc, #340]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081a4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ac:	4952      	ldr	r1, [pc, #328]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0308 	and.w	r3, r3, #8
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d008      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081be:	4b4e      	ldr	r3, [pc, #312]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	494b      	ldr	r1, [pc, #300]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0310 	and.w	r3, r3, #16
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d008      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081dc:	4b46      	ldr	r3, [pc, #280]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	4943      	ldr	r1, [pc, #268]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d008      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081fa:	4b3f      	ldr	r3, [pc, #252]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008206:	493c      	ldr	r1, [pc, #240]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008208:	4313      	orrs	r3, r2
 800820a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008214:	2b00      	cmp	r3, #0
 8008216:	d008      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008218:	4b37      	ldr	r3, [pc, #220]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	4934      	ldr	r1, [pc, #208]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008226:	4313      	orrs	r3, r2
 8008228:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008236:	4b30      	ldr	r3, [pc, #192]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008242:	492d      	ldr	r1, [pc, #180]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008244:	4313      	orrs	r3, r2
 8008246:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d008      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008254:	4b28      	ldr	r3, [pc, #160]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008258:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008260:	4925      	ldr	r1, [pc, #148]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008262:	4313      	orrs	r3, r2
 8008264:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d008      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008272:	4b21      	ldr	r3, [pc, #132]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008276:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	491e      	ldr	r1, [pc, #120]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008280:	4313      	orrs	r3, r2
 8008282:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800828c:	2b00      	cmp	r3, #0
 800828e:	d008      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8008290:	4b19      	ldr	r3, [pc, #100]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8008292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008294:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800829c:	4916      	ldr	r1, [pc, #88]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d008      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80082ae:	4b12      	ldr	r3, [pc, #72]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80082b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082ba:	490f      	ldr	r1, [pc, #60]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d008      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80082cc:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80082ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d8:	4907      	ldr	r1, [pc, #28]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00c      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80082ea:	4b03      	ldr	r3, [pc, #12]	@ (80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80082ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ee:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	e002      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80082f6:	bf00      	nop
 80082f8:	40021000 	.word	0x40021000
 80082fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082fe:	4913      	ldr	r1, [pc, #76]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008300:	4313      	orrs	r3, r2
 8008302:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d008      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8008310:	4b0e      	ldr	r3, [pc, #56]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008314:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800831c:	490b      	ldr	r1, [pc, #44]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800831e:	4313      	orrs	r3, r2
 8008320:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d008      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800832e:	4b07      	ldr	r3, [pc, #28]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8008330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008332:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800833a:	4904      	ldr	r1, [pc, #16]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800833c:	4313      	orrs	r3, r2
 800833e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3748      	adds	r7, #72	@ 0x48
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40021000 	.word	0x40021000

08008350 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d101      	bne.n	8008362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e09d      	b.n	800849e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008366:	2b00      	cmp	r3, #0
 8008368:	d108      	bne.n	800837c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008372:	d009      	beq.n	8008388 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	61da      	str	r2, [r3, #28]
 800837a:	e005      	b.n	8008388 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d106      	bne.n	80083a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7fa ff86 	bl	80032b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083c8:	d902      	bls.n	80083d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	e002      	b.n	80083d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80083d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80083d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80083de:	d007      	beq.n	80083f0 <HAL_SPI_Init+0xa0>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80083e8:	d002      	beq.n	80083f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	431a      	orrs	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008432:	ea42 0103 	orr.w	r1, r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	0c1b      	lsrs	r3, r3, #16
 800844c:	f003 0204 	and.w	r2, r3, #4
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	f003 0310 	and.w	r3, r3, #16
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800845e:	f003 0308 	and.w	r3, r3, #8
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800846c:	ea42 0103 	orr.w	r1, r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	69da      	ldr	r2, [r3, #28]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800848c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b088      	sub	sp, #32
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	60f8      	str	r0, [r7, #12]
 80084ae:	60b9      	str	r1, [r7, #8]
 80084b0:	603b      	str	r3, [r7, #0]
 80084b2:	4613      	mov	r3, r2
 80084b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d101      	bne.n	80084c8 <HAL_SPI_Transmit+0x22>
 80084c4:	2302      	movs	r3, #2
 80084c6:	e15f      	b.n	8008788 <HAL_SPI_Transmit+0x2e2>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084d0:	f7fb fa24 	bl	800391c <HAL_GetTick>
 80084d4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084d6:	88fb      	ldrh	r3, [r7, #6]
 80084d8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d002      	beq.n	80084ec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80084e6:	2302      	movs	r3, #2
 80084e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084ea:	e148      	b.n	800877e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d002      	beq.n	80084f8 <HAL_SPI_Transmit+0x52>
 80084f2:	88fb      	ldrh	r3, [r7, #6]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084fc:	e13f      	b.n	800877e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2203      	movs	r2, #3
 8008502:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	88fa      	ldrh	r2, [r7, #6]
 800851c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2200      	movs	r2, #0
 8008538:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008548:	d10f      	bne.n	800856a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008558:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008568:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008574:	2b40      	cmp	r3, #64	@ 0x40
 8008576:	d007      	beq.n	8008588 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008586:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008590:	d94f      	bls.n	8008632 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <HAL_SPI_Transmit+0xfa>
 800859a:	8afb      	ldrh	r3, [r7, #22]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d142      	bne.n	8008626 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a4:	881a      	ldrh	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b0:	1c9a      	adds	r2, r3, #2
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085c4:	e02f      	b.n	8008626 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d112      	bne.n	80085fa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d8:	881a      	ldrh	r2, [r3, #0]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e4:	1c9a      	adds	r2, r3, #2
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3b01      	subs	r3, #1
 80085f2:	b29a      	uxth	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085f8:	e015      	b.n	8008626 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085fa:	f7fb f98f 	bl	800391c <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d803      	bhi.n	8008612 <HAL_SPI_Transmit+0x16c>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d102      	bne.n	8008618 <HAL_SPI_Transmit+0x172>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008618:	2303      	movs	r3, #3
 800861a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008624:	e0ab      	b.n	800877e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1ca      	bne.n	80085c6 <HAL_SPI_Transmit+0x120>
 8008630:	e080      	b.n	8008734 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d002      	beq.n	8008640 <HAL_SPI_Transmit+0x19a>
 800863a:	8afb      	ldrh	r3, [r7, #22]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d174      	bne.n	800872a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b01      	cmp	r3, #1
 8008648:	d912      	bls.n	8008670 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800864e:	881a      	ldrh	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865a:	1c9a      	adds	r2, r3, #2
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008664:	b29b      	uxth	r3, r3
 8008666:	3b02      	subs	r3, #2
 8008668:	b29a      	uxth	r2, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800866e:	e05c      	b.n	800872a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	330c      	adds	r3, #12
 800867a:	7812      	ldrb	r2, [r2, #0]
 800867c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008682:	1c5a      	adds	r2, r3, #1
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800868c:	b29b      	uxth	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	b29a      	uxth	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008696:	e048      	b.n	800872a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d12b      	bne.n	80086fe <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d912      	bls.n	80086d6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086b4:	881a      	ldrh	r2, [r3, #0]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c0:	1c9a      	adds	r2, r3, #2
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	3b02      	subs	r3, #2
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086d4:	e029      	b.n	800872a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	330c      	adds	r3, #12
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e8:	1c5a      	adds	r2, r3, #1
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80086fc:	e015      	b.n	800872a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086fe:	f7fb f90d 	bl	800391c <HAL_GetTick>
 8008702:	4602      	mov	r2, r0
 8008704:	69bb      	ldr	r3, [r7, #24]
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	429a      	cmp	r2, r3
 800870c:	d803      	bhi.n	8008716 <HAL_SPI_Transmit+0x270>
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008714:	d102      	bne.n	800871c <HAL_SPI_Transmit+0x276>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d106      	bne.n	800872a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800871c:	2303      	movs	r3, #3
 800871e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008728:	e029      	b.n	800877e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800872e:	b29b      	uxth	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1b1      	bne.n	8008698 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	6839      	ldr	r1, [r7, #0]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 fcf9 	bl	8009130 <SPI_EndRxTxTransaction>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008752:	2300      	movs	r3, #0
 8008754:	613b      	str	r3, [r7, #16]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	613b      	str	r3, [r7, #16]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	77fb      	strb	r3, [r7, #31]
 8008774:	e003      	b.n	800877e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008786:	7ffb      	ldrb	r3, [r7, #31]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3720      	adds	r7, #32
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b088      	sub	sp, #32
 8008794:	af02      	add	r7, sp, #8
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	603b      	str	r3, [r7, #0]
 800879c:	4613      	mov	r3, r2
 800879e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80087a0:	2300      	movs	r3, #0
 80087a2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d002      	beq.n	80087b6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80087b0:	2302      	movs	r3, #2
 80087b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80087b4:	e11a      	b.n	80089ec <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80087be:	d112      	bne.n	80087e6 <HAL_SPI_Receive+0x56>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10e      	bne.n	80087e6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2204      	movs	r2, #4
 80087cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80087d0:	88fa      	ldrh	r2, [r7, #6]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	4613      	mov	r3, r2
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	68b9      	ldr	r1, [r7, #8]
 80087dc:	68f8      	ldr	r0, [r7, #12]
 80087de:	f000 f90e 	bl	80089fe <HAL_SPI_TransmitReceive>
 80087e2:	4603      	mov	r3, r0
 80087e4:	e107      	b.n	80089f6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d101      	bne.n	80087f4 <HAL_SPI_Receive+0x64>
 80087f0:	2302      	movs	r3, #2
 80087f2:	e100      	b.n	80089f6 <HAL_SPI_Receive+0x266>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80087fc:	f7fb f88e 	bl	800391c <HAL_GetTick>
 8008800:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d002      	beq.n	800880e <HAL_SPI_Receive+0x7e>
 8008808:	88fb      	ldrh	r3, [r7, #6]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008812:	e0eb      	b.n	80089ec <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2204      	movs	r2, #4
 8008818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	88fa      	ldrh	r2, [r7, #6]
 800882c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	88fa      	ldrh	r2, [r7, #6]
 8008834:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2200      	movs	r2, #0
 800884e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800885e:	d908      	bls.n	8008872 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800886e:	605a      	str	r2, [r3, #4]
 8008870:	e007      	b.n	8008882 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008880:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800888a:	d10f      	bne.n	80088ac <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800889a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80088aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088b6:	2b40      	cmp	r3, #64	@ 0x40
 80088b8:	d007      	beq.n	80088ca <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80088c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80088d2:	d86f      	bhi.n	80089b4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80088d4:	e034      	b.n	8008940 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	689b      	ldr	r3, [r3, #8]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d117      	bne.n	8008914 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f103 020c 	add.w	r2, r3, #12
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f0:	7812      	ldrb	r2, [r2, #0]
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008906:	b29b      	uxth	r3, r3
 8008908:	3b01      	subs	r3, #1
 800890a:	b29a      	uxth	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008912:	e015      	b.n	8008940 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008914:	f7fb f802 	bl	800391c <HAL_GetTick>
 8008918:	4602      	mov	r2, r0
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	1ad3      	subs	r3, r2, r3
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	429a      	cmp	r2, r3
 8008922:	d803      	bhi.n	800892c <HAL_SPI_Receive+0x19c>
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d102      	bne.n	8008932 <HAL_SPI_Receive+0x1a2>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800893e:	e055      	b.n	80089ec <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008946:	b29b      	uxth	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1c4      	bne.n	80088d6 <HAL_SPI_Receive+0x146>
 800894c:	e038      	b.n	80089c0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 0301 	and.w	r3, r3, #1
 8008958:	2b01      	cmp	r3, #1
 800895a:	d115      	bne.n	8008988 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008966:	b292      	uxth	r2, r2
 8008968:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896e:	1c9a      	adds	r2, r3, #2
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800897a:	b29b      	uxth	r3, r3
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008986:	e015      	b.n	80089b4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008988:	f7fa ffc8 	bl	800391c <HAL_GetTick>
 800898c:	4602      	mov	r2, r0
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	429a      	cmp	r2, r3
 8008996:	d803      	bhi.n	80089a0 <HAL_SPI_Receive+0x210>
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800899e:	d102      	bne.n	80089a6 <HAL_SPI_Receive+0x216>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2201      	movs	r2, #1
 80089ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80089b2:	e01b      	b.n	80089ec <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1c6      	bne.n	800894e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 fb5b 	bl	8009080 <SPI_EndRxTransaction>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	75fb      	strb	r3, [r7, #23]
 80089e2:	e003      	b.n	80089ec <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3718      	adds	r7, #24
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b08a      	sub	sp, #40	@ 0x28
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	60f8      	str	r0, [r7, #12]
 8008a06:	60b9      	str	r1, [r7, #8]
 8008a08:	607a      	str	r2, [r7, #4]
 8008a0a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_SPI_TransmitReceive+0x26>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e20a      	b.n	8008e3a <HAL_SPI_TransmitReceive+0x43c>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a2c:	f7fa ff76 	bl	800391c <HAL_GetTick>
 8008a30:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a38:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008a40:	887b      	ldrh	r3, [r7, #2]
 8008a42:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008a44:	887b      	ldrh	r3, [r7, #2]
 8008a46:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008a48:	7efb      	ldrb	r3, [r7, #27]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d00e      	beq.n	8008a6c <HAL_SPI_TransmitReceive+0x6e>
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a54:	d106      	bne.n	8008a64 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <HAL_SPI_TransmitReceive+0x66>
 8008a5e:	7efb      	ldrb	r3, [r7, #27]
 8008a60:	2b04      	cmp	r3, #4
 8008a62:	d003      	beq.n	8008a6c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008a64:	2302      	movs	r3, #2
 8008a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008a6a:	e1e0      	b.n	8008e2e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <HAL_SPI_TransmitReceive+0x80>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d002      	beq.n	8008a7e <HAL_SPI_TransmitReceive+0x80>
 8008a78:	887b      	ldrh	r3, [r7, #2]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d103      	bne.n	8008a86 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008a84:	e1d3      	b.n	8008e2e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d003      	beq.n	8008a9a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2205      	movs	r2, #5
 8008a96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	887a      	ldrh	r2, [r7, #2]
 8008aaa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	887a      	ldrh	r2, [r7, #2]
 8008ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	887a      	ldrh	r2, [r7, #2]
 8008ac0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	887a      	ldrh	r2, [r7, #2]
 8008ac6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008adc:	d802      	bhi.n	8008ae4 <HAL_SPI_TransmitReceive+0xe6>
 8008ade:	8a3b      	ldrh	r3, [r7, #16]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d908      	bls.n	8008af6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008af2:	605a      	str	r2, [r3, #4]
 8008af4:	e007      	b.n	8008b06 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008b04:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b10:	2b40      	cmp	r3, #64	@ 0x40
 8008b12:	d007      	beq.n	8008b24 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b2c:	f240 8081 	bls.w	8008c32 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <HAL_SPI_TransmitReceive+0x140>
 8008b38:	8a7b      	ldrh	r3, [r7, #18]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d16d      	bne.n	8008c1a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b42:	881a      	ldrh	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4e:	1c9a      	adds	r2, r3, #2
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008b62:	e05a      	b.n	8008c1a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	d11b      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x1ac>
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d016      	beq.n	8008baa <HAL_SPI_TransmitReceive+0x1ac>
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d113      	bne.n	8008baa <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b86:	881a      	ldrh	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b92:	1c9a      	adds	r2, r3, #2
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d11c      	bne.n	8008bf2 <HAL_SPI_TransmitReceive+0x1f4>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d016      	beq.n	8008bf2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68da      	ldr	r2, [r3, #12]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bce:	b292      	uxth	r2, r2
 8008bd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	1c9a      	adds	r2, r3, #2
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	3b01      	subs	r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008bf2:	f7fa fe93 	bl	800391c <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d80b      	bhi.n	8008c1a <HAL_SPI_TransmitReceive+0x21c>
 8008c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c08:	d007      	beq.n	8008c1a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008c18:	e109      	b.n	8008e2e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d19f      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x166>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d199      	bne.n	8008b64 <HAL_SPI_TransmitReceive+0x166>
 8008c30:	e0e3      	b.n	8008dfa <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_SPI_TransmitReceive+0x244>
 8008c3a:	8a7b      	ldrh	r3, [r7, #18]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	f040 80cf 	bne.w	8008de0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d912      	bls.n	8008c72 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c50:	881a      	ldrh	r2, [r3, #0]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5c:	1c9a      	adds	r2, r3, #2
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	3b02      	subs	r3, #2
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c70:	e0b6      	b.n	8008de0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	330c      	adds	r3, #12
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	1c5a      	adds	r2, r3, #1
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008c98:	e0a2      	b.n	8008de0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f003 0302 	and.w	r3, r3, #2
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d134      	bne.n	8008d12 <HAL_SPI_TransmitReceive+0x314>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d02f      	beq.n	8008d12 <HAL_SPI_TransmitReceive+0x314>
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d12c      	bne.n	8008d12 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d912      	bls.n	8008ce8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc6:	881a      	ldrh	r2, [r3, #0]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd2:	1c9a      	adds	r2, r3, #2
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	3b02      	subs	r3, #2
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ce6:	e012      	b.n	8008d0e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	7812      	ldrb	r2, [r2, #0]
 8008cf4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d148      	bne.n	8008db2 <HAL_SPI_TransmitReceive+0x3b4>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d042      	beq.n	8008db2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d32:	b29b      	uxth	r3, r3
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d923      	bls.n	8008d80 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68da      	ldr	r2, [r3, #12]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d42:	b292      	uxth	r2, r2
 8008d44:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d4a:	1c9a      	adds	r2, r3, #2
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	3b02      	subs	r3, #2
 8008d5a:	b29a      	uxth	r2, r3
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d81f      	bhi.n	8008dae <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008d7c:	605a      	str	r2, [r3, #4]
 8008d7e:	e016      	b.n	8008dae <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f103 020c 	add.w	r2, r3, #12
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8c:	7812      	ldrb	r2, [r2, #0]
 8008d8e:	b2d2      	uxtb	r2, r2
 8008d90:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008dae:	2301      	movs	r3, #1
 8008db0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008db2:	f7fa fdb3 	bl	800391c <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d803      	bhi.n	8008dca <HAL_SPI_TransmitReceive+0x3cc>
 8008dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc8:	d102      	bne.n	8008dd0 <HAL_SPI_TransmitReceive+0x3d2>
 8008dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008dde:	e026      	b.n	8008e2e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f47f af57 	bne.w	8008c9a <HAL_SPI_TransmitReceive+0x29c>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f47f af50 	bne.w	8008c9a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008dfa:	69fa      	ldr	r2, [r7, #28]
 8008dfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 f996 	bl	8009130 <SPI_EndRxTxTransaction>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d005      	beq.n	8008e16 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2220      	movs	r2, #32
 8008e14:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008e24:	e003      	b.n	8008e2e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008e36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3728      	adds	r7, #40	@ 0x28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b088      	sub	sp, #32
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	4613      	mov	r3, r2
 8008e52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008e54:	f7fa fd62 	bl	800391c <HAL_GetTick>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5c:	1a9b      	subs	r3, r3, r2
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	4413      	add	r3, r2
 8008e62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008e64:	f7fa fd5a 	bl	800391c <HAL_GetTick>
 8008e68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008e6a:	4b39      	ldr	r3, [pc, #228]	@ (8008f50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	015b      	lsls	r3, r3, #5
 8008e70:	0d1b      	lsrs	r3, r3, #20
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	fb02 f303 	mul.w	r3, r2, r3
 8008e78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e7a:	e054      	b.n	8008f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e82:	d050      	beq.n	8008f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008e84:	f7fa fd4a 	bl	800391c <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	69fa      	ldr	r2, [r7, #28]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d902      	bls.n	8008e9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d13d      	bne.n	8008f16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008eb2:	d111      	bne.n	8008ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ebc:	d004      	beq.n	8008ec8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ec6:	d107      	bne.n	8008ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008edc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ee0:	d10f      	bne.n	8008f02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ef0:	601a      	str	r2, [r3, #0]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e017      	b.n	8008f46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d101      	bne.n	8008f20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689a      	ldr	r2, [r3, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	bf0c      	ite	eq
 8008f36:	2301      	moveq	r3, #1
 8008f38:	2300      	movne	r3, #0
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d19b      	bne.n	8008e7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3720      	adds	r7, #32
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	20000000 	.word	0x20000000

08008f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b08a      	sub	sp, #40	@ 0x28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008f66:	f7fa fcd9 	bl	800391c <HAL_GetTick>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	4413      	add	r3, r2
 8008f74:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008f76:	f7fa fcd1 	bl	800391c <HAL_GetTick>
 8008f7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	330c      	adds	r3, #12
 8008f82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008f84:	4b3d      	ldr	r3, [pc, #244]	@ (800907c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	00da      	lsls	r2, r3, #3
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	0d1b      	lsrs	r3, r3, #20
 8008f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f96:	fb02 f303 	mul.w	r3, r2, r3
 8008f9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008f9c:	e060      	b.n	8009060 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008fa4:	d107      	bne.n	8008fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008fb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fbc:	d050      	beq.n	8009060 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008fbe:	f7fa fcad 	bl	800391c <HAL_GetTick>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	6a3b      	ldr	r3, [r7, #32]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d902      	bls.n	8008fd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d13d      	bne.n	8009050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008fe2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008fec:	d111      	bne.n	8009012 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ff6:	d004      	beq.n	8009002 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009000:	d107      	bne.n	8009012 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009010:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800901a:	d10f      	bne.n	800903c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800903a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800904c:	2303      	movs	r3, #3
 800904e:	e010      	b.n	8009072 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	3b01      	subs	r3, #1
 800905e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	4013      	ands	r3, r2
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d196      	bne.n	8008f9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3728      	adds	r7, #40	@ 0x28
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20000000 	.word	0x20000000

08009080 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af02      	add	r7, sp, #8
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009094:	d111      	bne.n	80090ba <SPI_EndRxTransaction+0x3a>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800909e:	d004      	beq.n	80090aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090a8:	d107      	bne.n	80090ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	2200      	movs	r2, #0
 80090c2:	2180      	movs	r1, #128	@ 0x80
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7ff febd 	bl	8008e44 <SPI_WaitFlagStateUntilTimeout>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d007      	beq.n	80090e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090d4:	f043 0220 	orr.w	r2, r3, #32
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80090dc:	2303      	movs	r3, #3
 80090de:	e023      	b.n	8009128 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80090e8:	d11d      	bne.n	8009126 <SPI_EndRxTransaction+0xa6>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80090f2:	d004      	beq.n	80090fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090fc:	d113      	bne.n	8009126 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2200      	movs	r2, #0
 8009106:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff ff22 	bl	8008f54 <SPI_WaitFifoStateUntilTimeout>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d007      	beq.n	8009126 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800911a:	f043 0220 	orr.w	r2, r3, #32
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009122:	2303      	movs	r3, #3
 8009124:	e000      	b.n	8009128 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2200      	movs	r2, #0
 8009144:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7ff ff03 	bl	8008f54 <SPI_WaitFifoStateUntilTimeout>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d007      	beq.n	8009164 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009158:	f043 0220 	orr.w	r2, r3, #32
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e027      	b.n	80091b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	2200      	movs	r2, #0
 800916c:	2180      	movs	r1, #128	@ 0x80
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f7ff fe68 	bl	8008e44 <SPI_WaitFlagStateUntilTimeout>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d007      	beq.n	800918a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800917e:	f043 0220 	orr.w	r2, r3, #32
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e014      	b.n	80091b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2200      	movs	r2, #0
 8009192:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f7ff fedc 	bl	8008f54 <SPI_WaitFifoStateUntilTimeout>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d007      	beq.n	80091b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091a6:	f043 0220 	orr.w	r2, r3, #32
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e000      	b.n	80091b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e049      	b.n	8009262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d106      	bne.n	80091e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7fa f8aa 	bl	800333c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3304      	adds	r3, #4
 80091f8:	4619      	mov	r1, r3
 80091fa:	4610      	mov	r0, r2
 80091fc:	f000 fdec 	bl	8009dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
	...

0800926c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800926c:	b480      	push	{r7}
 800926e:	b085      	sub	sp, #20
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b01      	cmp	r3, #1
 800927e:	d001      	beq.n	8009284 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e04f      	b.n	8009324 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68da      	ldr	r2, [r3, #12]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f042 0201 	orr.w	r2, r2, #1
 800929a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a23      	ldr	r2, [pc, #140]	@ (8009330 <HAL_TIM_Base_Start_IT+0xc4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d01d      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092ae:	d018      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4a1f      	ldr	r2, [pc, #124]	@ (8009334 <HAL_TIM_Base_Start_IT+0xc8>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d013      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a1e      	ldr	r2, [pc, #120]	@ (8009338 <HAL_TIM_Base_Start_IT+0xcc>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d00e      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a1c      	ldr	r2, [pc, #112]	@ (800933c <HAL_TIM_Base_Start_IT+0xd0>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d009      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009340 <HAL_TIM_Base_Start_IT+0xd4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d004      	beq.n	80092e2 <HAL_TIM_Base_Start_IT+0x76>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a19      	ldr	r2, [pc, #100]	@ (8009344 <HAL_TIM_Base_Start_IT+0xd8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d115      	bne.n	800930e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689a      	ldr	r2, [r3, #8]
 80092e8:	4b17      	ldr	r3, [pc, #92]	@ (8009348 <HAL_TIM_Base_Start_IT+0xdc>)
 80092ea:	4013      	ands	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	d015      	beq.n	8009320 <HAL_TIM_Base_Start_IT+0xb4>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092fa:	d011      	beq.n	8009320 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930c:	e008      	b.n	8009320 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f042 0201 	orr.w	r2, r2, #1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	e000      	b.n	8009322 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009320:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	40012c00 	.word	0x40012c00
 8009334:	40000400 	.word	0x40000400
 8009338:	40000800 	.word	0x40000800
 800933c:	40013400 	.word	0x40013400
 8009340:	40014000 	.word	0x40014000
 8009344:	40015000 	.word	0x40015000
 8009348:	00010007 	.word	0x00010007

0800934c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b082      	sub	sp, #8
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d101      	bne.n	800935e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e049      	b.n	80093f2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b00      	cmp	r3, #0
 8009368:	d106      	bne.n	8009378 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f7fa f81a 	bl	80033ac <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2202      	movs	r2, #2
 800937c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3304      	adds	r3, #4
 8009388:	4619      	mov	r1, r3
 800938a:	4610      	mov	r0, r2
 800938c:	f000 fd24 	bl	8009dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093fa:	b580      	push	{r7, lr}
 80093fc:	b082      	sub	sp, #8
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e049      	b.n	80094a0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	d106      	bne.n	8009426 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 f841 	bl	80094a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2202      	movs	r2, #2
 800942a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	3304      	adds	r3, #4
 8009436:	4619      	mov	r1, r3
 8009438:	4610      	mov	r0, r2
 800943a:	f000 fccd 	bl	8009dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2201      	movs	r2, #1
 800949a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094b0:	bf00      	nop
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr

080094bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d109      	bne.n	80094e0 <HAL_TIM_PWM_Start+0x24>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	bf14      	ite	ne
 80094d8:	2301      	movne	r3, #1
 80094da:	2300      	moveq	r3, #0
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	e03c      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d109      	bne.n	80094fa <HAL_TIM_PWM_Start+0x3e>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80094ec:	b2db      	uxtb	r3, r3
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	bf14      	ite	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	2300      	moveq	r3, #0
 80094f6:	b2db      	uxtb	r3, r3
 80094f8:	e02f      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d109      	bne.n	8009514 <HAL_TIM_PWM_Start+0x58>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b01      	cmp	r3, #1
 800950a:	bf14      	ite	ne
 800950c:	2301      	movne	r3, #1
 800950e:	2300      	moveq	r3, #0
 8009510:	b2db      	uxtb	r3, r3
 8009512:	e022      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b0c      	cmp	r3, #12
 8009518:	d109      	bne.n	800952e <HAL_TIM_PWM_Start+0x72>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b01      	cmp	r3, #1
 8009524:	bf14      	ite	ne
 8009526:	2301      	movne	r3, #1
 8009528:	2300      	moveq	r3, #0
 800952a:	b2db      	uxtb	r3, r3
 800952c:	e015      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b10      	cmp	r3, #16
 8009532:	d109      	bne.n	8009548 <HAL_TIM_PWM_Start+0x8c>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	bf14      	ite	ne
 8009540:	2301      	movne	r3, #1
 8009542:	2300      	moveq	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	e008      	b.n	800955a <HAL_TIM_PWM_Start+0x9e>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800954e:	b2db      	uxtb	r3, r3
 8009550:	2b01      	cmp	r3, #1
 8009552:	bf14      	ite	ne
 8009554:	2301      	movne	r3, #1
 8009556:	2300      	moveq	r3, #0
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e0a1      	b.n	80096a6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <HAL_TIM_PWM_Start+0xb6>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009570:	e023      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b04      	cmp	r3, #4
 8009576:	d104      	bne.n	8009582 <HAL_TIM_PWM_Start+0xc6>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009580:	e01b      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	2b08      	cmp	r3, #8
 8009586:	d104      	bne.n	8009592 <HAL_TIM_PWM_Start+0xd6>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009590:	e013      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	2b0c      	cmp	r3, #12
 8009596:	d104      	bne.n	80095a2 <HAL_TIM_PWM_Start+0xe6>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2202      	movs	r2, #2
 800959c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80095a0:	e00b      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b10      	cmp	r3, #16
 80095a6:	d104      	bne.n	80095b2 <HAL_TIM_PWM_Start+0xf6>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80095b0:	e003      	b.n	80095ba <HAL_TIM_PWM_Start+0xfe>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2201      	movs	r2, #1
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	4618      	mov	r0, r3
 80095c4:	f001 f852 	bl	800a66c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a38      	ldr	r2, [pc, #224]	@ (80096b0 <HAL_TIM_PWM_Start+0x1f4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d018      	beq.n	8009604 <HAL_TIM_PWM_Start+0x148>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a37      	ldr	r2, [pc, #220]	@ (80096b4 <HAL_TIM_PWM_Start+0x1f8>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d013      	beq.n	8009604 <HAL_TIM_PWM_Start+0x148>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a35      	ldr	r2, [pc, #212]	@ (80096b8 <HAL_TIM_PWM_Start+0x1fc>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00e      	beq.n	8009604 <HAL_TIM_PWM_Start+0x148>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a34      	ldr	r2, [pc, #208]	@ (80096bc <HAL_TIM_PWM_Start+0x200>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d009      	beq.n	8009604 <HAL_TIM_PWM_Start+0x148>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a32      	ldr	r2, [pc, #200]	@ (80096c0 <HAL_TIM_PWM_Start+0x204>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d004      	beq.n	8009604 <HAL_TIM_PWM_Start+0x148>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a31      	ldr	r2, [pc, #196]	@ (80096c4 <HAL_TIM_PWM_Start+0x208>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d101      	bne.n	8009608 <HAL_TIM_PWM_Start+0x14c>
 8009604:	2301      	movs	r3, #1
 8009606:	e000      	b.n	800960a <HAL_TIM_PWM_Start+0x14e>
 8009608:	2300      	movs	r3, #0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d007      	beq.n	800961e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800961c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a23      	ldr	r2, [pc, #140]	@ (80096b0 <HAL_TIM_PWM_Start+0x1f4>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d01d      	beq.n	8009664 <HAL_TIM_PWM_Start+0x1a8>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009630:	d018      	beq.n	8009664 <HAL_TIM_PWM_Start+0x1a8>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a24      	ldr	r2, [pc, #144]	@ (80096c8 <HAL_TIM_PWM_Start+0x20c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d013      	beq.n	8009664 <HAL_TIM_PWM_Start+0x1a8>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a22      	ldr	r2, [pc, #136]	@ (80096cc <HAL_TIM_PWM_Start+0x210>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00e      	beq.n	8009664 <HAL_TIM_PWM_Start+0x1a8>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a1a      	ldr	r2, [pc, #104]	@ (80096b4 <HAL_TIM_PWM_Start+0x1f8>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d009      	beq.n	8009664 <HAL_TIM_PWM_Start+0x1a8>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a18      	ldr	r2, [pc, #96]	@ (80096b8 <HAL_TIM_PWM_Start+0x1fc>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d004      	beq.n	8009664 <HAL_TIM_PWM_Start+0x1a8>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a19      	ldr	r2, [pc, #100]	@ (80096c4 <HAL_TIM_PWM_Start+0x208>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d115      	bne.n	8009690 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	689a      	ldr	r2, [r3, #8]
 800966a:	4b19      	ldr	r3, [pc, #100]	@ (80096d0 <HAL_TIM_PWM_Start+0x214>)
 800966c:	4013      	ands	r3, r2
 800966e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b06      	cmp	r3, #6
 8009674:	d015      	beq.n	80096a2 <HAL_TIM_PWM_Start+0x1e6>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800967c:	d011      	beq.n	80096a2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f042 0201 	orr.w	r2, r2, #1
 800968c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800968e:	e008      	b.n	80096a2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 0201 	orr.w	r2, r2, #1
 800969e:	601a      	str	r2, [r3, #0]
 80096a0:	e000      	b.n	80096a4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40012c00 	.word	0x40012c00
 80096b4:	40013400 	.word	0x40013400
 80096b8:	40014000 	.word	0x40014000
 80096bc:	40014400 	.word	0x40014400
 80096c0:	40014800 	.word	0x40014800
 80096c4:	40015000 	.word	0x40015000
 80096c8:	40000400 	.word	0x40000400
 80096cc:	40000800 	.word	0x40000800
 80096d0:	00010007 	.word	0x00010007

080096d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d020      	beq.n	8009738 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d01b      	beq.n	8009738 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f06f 0202 	mvn.w	r2, #2
 8009708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2201      	movs	r2, #1
 800970e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	f003 0303 	and.w	r3, r3, #3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fb3b 	bl	8009d9a <HAL_TIM_IC_CaptureCallback>
 8009724:	e005      	b.n	8009732 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fb2d 	bl	8009d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fb3e 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f003 0304 	and.w	r3, r3, #4
 800973e:	2b00      	cmp	r3, #0
 8009740:	d020      	beq.n	8009784 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f003 0304 	and.w	r3, r3, #4
 8009748:	2b00      	cmp	r3, #0
 800974a:	d01b      	beq.n	8009784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f06f 0204 	mvn.w	r2, #4
 8009754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2202      	movs	r2, #2
 800975a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 fb15 	bl	8009d9a <HAL_TIM_IC_CaptureCallback>
 8009770:	e005      	b.n	800977e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 fb07 	bl	8009d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fb18 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d020      	beq.n	80097d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d01b      	beq.n	80097d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f06f 0208 	mvn.w	r2, #8
 80097a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2204      	movs	r2, #4
 80097a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	69db      	ldr	r3, [r3, #28]
 80097ae:	f003 0303 	and.w	r3, r3, #3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 faef 	bl	8009d9a <HAL_TIM_IC_CaptureCallback>
 80097bc:	e005      	b.n	80097ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 fae1 	bl	8009d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 faf2 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d020      	beq.n	800981c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f003 0310 	and.w	r3, r3, #16
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d01b      	beq.n	800981c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f06f 0210 	mvn.w	r2, #16
 80097ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2208      	movs	r2, #8
 80097f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fac9 	bl	8009d9a <HAL_TIM_IC_CaptureCallback>
 8009808:	e005      	b.n	8009816 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fabb 	bl	8009d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 facc 	bl	8009dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00c      	beq.n	8009840 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	2b00      	cmp	r3, #0
 800982e:	d007      	beq.n	8009840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f06f 0201 	mvn.w	r2, #1
 8009838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f007 fa54 	bl	8010ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00c      	beq.n	8009864 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009850:	2b00      	cmp	r3, #0
 8009852:	d007      	beq.n	8009864 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800985c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 ffc0 	bl	800a7e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00c      	beq.n	8009888 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009874:	2b00      	cmp	r3, #0
 8009876:	d007      	beq.n	8009888 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 ffb8 	bl	800a7f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	d00c      	beq.n	80098ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009898:	2b00      	cmp	r3, #0
 800989a:	d007      	beq.n	80098ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80098a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fa8b 	bl	8009dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	f003 0320 	and.w	r3, r3, #32
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00c      	beq.n	80098d0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f003 0320 	and.w	r3, r3, #32
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d007      	beq.n	80098d0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f06f 0220 	mvn.w	r2, #32
 80098c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 ff80 	bl	800a7d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d101      	bne.n	80098f6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80098f2:	2302      	movs	r3, #2
 80098f4:	e066      	b.n	80099c4 <HAL_TIM_OC_ConfigChannel+0xec>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2201      	movs	r2, #1
 80098fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2b14      	cmp	r3, #20
 8009902:	d857      	bhi.n	80099b4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009904:	a201      	add	r2, pc, #4	@ (adr r2, 800990c <HAL_TIM_OC_ConfigChannel+0x34>)
 8009906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990a:	bf00      	nop
 800990c:	08009961 	.word	0x08009961
 8009910:	080099b5 	.word	0x080099b5
 8009914:	080099b5 	.word	0x080099b5
 8009918:	080099b5 	.word	0x080099b5
 800991c:	0800996f 	.word	0x0800996f
 8009920:	080099b5 	.word	0x080099b5
 8009924:	080099b5 	.word	0x080099b5
 8009928:	080099b5 	.word	0x080099b5
 800992c:	0800997d 	.word	0x0800997d
 8009930:	080099b5 	.word	0x080099b5
 8009934:	080099b5 	.word	0x080099b5
 8009938:	080099b5 	.word	0x080099b5
 800993c:	0800998b 	.word	0x0800998b
 8009940:	080099b5 	.word	0x080099b5
 8009944:	080099b5 	.word	0x080099b5
 8009948:	080099b5 	.word	0x080099b5
 800994c:	08009999 	.word	0x08009999
 8009950:	080099b5 	.word	0x080099b5
 8009954:	080099b5 	.word	0x080099b5
 8009958:	080099b5 	.word	0x080099b5
 800995c:	080099a7 	.word	0x080099a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	68b9      	ldr	r1, [r7, #8]
 8009966:	4618      	mov	r0, r3
 8009968:	f000 fae0 	bl	8009f2c <TIM_OC1_SetConfig>
      break;
 800996c:	e025      	b.n	80099ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68b9      	ldr	r1, [r7, #8]
 8009974:	4618      	mov	r0, r3
 8009976:	f000 fb73 	bl	800a060 <TIM_OC2_SetConfig>
      break;
 800997a:	e01e      	b.n	80099ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68b9      	ldr	r1, [r7, #8]
 8009982:	4618      	mov	r0, r3
 8009984:	f000 fc00 	bl	800a188 <TIM_OC3_SetConfig>
      break;
 8009988:	e017      	b.n	80099ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68b9      	ldr	r1, [r7, #8]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fc8b 	bl	800a2ac <TIM_OC4_SetConfig>
      break;
 8009996:	e010      	b.n	80099ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68b9      	ldr	r1, [r7, #8]
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 fcf4 	bl	800a38c <TIM_OC5_SetConfig>
      break;
 80099a4:	e009      	b.n	80099ba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f000 fd57 	bl	800a460 <TIM_OC6_SetConfig>
      break;
 80099b2:	e002      	b.n	80099ba <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	75fb      	strb	r3, [r7, #23]
      break;
 80099b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	60f8      	str	r0, [r7, #12]
 80099d4:	60b9      	str	r1, [r7, #8]
 80099d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d101      	bne.n	80099ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80099e6:	2302      	movs	r3, #2
 80099e8:	e0ff      	b.n	8009bea <HAL_TIM_PWM_ConfigChannel+0x21e>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2b14      	cmp	r3, #20
 80099f6:	f200 80f0 	bhi.w	8009bda <HAL_TIM_PWM_ConfigChannel+0x20e>
 80099fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009a00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80099fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a00:	08009a55 	.word	0x08009a55
 8009a04:	08009bdb 	.word	0x08009bdb
 8009a08:	08009bdb 	.word	0x08009bdb
 8009a0c:	08009bdb 	.word	0x08009bdb
 8009a10:	08009a95 	.word	0x08009a95
 8009a14:	08009bdb 	.word	0x08009bdb
 8009a18:	08009bdb 	.word	0x08009bdb
 8009a1c:	08009bdb 	.word	0x08009bdb
 8009a20:	08009ad7 	.word	0x08009ad7
 8009a24:	08009bdb 	.word	0x08009bdb
 8009a28:	08009bdb 	.word	0x08009bdb
 8009a2c:	08009bdb 	.word	0x08009bdb
 8009a30:	08009b17 	.word	0x08009b17
 8009a34:	08009bdb 	.word	0x08009bdb
 8009a38:	08009bdb 	.word	0x08009bdb
 8009a3c:	08009bdb 	.word	0x08009bdb
 8009a40:	08009b59 	.word	0x08009b59
 8009a44:	08009bdb 	.word	0x08009bdb
 8009a48:	08009bdb 	.word	0x08009bdb
 8009a4c:	08009bdb 	.word	0x08009bdb
 8009a50:	08009b99 	.word	0x08009b99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 fa66 	bl	8009f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	699a      	ldr	r2, [r3, #24]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0208 	orr.w	r2, r2, #8
 8009a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	699a      	ldr	r2, [r3, #24]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0204 	bic.w	r2, r2, #4
 8009a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6999      	ldr	r1, [r3, #24]
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	691a      	ldr	r2, [r3, #16]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	619a      	str	r2, [r3, #24]
      break;
 8009a92:	e0a5      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68b9      	ldr	r1, [r7, #8]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f000 fae0 	bl	800a060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	699a      	ldr	r2, [r3, #24]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	6999      	ldr	r1, [r3, #24]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	021a      	lsls	r2, r3, #8
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	619a      	str	r2, [r3, #24]
      break;
 8009ad4:	e084      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68b9      	ldr	r1, [r7, #8]
 8009adc:	4618      	mov	r0, r3
 8009ade:	f000 fb53 	bl	800a188 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0208 	orr.w	r2, r2, #8
 8009af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	69da      	ldr	r2, [r3, #28]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f022 0204 	bic.w	r2, r2, #4
 8009b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69d9      	ldr	r1, [r3, #28]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	61da      	str	r2, [r3, #28]
      break;
 8009b14:	e064      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fbc5 	bl	800a2ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	69da      	ldr	r2, [r3, #28]
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69da      	ldr	r2, [r3, #28]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	69d9      	ldr	r1, [r3, #28]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	021a      	lsls	r2, r3, #8
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	61da      	str	r2, [r3, #28]
      break;
 8009b56:	e043      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 fc14 	bl	800a38c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0208 	orr.w	r2, r2, #8
 8009b72:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0204 	bic.w	r2, r2, #4
 8009b82:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	691a      	ldr	r2, [r3, #16]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009b96:	e023      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	68b9      	ldr	r1, [r7, #8]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 fc5e 	bl	800a460 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009bc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	021a      	lsls	r2, r3, #8
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8009bd8:	e002      	b.n	8009be0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8009bde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop

08009bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d101      	bne.n	8009c10 <HAL_TIM_ConfigClockSource+0x1c>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	e0b6      	b.n	8009d7e <HAL_TIM_ConfigClockSource+0x18a>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c4c:	d03e      	beq.n	8009ccc <HAL_TIM_ConfigClockSource+0xd8>
 8009c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c52:	f200 8087 	bhi.w	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c5a:	f000 8086 	beq.w	8009d6a <HAL_TIM_ConfigClockSource+0x176>
 8009c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c62:	d87f      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c64:	2b70      	cmp	r3, #112	@ 0x70
 8009c66:	d01a      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0xaa>
 8009c68:	2b70      	cmp	r3, #112	@ 0x70
 8009c6a:	d87b      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c6c:	2b60      	cmp	r3, #96	@ 0x60
 8009c6e:	d050      	beq.n	8009d12 <HAL_TIM_ConfigClockSource+0x11e>
 8009c70:	2b60      	cmp	r3, #96	@ 0x60
 8009c72:	d877      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c74:	2b50      	cmp	r3, #80	@ 0x50
 8009c76:	d03c      	beq.n	8009cf2 <HAL_TIM_ConfigClockSource+0xfe>
 8009c78:	2b50      	cmp	r3, #80	@ 0x50
 8009c7a:	d873      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c7c:	2b40      	cmp	r3, #64	@ 0x40
 8009c7e:	d058      	beq.n	8009d32 <HAL_TIM_ConfigClockSource+0x13e>
 8009c80:	2b40      	cmp	r3, #64	@ 0x40
 8009c82:	d86f      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c84:	2b30      	cmp	r3, #48	@ 0x30
 8009c86:	d064      	beq.n	8009d52 <HAL_TIM_ConfigClockSource+0x15e>
 8009c88:	2b30      	cmp	r3, #48	@ 0x30
 8009c8a:	d86b      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c8c:	2b20      	cmp	r3, #32
 8009c8e:	d060      	beq.n	8009d52 <HAL_TIM_ConfigClockSource+0x15e>
 8009c90:	2b20      	cmp	r3, #32
 8009c92:	d867      	bhi.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d05c      	beq.n	8009d52 <HAL_TIM_ConfigClockSource+0x15e>
 8009c98:	2b10      	cmp	r3, #16
 8009c9a:	d05a      	beq.n	8009d52 <HAL_TIM_ConfigClockSource+0x15e>
 8009c9c:	e062      	b.n	8009d64 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cae:	f000 fcbd 	bl	800a62c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	609a      	str	r2, [r3, #8]
      break;
 8009cca:	e04f      	b.n	8009d6c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009cdc:	f000 fca6 	bl	800a62c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cee:	609a      	str	r2, [r3, #8]
      break;
 8009cf0:	e03c      	b.n	8009d6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f000 fc1a 	bl	800a538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2150      	movs	r1, #80	@ 0x50
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f000 fc73 	bl	800a5f6 <TIM_ITRx_SetConfig>
      break;
 8009d10:	e02c      	b.n	8009d6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d1e:	461a      	mov	r2, r3
 8009d20:	f000 fc39 	bl	800a596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2160      	movs	r1, #96	@ 0x60
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f000 fc63 	bl	800a5f6 <TIM_ITRx_SetConfig>
      break;
 8009d30:	e01c      	b.n	8009d6c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d3e:	461a      	mov	r2, r3
 8009d40:	f000 fbfa 	bl	800a538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2140      	movs	r1, #64	@ 0x40
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 fc53 	bl	800a5f6 <TIM_ITRx_SetConfig>
      break;
 8009d50:	e00c      	b.n	8009d6c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	4610      	mov	r0, r2
 8009d5e:	f000 fc4a 	bl	800a5f6 <TIM_ITRx_SetConfig>
      break;
 8009d62:	e003      	b.n	8009d6c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	73fb      	strb	r3, [r7, #15]
      break;
 8009d68:	e000      	b.n	8009d6c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d8e:	bf00      	nop
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b083      	sub	sp, #12
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b083      	sub	sp, #12
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009db6:	bf00      	nop
 8009db8:	370c      	adds	r7, #12
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b083      	sub	sp, #12
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009dca:	bf00      	nop
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
	...

08009dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a48      	ldr	r2, [pc, #288]	@ (8009f0c <TIM_Base_SetConfig+0x134>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d013      	beq.n	8009e18 <TIM_Base_SetConfig+0x40>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009df6:	d00f      	beq.n	8009e18 <TIM_Base_SetConfig+0x40>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a45      	ldr	r2, [pc, #276]	@ (8009f10 <TIM_Base_SetConfig+0x138>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d00b      	beq.n	8009e18 <TIM_Base_SetConfig+0x40>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a44      	ldr	r2, [pc, #272]	@ (8009f14 <TIM_Base_SetConfig+0x13c>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d007      	beq.n	8009e18 <TIM_Base_SetConfig+0x40>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a43      	ldr	r2, [pc, #268]	@ (8009f18 <TIM_Base_SetConfig+0x140>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d003      	beq.n	8009e18 <TIM_Base_SetConfig+0x40>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a42      	ldr	r2, [pc, #264]	@ (8009f1c <TIM_Base_SetConfig+0x144>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d108      	bne.n	8009e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a37      	ldr	r2, [pc, #220]	@ (8009f0c <TIM_Base_SetConfig+0x134>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d01f      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e38:	d01b      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a34      	ldr	r2, [pc, #208]	@ (8009f10 <TIM_Base_SetConfig+0x138>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d017      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a33      	ldr	r2, [pc, #204]	@ (8009f14 <TIM_Base_SetConfig+0x13c>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d013      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a32      	ldr	r2, [pc, #200]	@ (8009f18 <TIM_Base_SetConfig+0x140>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00f      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a32      	ldr	r2, [pc, #200]	@ (8009f20 <TIM_Base_SetConfig+0x148>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d00b      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a31      	ldr	r2, [pc, #196]	@ (8009f24 <TIM_Base_SetConfig+0x14c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d007      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4a30      	ldr	r2, [pc, #192]	@ (8009f28 <TIM_Base_SetConfig+0x150>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d003      	beq.n	8009e72 <TIM_Base_SetConfig+0x9a>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8009f1c <TIM_Base_SetConfig+0x144>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d108      	bne.n	8009e84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	68db      	ldr	r3, [r3, #12]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	689a      	ldr	r2, [r3, #8]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	4a18      	ldr	r2, [pc, #96]	@ (8009f0c <TIM_Base_SetConfig+0x134>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d013      	beq.n	8009ed8 <TIM_Base_SetConfig+0x100>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	4a19      	ldr	r2, [pc, #100]	@ (8009f18 <TIM_Base_SetConfig+0x140>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d00f      	beq.n	8009ed8 <TIM_Base_SetConfig+0x100>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a19      	ldr	r2, [pc, #100]	@ (8009f20 <TIM_Base_SetConfig+0x148>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d00b      	beq.n	8009ed8 <TIM_Base_SetConfig+0x100>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a18      	ldr	r2, [pc, #96]	@ (8009f24 <TIM_Base_SetConfig+0x14c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d007      	beq.n	8009ed8 <TIM_Base_SetConfig+0x100>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a17      	ldr	r2, [pc, #92]	@ (8009f28 <TIM_Base_SetConfig+0x150>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d003      	beq.n	8009ed8 <TIM_Base_SetConfig+0x100>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a12      	ldr	r2, [pc, #72]	@ (8009f1c <TIM_Base_SetConfig+0x144>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d103      	bne.n	8009ee0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	691a      	ldr	r2, [r3, #16]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	691b      	ldr	r3, [r3, #16]
 8009eea:	f003 0301 	and.w	r3, r3, #1
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d105      	bne.n	8009efe <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	f023 0201 	bic.w	r2, r3, #1
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	611a      	str	r2, [r3, #16]
  }
}
 8009efe:	bf00      	nop
 8009f00:	3714      	adds	r7, #20
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	40012c00 	.word	0x40012c00
 8009f10:	40000400 	.word	0x40000400
 8009f14:	40000800 	.word	0x40000800
 8009f18:	40013400 	.word	0x40013400
 8009f1c:	40015000 	.word	0x40015000
 8009f20:	40014000 	.word	0x40014000
 8009f24:	40014400 	.word	0x40014400
 8009f28:	40014800 	.word	0x40014800

08009f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b087      	sub	sp, #28
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6a1b      	ldr	r3, [r3, #32]
 8009f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	f023 0201 	bic.w	r2, r3, #1
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 0303 	bic.w	r3, r3, #3
 8009f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f023 0302 	bic.w	r3, r3, #2
 8009f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a30      	ldr	r2, [pc, #192]	@ (800a048 <TIM_OC1_SetConfig+0x11c>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <TIM_OC1_SetConfig+0x88>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800a04c <TIM_OC1_SetConfig+0x120>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d00f      	beq.n	8009fb4 <TIM_OC1_SetConfig+0x88>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a2e      	ldr	r2, [pc, #184]	@ (800a050 <TIM_OC1_SetConfig+0x124>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00b      	beq.n	8009fb4 <TIM_OC1_SetConfig+0x88>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a2d      	ldr	r2, [pc, #180]	@ (800a054 <TIM_OC1_SetConfig+0x128>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d007      	beq.n	8009fb4 <TIM_OC1_SetConfig+0x88>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a2c      	ldr	r2, [pc, #176]	@ (800a058 <TIM_OC1_SetConfig+0x12c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d003      	beq.n	8009fb4 <TIM_OC1_SetConfig+0x88>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a2b      	ldr	r2, [pc, #172]	@ (800a05c <TIM_OC1_SetConfig+0x130>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d10c      	bne.n	8009fce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	f023 0308 	bic.w	r3, r3, #8
 8009fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f023 0304 	bic.w	r3, r3, #4
 8009fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a1d      	ldr	r2, [pc, #116]	@ (800a048 <TIM_OC1_SetConfig+0x11c>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d013      	beq.n	8009ffe <TIM_OC1_SetConfig+0xd2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <TIM_OC1_SetConfig+0x120>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d00f      	beq.n	8009ffe <TIM_OC1_SetConfig+0xd2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a1b      	ldr	r2, [pc, #108]	@ (800a050 <TIM_OC1_SetConfig+0x124>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d00b      	beq.n	8009ffe <TIM_OC1_SetConfig+0xd2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a1a      	ldr	r2, [pc, #104]	@ (800a054 <TIM_OC1_SetConfig+0x128>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d007      	beq.n	8009ffe <TIM_OC1_SetConfig+0xd2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a19      	ldr	r2, [pc, #100]	@ (800a058 <TIM_OC1_SetConfig+0x12c>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d003      	beq.n	8009ffe <TIM_OC1_SetConfig+0xd2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a18      	ldr	r2, [pc, #96]	@ (800a05c <TIM_OC1_SetConfig+0x130>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d111      	bne.n	800a022 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	4313      	orrs	r3, r2
 800a016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4313      	orrs	r3, r2
 800a020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	621a      	str	r2, [r3, #32]
}
 800a03c:	bf00      	nop
 800a03e:	371c      	adds	r7, #28
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	40012c00 	.word	0x40012c00
 800a04c:	40013400 	.word	0x40013400
 800a050:	40014000 	.word	0x40014000
 800a054:	40014400 	.word	0x40014400
 800a058:	40014800 	.word	0x40014800
 800a05c:	40015000 	.word	0x40015000

0800a060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a060:	b480      	push	{r7}
 800a062:	b087      	sub	sp, #28
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	f023 0210 	bic.w	r2, r3, #16
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a09a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	021b      	lsls	r3, r3, #8
 800a0a2:	68fa      	ldr	r2, [r7, #12]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f023 0320 	bic.w	r3, r3, #32
 800a0ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	011b      	lsls	r3, r3, #4
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a2c      	ldr	r2, [pc, #176]	@ (800a170 <TIM_OC2_SetConfig+0x110>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d007      	beq.n	800a0d4 <TIM_OC2_SetConfig+0x74>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a2b      	ldr	r2, [pc, #172]	@ (800a174 <TIM_OC2_SetConfig+0x114>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_OC2_SetConfig+0x74>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a2a      	ldr	r2, [pc, #168]	@ (800a178 <TIM_OC2_SetConfig+0x118>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d10d      	bne.n	800a0f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	011b      	lsls	r3, r3, #4
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a1f      	ldr	r2, [pc, #124]	@ (800a170 <TIM_OC2_SetConfig+0x110>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d013      	beq.n	800a120 <TIM_OC2_SetConfig+0xc0>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a174 <TIM_OC2_SetConfig+0x114>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d00f      	beq.n	800a120 <TIM_OC2_SetConfig+0xc0>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a1e      	ldr	r2, [pc, #120]	@ (800a17c <TIM_OC2_SetConfig+0x11c>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00b      	beq.n	800a120 <TIM_OC2_SetConfig+0xc0>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a1d      	ldr	r2, [pc, #116]	@ (800a180 <TIM_OC2_SetConfig+0x120>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d007      	beq.n	800a120 <TIM_OC2_SetConfig+0xc0>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a1c      	ldr	r2, [pc, #112]	@ (800a184 <TIM_OC2_SetConfig+0x124>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <TIM_OC2_SetConfig+0xc0>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a17      	ldr	r2, [pc, #92]	@ (800a178 <TIM_OC2_SetConfig+0x118>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d113      	bne.n	800a148 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a126:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a12e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	4313      	orrs	r3, r2
 800a13a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	4313      	orrs	r3, r2
 800a146:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	693a      	ldr	r2, [r7, #16]
 800a14c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	621a      	str	r2, [r3, #32]
}
 800a162:	bf00      	nop
 800a164:	371c      	adds	r7, #28
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
 800a16e:	bf00      	nop
 800a170:	40012c00 	.word	0x40012c00
 800a174:	40013400 	.word	0x40013400
 800a178:	40015000 	.word	0x40015000
 800a17c:	40014000 	.word	0x40014000
 800a180:	40014400 	.word	0x40014400
 800a184:	40014800 	.word	0x40014800

0800a188 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a188:	b480      	push	{r7}
 800a18a:	b087      	sub	sp, #28
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a1b      	ldr	r3, [r3, #32]
 800a19c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a1b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 0303 	bic.w	r3, r3, #3
 800a1c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a1d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a2b      	ldr	r2, [pc, #172]	@ (800a294 <TIM_OC3_SetConfig+0x10c>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d007      	beq.n	800a1fa <TIM_OC3_SetConfig+0x72>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a2a      	ldr	r2, [pc, #168]	@ (800a298 <TIM_OC3_SetConfig+0x110>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d003      	beq.n	800a1fa <TIM_OC3_SetConfig+0x72>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a29      	ldr	r2, [pc, #164]	@ (800a29c <TIM_OC3_SetConfig+0x114>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d10d      	bne.n	800a216 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a200:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	4313      	orrs	r3, r2
 800a20c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a214:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	4a1e      	ldr	r2, [pc, #120]	@ (800a294 <TIM_OC3_SetConfig+0x10c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d013      	beq.n	800a246 <TIM_OC3_SetConfig+0xbe>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a1d      	ldr	r2, [pc, #116]	@ (800a298 <TIM_OC3_SetConfig+0x110>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d00f      	beq.n	800a246 <TIM_OC3_SetConfig+0xbe>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a1d      	ldr	r2, [pc, #116]	@ (800a2a0 <TIM_OC3_SetConfig+0x118>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00b      	beq.n	800a246 <TIM_OC3_SetConfig+0xbe>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a4 <TIM_OC3_SetConfig+0x11c>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d007      	beq.n	800a246 <TIM_OC3_SetConfig+0xbe>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a1b      	ldr	r2, [pc, #108]	@ (800a2a8 <TIM_OC3_SetConfig+0x120>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <TIM_OC3_SetConfig+0xbe>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a16      	ldr	r2, [pc, #88]	@ (800a29c <TIM_OC3_SetConfig+0x114>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d113      	bne.n	800a26e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a24c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4313      	orrs	r3, r2
 800a260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	011b      	lsls	r3, r3, #4
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68fa      	ldr	r2, [r7, #12]
 800a278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	697a      	ldr	r2, [r7, #20]
 800a286:	621a      	str	r2, [r3, #32]
}
 800a288:	bf00      	nop
 800a28a:	371c      	adds	r7, #28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	40012c00 	.word	0x40012c00
 800a298:	40013400 	.word	0x40013400
 800a29c:	40015000 	.word	0x40015000
 800a2a0:	40014000 	.word	0x40014000
 800a2a4:	40014400 	.word	0x40014400
 800a2a8:	40014800 	.word	0x40014800

0800a2ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b087      	sub	sp, #28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	021b      	lsls	r3, r3, #8
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a2fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	031b      	lsls	r3, r3, #12
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	4313      	orrs	r3, r2
 800a306:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a1a      	ldr	r2, [pc, #104]	@ (800a374 <TIM_OC4_SetConfig+0xc8>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d013      	beq.n	800a338 <TIM_OC4_SetConfig+0x8c>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a19      	ldr	r2, [pc, #100]	@ (800a378 <TIM_OC4_SetConfig+0xcc>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d00f      	beq.n	800a338 <TIM_OC4_SetConfig+0x8c>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a18      	ldr	r2, [pc, #96]	@ (800a37c <TIM_OC4_SetConfig+0xd0>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d00b      	beq.n	800a338 <TIM_OC4_SetConfig+0x8c>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	4a17      	ldr	r2, [pc, #92]	@ (800a380 <TIM_OC4_SetConfig+0xd4>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d007      	beq.n	800a338 <TIM_OC4_SetConfig+0x8c>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4a16      	ldr	r2, [pc, #88]	@ (800a384 <TIM_OC4_SetConfig+0xd8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d003      	beq.n	800a338 <TIM_OC4_SetConfig+0x8c>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	4a15      	ldr	r2, [pc, #84]	@ (800a388 <TIM_OC4_SetConfig+0xdc>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d109      	bne.n	800a34c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a33e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	019b      	lsls	r3, r3, #6
 800a346:	697a      	ldr	r2, [r7, #20]
 800a348:	4313      	orrs	r3, r2
 800a34a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	685a      	ldr	r2, [r3, #4]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	693a      	ldr	r2, [r7, #16]
 800a364:	621a      	str	r2, [r3, #32]
}
 800a366:	bf00      	nop
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	40012c00 	.word	0x40012c00
 800a378:	40013400 	.word	0x40013400
 800a37c:	40014000 	.word	0x40014000
 800a380:	40014400 	.word	0x40014400
 800a384:	40014800 	.word	0x40014800
 800a388:	40015000 	.word	0x40015000

0800a38c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b087      	sub	sp, #28
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a3d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a19      	ldr	r2, [pc, #100]	@ (800a448 <TIM_OC5_SetConfig+0xbc>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d013      	beq.n	800a40e <TIM_OC5_SetConfig+0x82>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a18      	ldr	r2, [pc, #96]	@ (800a44c <TIM_OC5_SetConfig+0xc0>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00f      	beq.n	800a40e <TIM_OC5_SetConfig+0x82>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a17      	ldr	r2, [pc, #92]	@ (800a450 <TIM_OC5_SetConfig+0xc4>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00b      	beq.n	800a40e <TIM_OC5_SetConfig+0x82>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a16      	ldr	r2, [pc, #88]	@ (800a454 <TIM_OC5_SetConfig+0xc8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d007      	beq.n	800a40e <TIM_OC5_SetConfig+0x82>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a15      	ldr	r2, [pc, #84]	@ (800a458 <TIM_OC5_SetConfig+0xcc>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d003      	beq.n	800a40e <TIM_OC5_SetConfig+0x82>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a14      	ldr	r2, [pc, #80]	@ (800a45c <TIM_OC5_SetConfig+0xd0>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d109      	bne.n	800a422 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a414:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	021b      	lsls	r3, r3, #8
 800a41c:	697a      	ldr	r2, [r7, #20]
 800a41e:	4313      	orrs	r3, r2
 800a420:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	697a      	ldr	r2, [r7, #20]
 800a426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	685a      	ldr	r2, [r3, #4]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	693a      	ldr	r2, [r7, #16]
 800a43a:	621a      	str	r2, [r3, #32]
}
 800a43c:	bf00      	nop
 800a43e:	371c      	adds	r7, #28
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	40012c00 	.word	0x40012c00
 800a44c:	40013400 	.word	0x40013400
 800a450:	40014000 	.word	0x40014000
 800a454:	40014400 	.word	0x40014400
 800a458:	40014800 	.word	0x40014800
 800a45c:	40015000 	.word	0x40015000

0800a460 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6a1b      	ldr	r3, [r3, #32]
 800a474:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a48e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	021b      	lsls	r3, r3, #8
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4313      	orrs	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a4a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	051b      	lsls	r3, r3, #20
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a1a      	ldr	r2, [pc, #104]	@ (800a520 <TIM_OC6_SetConfig+0xc0>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d013      	beq.n	800a4e4 <TIM_OC6_SetConfig+0x84>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a19      	ldr	r2, [pc, #100]	@ (800a524 <TIM_OC6_SetConfig+0xc4>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d00f      	beq.n	800a4e4 <TIM_OC6_SetConfig+0x84>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a18      	ldr	r2, [pc, #96]	@ (800a528 <TIM_OC6_SetConfig+0xc8>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d00b      	beq.n	800a4e4 <TIM_OC6_SetConfig+0x84>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a17      	ldr	r2, [pc, #92]	@ (800a52c <TIM_OC6_SetConfig+0xcc>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d007      	beq.n	800a4e4 <TIM_OC6_SetConfig+0x84>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a16      	ldr	r2, [pc, #88]	@ (800a530 <TIM_OC6_SetConfig+0xd0>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d003      	beq.n	800a4e4 <TIM_OC6_SetConfig+0x84>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	4a15      	ldr	r2, [pc, #84]	@ (800a534 <TIM_OC6_SetConfig+0xd4>)
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d109      	bne.n	800a4f8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a4ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	695b      	ldr	r3, [r3, #20]
 800a4f0:	029b      	lsls	r3, r3, #10
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	685a      	ldr	r2, [r3, #4]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	621a      	str	r2, [r3, #32]
}
 800a512:	bf00      	nop
 800a514:	371c      	adds	r7, #28
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	40012c00 	.word	0x40012c00
 800a524:	40013400 	.word	0x40013400
 800a528:	40014000 	.word	0x40014000
 800a52c:	40014400 	.word	0x40014400
 800a530:	40014800 	.word	0x40014800
 800a534:	40015000 	.word	0x40015000

0800a538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6a1b      	ldr	r3, [r3, #32]
 800a54e:	f023 0201 	bic.w	r2, r3, #1
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	011b      	lsls	r3, r3, #4
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f023 030a 	bic.w	r3, r3, #10
 800a574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	697a      	ldr	r2, [r7, #20]
 800a588:	621a      	str	r2, [r3, #32]
}
 800a58a:	bf00      	nop
 800a58c:	371c      	adds	r7, #28
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a596:	b480      	push	{r7}
 800a598:	b087      	sub	sp, #28
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6a1b      	ldr	r3, [r3, #32]
 800a5ac:	f023 0210 	bic.w	r2, r3, #16
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	031b      	lsls	r3, r3, #12
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	011b      	lsls	r3, r3, #4
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	621a      	str	r2, [r3, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	371c      	adds	r7, #28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a60c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4313      	orrs	r3, r2
 800a614:	f043 0307 	orr.w	r3, r3, #7
 800a618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68fa      	ldr	r2, [r7, #12]
 800a61e:	609a      	str	r2, [r3, #8]
}
 800a620:	bf00      	nop
 800a622:	3714      	adds	r7, #20
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b087      	sub	sp, #28
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	689b      	ldr	r3, [r3, #8]
 800a63e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	021a      	lsls	r2, r3, #8
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	431a      	orrs	r2, r3
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	4313      	orrs	r3, r2
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	4313      	orrs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	609a      	str	r2, [r3, #8]
}
 800a660:	bf00      	nop
 800a662:	371c      	adds	r7, #28
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b087      	sub	sp, #28
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	f003 031f 	and.w	r3, r3, #31
 800a67e:	2201      	movs	r2, #1
 800a680:	fa02 f303 	lsl.w	r3, r2, r3
 800a684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6a1a      	ldr	r2, [r3, #32]
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	43db      	mvns	r3, r3
 800a68e:	401a      	ands	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6a1a      	ldr	r2, [r3, #32]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	f003 031f 	and.w	r3, r3, #31
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a4:	431a      	orrs	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	621a      	str	r2, [r3, #32]
}
 800a6aa:	bf00      	nop
 800a6ac:	371c      	adds	r7, #28
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	d101      	bne.n	800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6cc:	2302      	movs	r3, #2
 800a6ce:	e06d      	b.n	800a7ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2202      	movs	r2, #2
 800a6dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a30      	ldr	r2, [pc, #192]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d009      	beq.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a2f      	ldr	r2, [pc, #188]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d004      	beq.n	800a70e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a2d      	ldr	r2, [pc, #180]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d108      	bne.n	800a720 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a714:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	68fa      	ldr	r2, [r7, #12]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	4313      	orrs	r3, r2
 800a730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d01d      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a74c:	d018      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a1c      	ldr	r2, [pc, #112]	@ (800a7c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d013      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a1a      	ldr	r2, [pc, #104]	@ (800a7c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d00e      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	@ (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d009      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a16      	ldr	r2, [pc, #88]	@ (800a7cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d004      	beq.n	800a780 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a11      	ldr	r2, [pc, #68]	@ (800a7c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d10c      	bne.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	689b      	ldr	r3, [r3, #8]
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	4313      	orrs	r3, r2
 800a790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68ba      	ldr	r2, [r7, #8]
 800a798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	40012c00 	.word	0x40012c00
 800a7bc:	40013400 	.word	0x40013400
 800a7c0:	40015000 	.word	0x40015000
 800a7c4:	40000400 	.word	0x40000400
 800a7c8:	40000800 	.word	0x40000800
 800a7cc:	40014000 	.word	0x40014000

0800a7d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7ec:	bf00      	nop
 800a7ee:	370c      	adds	r7, #12
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d101      	bne.n	800a81e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	e040      	b.n	800a8a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f7f8 fe18 	bl	8003464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2224      	movs	r2, #36	@ 0x24
 800a838:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f022 0201 	bic.w	r2, r2, #1
 800a848:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d002      	beq.n	800a858 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fd8c 	bl	800b370 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fbb5 	bl	800afc8 <UART_SetConfig>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e01b      	b.n	800a8a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f042 0201 	orr.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fe0b 	bl	800b4b4 <UART_CheckIdleState>
 800a89e:	4603      	mov	r3, r0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b08a      	sub	sp, #40	@ 0x28
 800a8ac:	af02      	add	r7, sp, #8
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d177      	bne.n	800a9b0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <HAL_UART_Transmit+0x24>
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e070      	b.n	800a9b2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2221      	movs	r2, #33	@ 0x21
 800a8dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a8de:	f7f9 f81d 	bl	800391c <HAL_GetTick>
 800a8e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	88fa      	ldrh	r2, [r7, #6]
 800a8e8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	88fa      	ldrh	r2, [r7, #6]
 800a8f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8fc:	d108      	bne.n	800a910 <HAL_UART_Transmit+0x68>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d104      	bne.n	800a910 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	61bb      	str	r3, [r7, #24]
 800a90e:	e003      	b.n	800a918 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a914:	2300      	movs	r3, #0
 800a916:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a918:	e02f      	b.n	800a97a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	2200      	movs	r2, #0
 800a922:	2180      	movs	r1, #128	@ 0x80
 800a924:	68f8      	ldr	r0, [r7, #12]
 800a926:	f000 fe6d 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2220      	movs	r2, #32
 800a934:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	e03b      	b.n	800a9b2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d10b      	bne.n	800a958 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	881a      	ldrh	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a94c:	b292      	uxth	r2, r2
 800a94e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	3302      	adds	r3, #2
 800a954:	61bb      	str	r3, [r7, #24]
 800a956:	e007      	b.n	800a968 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	781a      	ldrb	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	3301      	adds	r3, #1
 800a966:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a96e:	b29b      	uxth	r3, r3
 800a970:	3b01      	subs	r3, #1
 800a972:	b29a      	uxth	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a980:	b29b      	uxth	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1c9      	bne.n	800a91a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	9300      	str	r3, [sp, #0]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	2200      	movs	r2, #0
 800a98e:	2140      	movs	r1, #64	@ 0x40
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 fe37 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800a996:	4603      	mov	r3, r0
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2220      	movs	r2, #32
 800a9a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e005      	b.n	800a9b2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2220      	movs	r2, #32
 800a9aa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e000      	b.n	800a9b2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a9b0:	2302      	movs	r3, #2
  }
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b0ba      	sub	sp, #232	@ 0xe8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a9e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a9f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d115      	bne.n	800aa24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9fc:	f003 0320 	and.w	r3, r3, #32
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d00f      	beq.n	800aa24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d009      	beq.n	800aa24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 82ab 	beq.w	800af70 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	4798      	blx	r3
      }
      return;
 800aa22:	e2a5      	b.n	800af70 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 8117 	beq.w	800ac5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d106      	bne.n	800aa48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa3e:	4b85      	ldr	r3, [pc, #532]	@ (800ac54 <HAL_UART_IRQHandler+0x298>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 810a 	beq.w	800ac5c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa4c:	f003 0301 	and.w	r3, r3, #1
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d011      	beq.n	800aa78 <HAL_UART_IRQHandler+0xbc>
 800aa54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00b      	beq.n	800aa78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2201      	movs	r2, #1
 800aa66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa6e:	f043 0201 	orr.w	r2, r3, #1
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa7c:	f003 0302 	and.w	r3, r3, #2
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d011      	beq.n	800aaa8 <HAL_UART_IRQHandler+0xec>
 800aa84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00b      	beq.n	800aaa8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2202      	movs	r2, #2
 800aa96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa9e:	f043 0204 	orr.w	r2, r3, #4
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaac:	f003 0304 	and.w	r3, r3, #4
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d011      	beq.n	800aad8 <HAL_UART_IRQHandler+0x11c>
 800aab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aab8:	f003 0301 	and.w	r3, r3, #1
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2204      	movs	r2, #4
 800aac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aace:	f043 0202 	orr.w	r2, r3, #2
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aadc:	f003 0308 	and.w	r3, r3, #8
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d017      	beq.n	800ab14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae8:	f003 0320 	and.w	r3, r3, #32
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d105      	bne.n	800aafc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aaf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaf4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	2208      	movs	r2, #8
 800ab02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab0a:	f043 0208 	orr.w	r2, r3, #8
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d012      	beq.n	800ab46 <HAL_UART_IRQHandler+0x18a>
 800ab20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00c      	beq.n	800ab46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab3c:	f043 0220 	orr.w	r2, r3, #32
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8211 	beq.w	800af74 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab56:	f003 0320 	and.w	r3, r3, #32
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00d      	beq.n	800ab7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d007      	beq.n	800ab7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	689b      	ldr	r3, [r3, #8]
 800ab8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab8e:	2b40      	cmp	r3, #64	@ 0x40
 800ab90:	d005      	beq.n	800ab9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab96:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d04f      	beq.n	800ac3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fd9d 	bl	800b6de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abae:	2b40      	cmp	r3, #64	@ 0x40
 800abb0:	d141      	bne.n	800ac36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3308      	adds	r3, #8
 800abb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abc0:	e853 3f00 	ldrex	r3, [r3]
 800abc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3308      	adds	r3, #8
 800abda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800abde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800abe2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800abea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800abee:	e841 2300 	strex	r3, r2, [r1]
 800abf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800abf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1d9      	bne.n	800abb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d013      	beq.n	800ac2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac0a:	4a13      	ldr	r2, [pc, #76]	@ (800ac58 <HAL_UART_IRQHandler+0x29c>)
 800ac0c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fa fc81 	bl	800551a <HAL_DMA_Abort_IT>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d017      	beq.n	800ac4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ac28:	4610      	mov	r0, r2
 800ac2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2c:	e00f      	b.n	800ac4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f9b4 	bl	800af9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac34:	e00b      	b.n	800ac4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f9b0 	bl	800af9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac3c:	e007      	b.n	800ac4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f000 f9ac 	bl	800af9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2200      	movs	r2, #0
 800ac48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ac4c:	e192      	b.n	800af74 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac4e:	bf00      	nop
    return;
 800ac50:	e190      	b.n	800af74 <HAL_UART_IRQHandler+0x5b8>
 800ac52:	bf00      	nop
 800ac54:	04000120 	.word	0x04000120
 800ac58:	0800b7a7 	.word	0x0800b7a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	f040 814b 	bne.w	800aefc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac6a:	f003 0310 	and.w	r3, r3, #16
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f000 8144 	beq.w	800aefc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac78:	f003 0310 	and.w	r3, r3, #16
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 813d 	beq.w	800aefc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2210      	movs	r2, #16
 800ac88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac94:	2b40      	cmp	r3, #64	@ 0x40
 800ac96:	f040 80b5 	bne.w	800ae04 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aca6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 8164 	beq.w	800af78 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800acb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acba:	429a      	cmp	r2, r3
 800acbc:	f080 815c 	bcs.w	800af78 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acc6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	2b20      	cmp	r3, #32
 800acd2:	f000 8086 	beq.w	800ade2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ace2:	e853 3f00 	ldrex	r3, [r3]
 800ace6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800acea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800acee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acf2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad04:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad08:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ad0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad10:	e841 2300 	strex	r3, r2, [r1]
 800ad14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1da      	bne.n	800acd6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3308      	adds	r3, #8
 800ad26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad2a:	e853 3f00 	ldrex	r3, [r3]
 800ad2e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad32:	f023 0301 	bic.w	r3, r3, #1
 800ad36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	3308      	adds	r3, #8
 800ad40:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ad44:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad48:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad4c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad50:	e841 2300 	strex	r3, r2, [r1]
 800ad54:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d1e1      	bne.n	800ad20 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3308      	adds	r3, #8
 800ad62:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad66:	e853 3f00 	ldrex	r3, [r3]
 800ad6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	3308      	adds	r3, #8
 800ad7c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad80:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad82:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad86:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad88:	e841 2300 	strex	r3, r2, [r1]
 800ad8c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d1e3      	bne.n	800ad5c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2220      	movs	r2, #32
 800ad98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adaa:	e853 3f00 	ldrex	r3, [r3]
 800adae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb2:	f023 0310 	bic.w	r3, r3, #16
 800adb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adc6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adcc:	e841 2300 	strex	r3, r2, [r1]
 800add0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800add2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1e4      	bne.n	800ada2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800addc:	4618      	mov	r0, r3
 800adde:	f7fa fb5e 	bl	800549e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2202      	movs	r2, #2
 800ade6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f000 f8d7 	bl	800afb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae02:	e0b9      	b.n	800af78 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	1ad3      	subs	r3, r2, r3
 800ae14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 80ab 	beq.w	800af7c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800ae26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 80a6 	beq.w	800af7c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae38:	e853 3f00 	ldrex	r3, [r3]
 800ae3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae52:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae5a:	e841 2300 	strex	r3, r2, [r1]
 800ae5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1e4      	bne.n	800ae30 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	e853 3f00 	ldrex	r3, [r3]
 800ae74:	623b      	str	r3, [r7, #32]
   return(result);
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	f023 0301 	bic.w	r3, r3, #1
 800ae7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	3308      	adds	r3, #8
 800ae86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae8a:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae92:	e841 2300 	strex	r3, r2, [r1]
 800ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e3      	bne.n	800ae66 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2220      	movs	r2, #32
 800aea2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	e853 3f00 	ldrex	r3, [r3]
 800aebe:	60fb      	str	r3, [r7, #12]
   return(result);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f023 0310 	bic.w	r3, r3, #16
 800aec6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aed4:	61fb      	str	r3, [r7, #28]
 800aed6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed8:	69b9      	ldr	r1, [r7, #24]
 800aeda:	69fa      	ldr	r2, [r7, #28]
 800aedc:	e841 2300 	strex	r3, r2, [r1]
 800aee0:	617b      	str	r3, [r7, #20]
   return(result);
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e4      	bne.n	800aeb2 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2202      	movs	r2, #2
 800aeec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aeee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 f85b 	bl	800afb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aefa:	e03f      	b.n	800af7c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00e      	beq.n	800af26 <HAL_UART_IRQHandler+0x56a>
 800af08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d008      	beq.n	800af26 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800af1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 fc81 	bl	800b826 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af24:	e02d      	b.n	800af82 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d00e      	beq.n	800af50 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d008      	beq.n	800af50 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af42:	2b00      	cmp	r3, #0
 800af44:	d01c      	beq.n	800af80 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	4798      	blx	r3
    }
    return;
 800af4e:	e017      	b.n	800af80 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d012      	beq.n	800af82 <HAL_UART_IRQHandler+0x5c6>
 800af5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00c      	beq.n	800af82 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f000 fc32 	bl	800b7d2 <UART_EndTransmit_IT>
    return;
 800af6e:	e008      	b.n	800af82 <HAL_UART_IRQHandler+0x5c6>
      return;
 800af70:	bf00      	nop
 800af72:	e006      	b.n	800af82 <HAL_UART_IRQHandler+0x5c6>
    return;
 800af74:	bf00      	nop
 800af76:	e004      	b.n	800af82 <HAL_UART_IRQHandler+0x5c6>
      return;
 800af78:	bf00      	nop
 800af7a:	e002      	b.n	800af82 <HAL_UART_IRQHandler+0x5c6>
      return;
 800af7c:	bf00      	nop
 800af7e:	e000      	b.n	800af82 <HAL_UART_IRQHandler+0x5c6>
    return;
 800af80:	bf00      	nop
  }

}
 800af82:	37e8      	adds	r7, #232	@ 0xe8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800afa4:	bf00      	nop
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	431a      	orrs	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	695b      	ldr	r3, [r3, #20]
 800afe2:	431a      	orrs	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	69db      	ldr	r3, [r3, #28]
 800afe8:	4313      	orrs	r3, r2
 800afea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	4b92      	ldr	r3, [pc, #584]	@ (800b23c <UART_SetConfig+0x274>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	6812      	ldr	r2, [r2, #0]
 800affa:	6979      	ldr	r1, [r7, #20]
 800affc:	430b      	orrs	r3, r1
 800affe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68da      	ldr	r2, [r3, #12]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	697a      	ldr	r2, [r7, #20]
 800b022:	4313      	orrs	r3, r2
 800b024:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	697a      	ldr	r2, [r7, #20]
 800b036:	430a      	orrs	r2, r1
 800b038:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a80      	ldr	r2, [pc, #512]	@ (800b240 <UART_SetConfig+0x278>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d120      	bne.n	800b086 <UART_SetConfig+0xbe>
 800b044:	4b7f      	ldr	r3, [pc, #508]	@ (800b244 <UART_SetConfig+0x27c>)
 800b046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b048:	f003 0303 	and.w	r3, r3, #3
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	d817      	bhi.n	800b080 <UART_SetConfig+0xb8>
 800b050:	a201      	add	r2, pc, #4	@ (adr r2, 800b058 <UART_SetConfig+0x90>)
 800b052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b056:	bf00      	nop
 800b058:	0800b069 	.word	0x0800b069
 800b05c:	0800b075 	.word	0x0800b075
 800b060:	0800b07b 	.word	0x0800b07b
 800b064:	0800b06f 	.word	0x0800b06f
 800b068:	2301      	movs	r3, #1
 800b06a:	77fb      	strb	r3, [r7, #31]
 800b06c:	e0b5      	b.n	800b1da <UART_SetConfig+0x212>
 800b06e:	2302      	movs	r3, #2
 800b070:	77fb      	strb	r3, [r7, #31]
 800b072:	e0b2      	b.n	800b1da <UART_SetConfig+0x212>
 800b074:	2304      	movs	r3, #4
 800b076:	77fb      	strb	r3, [r7, #31]
 800b078:	e0af      	b.n	800b1da <UART_SetConfig+0x212>
 800b07a:	2308      	movs	r3, #8
 800b07c:	77fb      	strb	r3, [r7, #31]
 800b07e:	e0ac      	b.n	800b1da <UART_SetConfig+0x212>
 800b080:	2310      	movs	r3, #16
 800b082:	77fb      	strb	r3, [r7, #31]
 800b084:	e0a9      	b.n	800b1da <UART_SetConfig+0x212>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a6f      	ldr	r2, [pc, #444]	@ (800b248 <UART_SetConfig+0x280>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d124      	bne.n	800b0da <UART_SetConfig+0x112>
 800b090:	4b6c      	ldr	r3, [pc, #432]	@ (800b244 <UART_SetConfig+0x27c>)
 800b092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b098:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b09c:	d011      	beq.n	800b0c2 <UART_SetConfig+0xfa>
 800b09e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b0a2:	d817      	bhi.n	800b0d4 <UART_SetConfig+0x10c>
 800b0a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0a8:	d011      	beq.n	800b0ce <UART_SetConfig+0x106>
 800b0aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ae:	d811      	bhi.n	800b0d4 <UART_SetConfig+0x10c>
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d003      	beq.n	800b0bc <UART_SetConfig+0xf4>
 800b0b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b0b8:	d006      	beq.n	800b0c8 <UART_SetConfig+0x100>
 800b0ba:	e00b      	b.n	800b0d4 <UART_SetConfig+0x10c>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	77fb      	strb	r3, [r7, #31]
 800b0c0:	e08b      	b.n	800b1da <UART_SetConfig+0x212>
 800b0c2:	2302      	movs	r3, #2
 800b0c4:	77fb      	strb	r3, [r7, #31]
 800b0c6:	e088      	b.n	800b1da <UART_SetConfig+0x212>
 800b0c8:	2304      	movs	r3, #4
 800b0ca:	77fb      	strb	r3, [r7, #31]
 800b0cc:	e085      	b.n	800b1da <UART_SetConfig+0x212>
 800b0ce:	2308      	movs	r3, #8
 800b0d0:	77fb      	strb	r3, [r7, #31]
 800b0d2:	e082      	b.n	800b1da <UART_SetConfig+0x212>
 800b0d4:	2310      	movs	r3, #16
 800b0d6:	77fb      	strb	r3, [r7, #31]
 800b0d8:	e07f      	b.n	800b1da <UART_SetConfig+0x212>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a5b      	ldr	r2, [pc, #364]	@ (800b24c <UART_SetConfig+0x284>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d124      	bne.n	800b12e <UART_SetConfig+0x166>
 800b0e4:	4b57      	ldr	r3, [pc, #348]	@ (800b244 <UART_SetConfig+0x27c>)
 800b0e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0e8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800b0ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b0f0:	d011      	beq.n	800b116 <UART_SetConfig+0x14e>
 800b0f2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b0f6:	d817      	bhi.n	800b128 <UART_SetConfig+0x160>
 800b0f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b0fc:	d011      	beq.n	800b122 <UART_SetConfig+0x15a>
 800b0fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b102:	d811      	bhi.n	800b128 <UART_SetConfig+0x160>
 800b104:	2b00      	cmp	r3, #0
 800b106:	d003      	beq.n	800b110 <UART_SetConfig+0x148>
 800b108:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b10c:	d006      	beq.n	800b11c <UART_SetConfig+0x154>
 800b10e:	e00b      	b.n	800b128 <UART_SetConfig+0x160>
 800b110:	2300      	movs	r3, #0
 800b112:	77fb      	strb	r3, [r7, #31]
 800b114:	e061      	b.n	800b1da <UART_SetConfig+0x212>
 800b116:	2302      	movs	r3, #2
 800b118:	77fb      	strb	r3, [r7, #31]
 800b11a:	e05e      	b.n	800b1da <UART_SetConfig+0x212>
 800b11c:	2304      	movs	r3, #4
 800b11e:	77fb      	strb	r3, [r7, #31]
 800b120:	e05b      	b.n	800b1da <UART_SetConfig+0x212>
 800b122:	2308      	movs	r3, #8
 800b124:	77fb      	strb	r3, [r7, #31]
 800b126:	e058      	b.n	800b1da <UART_SetConfig+0x212>
 800b128:	2310      	movs	r3, #16
 800b12a:	77fb      	strb	r3, [r7, #31]
 800b12c:	e055      	b.n	800b1da <UART_SetConfig+0x212>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a47      	ldr	r2, [pc, #284]	@ (800b250 <UART_SetConfig+0x288>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d124      	bne.n	800b182 <UART_SetConfig+0x1ba>
 800b138:	4b42      	ldr	r3, [pc, #264]	@ (800b244 <UART_SetConfig+0x27c>)
 800b13a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b13c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b140:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b144:	d011      	beq.n	800b16a <UART_SetConfig+0x1a2>
 800b146:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b14a:	d817      	bhi.n	800b17c <UART_SetConfig+0x1b4>
 800b14c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b150:	d011      	beq.n	800b176 <UART_SetConfig+0x1ae>
 800b152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b156:	d811      	bhi.n	800b17c <UART_SetConfig+0x1b4>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d003      	beq.n	800b164 <UART_SetConfig+0x19c>
 800b15c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b160:	d006      	beq.n	800b170 <UART_SetConfig+0x1a8>
 800b162:	e00b      	b.n	800b17c <UART_SetConfig+0x1b4>
 800b164:	2300      	movs	r3, #0
 800b166:	77fb      	strb	r3, [r7, #31]
 800b168:	e037      	b.n	800b1da <UART_SetConfig+0x212>
 800b16a:	2302      	movs	r3, #2
 800b16c:	77fb      	strb	r3, [r7, #31]
 800b16e:	e034      	b.n	800b1da <UART_SetConfig+0x212>
 800b170:	2304      	movs	r3, #4
 800b172:	77fb      	strb	r3, [r7, #31]
 800b174:	e031      	b.n	800b1da <UART_SetConfig+0x212>
 800b176:	2308      	movs	r3, #8
 800b178:	77fb      	strb	r3, [r7, #31]
 800b17a:	e02e      	b.n	800b1da <UART_SetConfig+0x212>
 800b17c:	2310      	movs	r3, #16
 800b17e:	77fb      	strb	r3, [r7, #31]
 800b180:	e02b      	b.n	800b1da <UART_SetConfig+0x212>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a33      	ldr	r2, [pc, #204]	@ (800b254 <UART_SetConfig+0x28c>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d124      	bne.n	800b1d6 <UART_SetConfig+0x20e>
 800b18c:	4b2d      	ldr	r3, [pc, #180]	@ (800b244 <UART_SetConfig+0x27c>)
 800b18e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b190:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b194:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b198:	d011      	beq.n	800b1be <UART_SetConfig+0x1f6>
 800b19a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b19e:	d817      	bhi.n	800b1d0 <UART_SetConfig+0x208>
 800b1a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1a4:	d011      	beq.n	800b1ca <UART_SetConfig+0x202>
 800b1a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b1aa:	d811      	bhi.n	800b1d0 <UART_SetConfig+0x208>
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <UART_SetConfig+0x1f0>
 800b1b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b1b4:	d006      	beq.n	800b1c4 <UART_SetConfig+0x1fc>
 800b1b6:	e00b      	b.n	800b1d0 <UART_SetConfig+0x208>
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	77fb      	strb	r3, [r7, #31]
 800b1bc:	e00d      	b.n	800b1da <UART_SetConfig+0x212>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	77fb      	strb	r3, [r7, #31]
 800b1c2:	e00a      	b.n	800b1da <UART_SetConfig+0x212>
 800b1c4:	2304      	movs	r3, #4
 800b1c6:	77fb      	strb	r3, [r7, #31]
 800b1c8:	e007      	b.n	800b1da <UART_SetConfig+0x212>
 800b1ca:	2308      	movs	r3, #8
 800b1cc:	77fb      	strb	r3, [r7, #31]
 800b1ce:	e004      	b.n	800b1da <UART_SetConfig+0x212>
 800b1d0:	2310      	movs	r3, #16
 800b1d2:	77fb      	strb	r3, [r7, #31]
 800b1d4:	e001      	b.n	800b1da <UART_SetConfig+0x212>
 800b1d6:	2310      	movs	r3, #16
 800b1d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	69db      	ldr	r3, [r3, #28]
 800b1de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1e2:	d16b      	bne.n	800b2bc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800b1e4:	7ffb      	ldrb	r3, [r7, #31]
 800b1e6:	2b08      	cmp	r3, #8
 800b1e8:	d838      	bhi.n	800b25c <UART_SetConfig+0x294>
 800b1ea:	a201      	add	r2, pc, #4	@ (adr r2, 800b1f0 <UART_SetConfig+0x228>)
 800b1ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f0:	0800b215 	.word	0x0800b215
 800b1f4:	0800b21d 	.word	0x0800b21d
 800b1f8:	0800b225 	.word	0x0800b225
 800b1fc:	0800b25d 	.word	0x0800b25d
 800b200:	0800b22b 	.word	0x0800b22b
 800b204:	0800b25d 	.word	0x0800b25d
 800b208:	0800b25d 	.word	0x0800b25d
 800b20c:	0800b25d 	.word	0x0800b25d
 800b210:	0800b233 	.word	0x0800b233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b214:	f7fc fe3a 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 800b218:	61b8      	str	r0, [r7, #24]
        break;
 800b21a:	e024      	b.n	800b266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b21c:	f7fc fe58 	bl	8007ed0 <HAL_RCC_GetPCLK2Freq>
 800b220:	61b8      	str	r0, [r7, #24]
        break;
 800b222:	e020      	b.n	800b266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b224:	4b0c      	ldr	r3, [pc, #48]	@ (800b258 <UART_SetConfig+0x290>)
 800b226:	61bb      	str	r3, [r7, #24]
        break;
 800b228:	e01d      	b.n	800b266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b22a:	f7fc fdcf 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 800b22e:	61b8      	str	r0, [r7, #24]
        break;
 800b230:	e019      	b.n	800b266 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b236:	61bb      	str	r3, [r7, #24]
        break;
 800b238:	e015      	b.n	800b266 <UART_SetConfig+0x29e>
 800b23a:	bf00      	nop
 800b23c:	efff69f3 	.word	0xefff69f3
 800b240:	40013800 	.word	0x40013800
 800b244:	40021000 	.word	0x40021000
 800b248:	40004400 	.word	0x40004400
 800b24c:	40004800 	.word	0x40004800
 800b250:	40004c00 	.word	0x40004c00
 800b254:	40005000 	.word	0x40005000
 800b258:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	77bb      	strb	r3, [r7, #30]
        break;
 800b264:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d073      	beq.n	800b354 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	005a      	lsls	r2, r3, #1
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	085b      	lsrs	r3, r3, #1
 800b276:	441a      	add	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b280:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	2b0f      	cmp	r3, #15
 800b286:	d916      	bls.n	800b2b6 <UART_SetConfig+0x2ee>
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b28e:	d212      	bcs.n	800b2b6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	b29b      	uxth	r3, r3
 800b294:	f023 030f 	bic.w	r3, r3, #15
 800b298:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	085b      	lsrs	r3, r3, #1
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	f003 0307 	and.w	r3, r3, #7
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	89fb      	ldrh	r3, [r7, #14]
 800b2a8:	4313      	orrs	r3, r2
 800b2aa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	89fa      	ldrh	r2, [r7, #14]
 800b2b2:	60da      	str	r2, [r3, #12]
 800b2b4:	e04e      	b.n	800b354 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	77bb      	strb	r3, [r7, #30]
 800b2ba:	e04b      	b.n	800b354 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2bc:	7ffb      	ldrb	r3, [r7, #31]
 800b2be:	2b08      	cmp	r3, #8
 800b2c0:	d827      	bhi.n	800b312 <UART_SetConfig+0x34a>
 800b2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2c8 <UART_SetConfig+0x300>)
 800b2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c8:	0800b2ed 	.word	0x0800b2ed
 800b2cc:	0800b2f5 	.word	0x0800b2f5
 800b2d0:	0800b2fd 	.word	0x0800b2fd
 800b2d4:	0800b313 	.word	0x0800b313
 800b2d8:	0800b303 	.word	0x0800b303
 800b2dc:	0800b313 	.word	0x0800b313
 800b2e0:	0800b313 	.word	0x0800b313
 800b2e4:	0800b313 	.word	0x0800b313
 800b2e8:	0800b30b 	.word	0x0800b30b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2ec:	f7fc fdce 	bl	8007e8c <HAL_RCC_GetPCLK1Freq>
 800b2f0:	61b8      	str	r0, [r7, #24]
        break;
 800b2f2:	e013      	b.n	800b31c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f4:	f7fc fdec 	bl	8007ed0 <HAL_RCC_GetPCLK2Freq>
 800b2f8:	61b8      	str	r0, [r7, #24]
        break;
 800b2fa:	e00f      	b.n	800b31c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b36c <UART_SetConfig+0x3a4>)
 800b2fe:	61bb      	str	r3, [r7, #24]
        break;
 800b300:	e00c      	b.n	800b31c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b302:	f7fc fd63 	bl	8007dcc <HAL_RCC_GetSysClockFreq>
 800b306:	61b8      	str	r0, [r7, #24]
        break;
 800b308:	e008      	b.n	800b31c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b30a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b30e:	61bb      	str	r3, [r7, #24]
        break;
 800b310:	e004      	b.n	800b31c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800b312:	2300      	movs	r3, #0
 800b314:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	77bb      	strb	r3, [r7, #30]
        break;
 800b31a:	bf00      	nop
    }

    if (pclk != 0U)
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d018      	beq.n	800b354 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	085a      	lsrs	r2, r3, #1
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	441a      	add	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	fbb2 f3f3 	udiv	r3, r2, r3
 800b334:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	2b0f      	cmp	r3, #15
 800b33a:	d909      	bls.n	800b350 <UART_SetConfig+0x388>
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b342:	d205      	bcs.n	800b350 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	b29a      	uxth	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	60da      	str	r2, [r3, #12]
 800b34e:	e001      	b.n	800b354 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b360:	7fbb      	ldrb	r3, [r7, #30]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	007a1200 	.word	0x007a1200

0800b370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37c:	f003 0308 	and.w	r3, r3, #8
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39e:	f003 0301 	and.w	r3, r3, #1
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c0:	f003 0302 	and.w	r3, r3, #2
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00a      	beq.n	800b3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e2:	f003 0304 	and.w	r3, r3, #4
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b404:	f003 0310 	and.w	r3, r3, #16
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00a      	beq.n	800b422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b426:	f003 0320 	and.w	r3, r3, #32
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01a      	beq.n	800b486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b46a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b46e:	d10a      	bne.n	800b486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b48a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00a      	beq.n	800b4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	605a      	str	r2, [r3, #4]
  }
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b098      	sub	sp, #96	@ 0x60
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4c4:	f7f8 fa2a 	bl	800391c <HAL_GetTick>
 800b4c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0308 	and.w	r3, r3, #8
 800b4d4:	2b08      	cmp	r3, #8
 800b4d6:	d12e      	bne.n	800b536 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f88c 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d021      	beq.n	800b536 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fa:	e853 3f00 	ldrex	r3, [r3]
 800b4fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b506:	653b      	str	r3, [r7, #80]	@ 0x50
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	461a      	mov	r2, r3
 800b50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b510:	647b      	str	r3, [r7, #68]	@ 0x44
 800b512:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b514:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b516:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b518:	e841 2300 	strex	r3, r2, [r1]
 800b51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b51e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b520:	2b00      	cmp	r3, #0
 800b522:	d1e6      	bne.n	800b4f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2220      	movs	r2, #32
 800b528:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e062      	b.n	800b5fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b04      	cmp	r3, #4
 800b542:	d149      	bne.n	800b5d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b544:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b548:	9300      	str	r3, [sp, #0]
 800b54a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b54c:	2200      	movs	r2, #0
 800b54e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f856 	bl	800b604 <UART_WaitOnFlagUntilTimeout>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d03c      	beq.n	800b5d8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	623b      	str	r3, [r7, #32]
   return(result);
 800b56c:	6a3b      	ldr	r3, [r7, #32]
 800b56e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b572:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b57c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b57e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b580:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b584:	e841 2300 	strex	r3, r2, [r1]
 800b588:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d1e6      	bne.n	800b55e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3308      	adds	r3, #8
 800b596:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	e853 3f00 	ldrex	r3, [r3]
 800b59e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 0301 	bic.w	r3, r3, #1
 800b5a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	3308      	adds	r3, #8
 800b5ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5b0:	61fa      	str	r2, [r7, #28]
 800b5b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b4:	69b9      	ldr	r1, [r7, #24]
 800b5b6:	69fa      	ldr	r2, [r7, #28]
 800b5b8:	e841 2300 	strex	r3, r2, [r1]
 800b5bc:	617b      	str	r3, [r7, #20]
   return(result);
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1e5      	bne.n	800b590 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e011      	b.n	800b5fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2220      	movs	r2, #32
 800b5e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3758      	adds	r7, #88	@ 0x58
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	60f8      	str	r0, [r7, #12]
 800b60c:	60b9      	str	r1, [r7, #8]
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	4613      	mov	r3, r2
 800b612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b614:	e04f      	b.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61c:	d04b      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b61e:	f7f8 f97d 	bl	800391c <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	69ba      	ldr	r2, [r7, #24]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d302      	bcc.n	800b634 <UART_WaitOnFlagUntilTimeout+0x30>
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e04e      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0304 	and.w	r3, r3, #4
 800b642:	2b00      	cmp	r3, #0
 800b644:	d037      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2b80      	cmp	r3, #128	@ 0x80
 800b64a:	d034      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	2b40      	cmp	r3, #64	@ 0x40
 800b650:	d031      	beq.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	69db      	ldr	r3, [r3, #28]
 800b658:	f003 0308 	and.w	r3, r3, #8
 800b65c:	2b08      	cmp	r3, #8
 800b65e:	d110      	bne.n	800b682 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2208      	movs	r2, #8
 800b666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f838 	bl	800b6de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2208      	movs	r2, #8
 800b672:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e029      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	69db      	ldr	r3, [r3, #28]
 800b688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b68c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b690:	d111      	bne.n	800b6b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b69a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	f000 f81e 	bl	800b6de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2220      	movs	r2, #32
 800b6a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b6b2:	2303      	movs	r3, #3
 800b6b4:	e00f      	b.n	800b6d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	69da      	ldr	r2, [r3, #28]
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	4013      	ands	r3, r2
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	bf0c      	ite	eq
 800b6c6:	2301      	moveq	r3, #1
 800b6c8:	2300      	movne	r3, #0
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d0a0      	beq.n	800b616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b095      	sub	sp, #84	@ 0x54
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6ee:	e853 3f00 	ldrex	r3, [r3]
 800b6f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	461a      	mov	r2, r3
 800b702:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b704:	643b      	str	r3, [r7, #64]	@ 0x40
 800b706:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b708:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b70a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b70c:	e841 2300 	strex	r3, r2, [r1]
 800b710:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b714:	2b00      	cmp	r3, #0
 800b716:	d1e6      	bne.n	800b6e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	3308      	adds	r3, #8
 800b71e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	e853 3f00 	ldrex	r3, [r3]
 800b726:	61fb      	str	r3, [r7, #28]
   return(result);
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	f023 0301 	bic.w	r3, r3, #1
 800b72e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	3308      	adds	r3, #8
 800b736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b738:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b73a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b73c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b73e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b740:	e841 2300 	strex	r3, r2, [r1]
 800b744:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1e5      	bne.n	800b718 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b750:	2b01      	cmp	r3, #1
 800b752:	d118      	bne.n	800b786 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	e853 3f00 	ldrex	r3, [r3]
 800b760:	60bb      	str	r3, [r7, #8]
   return(result);
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	f023 0310 	bic.w	r3, r3, #16
 800b768:	647b      	str	r3, [r7, #68]	@ 0x44
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	461a      	mov	r2, r3
 800b770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b772:	61bb      	str	r3, [r7, #24]
 800b774:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b776:	6979      	ldr	r1, [r7, #20]
 800b778:	69ba      	ldr	r2, [r7, #24]
 800b77a:	e841 2300 	strex	r3, r2, [r1]
 800b77e:	613b      	str	r3, [r7, #16]
   return(result);
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1e6      	bne.n	800b754 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2220      	movs	r2, #32
 800b78a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2200      	movs	r2, #0
 800b792:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b79a:	bf00      	nop
 800b79c:	3754      	adds	r7, #84	@ 0x54
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f7ff fbe9 	bl	800af9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ca:	bf00      	nop
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}

0800b7d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b088      	sub	sp, #32
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	e853 3f00 	ldrex	r3, [r3]
 800b7e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7ee:	61fb      	str	r3, [r7, #28]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	61bb      	str	r3, [r7, #24]
 800b7fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7fc:	6979      	ldr	r1, [r7, #20]
 800b7fe:	69ba      	ldr	r2, [r7, #24]
 800b800:	e841 2300 	strex	r3, r2, [r1]
 800b804:	613b      	str	r3, [r7, #16]
   return(result);
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d1e6      	bne.n	800b7da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2220      	movs	r2, #32
 800b810:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f7ff fbb5 	bl	800af88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b81e:	bf00      	nop
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b826:	b480      	push	{r7}
 800b828:	b083      	sub	sp, #12
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b82e:	bf00      	nop
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr

0800b83a <table_get_u1>:

// global area for passing parameters (aux, key) and for storing round keys
uint32_t AESAUX[16/sizeof(uint32_t)];
uint32_t AESKEY[11*16/sizeof(uint32_t)];

uint8_t table_get_u1(const uint8_t *table, size_t index) { return table[index]; }
 800b83a:	b480      	push	{r7}
 800b83c:	b083      	sub	sp, #12
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
 800b842:	6039      	str	r1, [r7, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	4413      	add	r3, r2
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	4618      	mov	r0, r3
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <table_get_s1>:
int8_t table_get_s1(const int8_t *table, size_t index) { return table[index]; }
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	4413      	add	r3, r2
 800b868:	f993 3000 	ldrsb.w	r3, [r3]
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr

0800b878 <table_get_u2>:
uint16_t table_get_u2(const uint16_t *table, size_t index) { return table[index]; }
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	6039      	str	r1, [r7, #0]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	005b      	lsls	r3, r3, #1
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	4413      	add	r3, r2
 800b88a:	881b      	ldrh	r3, [r3, #0]
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <table_get_u4>:
int16_t table_get_s2(const int16_t *table, size_t index) { return table[index]; }
uint32_t table_get_u4(const uint32_t *table, size_t index) { return table[index]; }
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <table_get_ostime>:
int32_t table_get_s4(const int32_t *table, size_t index) { return table[index]; }
ostime_t table_get_ostime(const ostime_t *table, size_t index) { return table[index]; }
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	009b      	lsls	r3, r3, #2
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	370c      	adds	r7, #12
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr

0800b8d8 <aesroundkeys>:

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 800b8d8:	b590      	push	{r4, r7, lr}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
    int i;
    uint32_t b;

    for( i=0; i<4; i++) {
 800b8de:	2300      	movs	r3, #0
 800b8e0:	607b      	str	r3, [r7, #4]
 800b8e2:	e021      	b.n	800b928 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 800b8e4:	4a3b      	ldr	r2, [pc, #236]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8ec:	061a      	lsls	r2, r3, #24
 800b8ee:	4939      	ldr	r1, [pc, #228]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b8f6:	021b      	lsls	r3, r3, #8
 800b8f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b8fc:	431a      	orrs	r2, r3
 800b8fe:	4935      	ldr	r1, [pc, #212]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b906:	0a1b      	lsrs	r3, r3, #8
 800b908:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b90c:	431a      	orrs	r2, r3
 800b90e:	4931      	ldr	r1, [pc, #196]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b916:	0e1b      	lsrs	r3, r3, #24
 800b918:	431a      	orrs	r2, r3
 800b91a:	492e      	ldr	r1, [pc, #184]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	3301      	adds	r3, #1
 800b926:	607b      	str	r3, [r7, #4]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	ddda      	ble.n	800b8e4 <aesroundkeys+0xc>
    }

    b = AESKEY[3];
 800b92e:	4b29      	ldr	r3, [pc, #164]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 800b934:	e045      	b.n	800b9c2 <aesroundkeys+0xea>
        if( i%4==0 ) {
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f003 0303 	and.w	r3, r3, #3
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d130      	bne.n	800b9a2 <aesroundkeys+0xca>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = ((uint32_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	0c1b      	lsrs	r3, r3, #16
 800b944:	b2db      	uxtb	r3, r3
 800b946:	4619      	mov	r1, r3
 800b948:	4823      	ldr	r0, [pc, #140]	@ (800b9d8 <aesroundkeys+0x100>)
 800b94a:	f7ff ff76 	bl	800b83a <table_get_u1>
 800b94e:	4603      	mov	r3, r0
 800b950:	061c      	lsls	r4, r3, #24
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	0a1b      	lsrs	r3, r3, #8
 800b956:	b2db      	uxtb	r3, r3
 800b958:	4619      	mov	r1, r3
 800b95a:	481f      	ldr	r0, [pc, #124]	@ (800b9d8 <aesroundkeys+0x100>)
 800b95c:	f7ff ff6d 	bl	800b83a <table_get_u1>
 800b960:	4603      	mov	r3, r0
 800b962:	041b      	lsls	r3, r3, #16
            b = ((uint32_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
 800b964:	405c      	eors	r4, r3
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	4619      	mov	r1, r3
 800b96c:	481a      	ldr	r0, [pc, #104]	@ (800b9d8 <aesroundkeys+0x100>)
 800b96e:	f7ff ff64 	bl	800b83a <table_get_u1>
 800b972:	4603      	mov	r3, r0
 800b974:	021b      	lsls	r3, r3, #8
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b >>  8)) << 16) ^
 800b976:	405c      	eors	r4, r3
                ((uint32_t)TABLE_GET_U1(AES_S,    b >> 24 )      ) ^
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	0e1b      	lsrs	r3, r3, #24
 800b97c:	4619      	mov	r1, r3
 800b97e:	4816      	ldr	r0, [pc, #88]	@ (800b9d8 <aesroundkeys+0x100>)
 800b980:	f7ff ff5b 	bl	800b83a <table_get_u1>
 800b984:	4603      	mov	r3, r0
                ((uint32_t)TABLE_GET_U1(AES_S, u1(b)      ) <<  8) ^
 800b986:	405c      	eors	r4, r3
                 TABLE_GET_U4(AES_RCON, (i-4)/4);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	3b04      	subs	r3, #4
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	da00      	bge.n	800b992 <aesroundkeys+0xba>
 800b990:	3303      	adds	r3, #3
 800b992:	109b      	asrs	r3, r3, #2
 800b994:	4619      	mov	r1, r3
 800b996:	4811      	ldr	r0, [pc, #68]	@ (800b9dc <aesroundkeys+0x104>)
 800b998:	f7ff ff7e 	bl	800b898 <table_get_u4>
 800b99c:	4603      	mov	r3, r0
            b = ((uint32_t)TABLE_GET_U1(AES_S, u1(b >> 16)) << 24) ^
 800b99e:	4063      	eors	r3, r4
 800b9a0:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	3b04      	subs	r3, #4
 800b9a6:	4a0b      	ldr	r2, [pc, #44]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b9a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	4053      	eors	r3, r2
 800b9b0:	603b      	str	r3, [r7, #0]
 800b9b2:	4908      	ldr	r1, [pc, #32]	@ (800b9d4 <aesroundkeys+0xfc>)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	607b      	str	r3, [r7, #4]
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b2b      	cmp	r3, #43	@ 0x2b
 800b9c6:	ddb6      	ble.n	800b936 <aesroundkeys+0x5e>
    }
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	370c      	adds	r7, #12
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd90      	pop	{r4, r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20000c98 	.word	0x20000c98
 800b9d8:	080149e8 	.word	0x080149e8
 800b9dc:	080149c0 	.word	0x080149c0

0800b9e0 <os_aes>:

uint32_t os_aes (uint8_t mode, uint8_t *buf, uint16_t len) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08c      	sub	sp, #48	@ 0x30
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	71fb      	strb	r3, [r7, #7]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	80bb      	strh	r3, [r7, #4]

        aesroundkeys();
 800b9f0:	f7ff ff72 	bl	800b8d8 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	f003 0308 	and.w	r3, r3, #8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d010      	beq.n	800ba20 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 800b9fe:	4b5a      	ldr	r3, [pc, #360]	@ (800bb68 <os_aes+0x188>)
 800ba00:	2200      	movs	r2, #0
 800ba02:	60da      	str	r2, [r3, #12]
 800ba04:	4b58      	ldr	r3, [pc, #352]	@ (800bb68 <os_aes+0x188>)
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	4a57      	ldr	r2, [pc, #348]	@ (800bb68 <os_aes+0x188>)
 800ba0a:	6093      	str	r3, [r2, #8]
 800ba0c:	4b56      	ldr	r3, [pc, #344]	@ (800bb68 <os_aes+0x188>)
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	4a55      	ldr	r2, [pc, #340]	@ (800bb68 <os_aes+0x188>)
 800ba12:	6053      	str	r3, [r2, #4]
 800ba14:	4b54      	ldr	r3, [pc, #336]	@ (800bb68 <os_aes+0x188>)
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	4a53      	ldr	r2, [pc, #332]	@ (800bb68 <os_aes+0x188>)
 800ba1a:	6013      	str	r3, [r2, #0]
 800ba1c:	f000 bcf9 	b.w	800c412 <os_aes+0xa32>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 800ba20:	4b51      	ldr	r3, [pc, #324]	@ (800bb68 <os_aes+0x188>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	061a      	lsls	r2, r3, #24
 800ba26:	4b50      	ldr	r3, [pc, #320]	@ (800bb68 <os_aes+0x188>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	021b      	lsls	r3, r3, #8
 800ba2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba30:	431a      	orrs	r2, r3
 800ba32:	4b4d      	ldr	r3, [pc, #308]	@ (800bb68 <os_aes+0x188>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	0a1b      	lsrs	r3, r3, #8
 800ba38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	4b4a      	ldr	r3, [pc, #296]	@ (800bb68 <os_aes+0x188>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	0e1b      	lsrs	r3, r3, #24
 800ba44:	4313      	orrs	r3, r2
 800ba46:	4a48      	ldr	r2, [pc, #288]	@ (800bb68 <os_aes+0x188>)
 800ba48:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 800ba4a:	4b47      	ldr	r3, [pc, #284]	@ (800bb68 <os_aes+0x188>)
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	061a      	lsls	r2, r3, #24
 800ba50:	4b45      	ldr	r3, [pc, #276]	@ (800bb68 <os_aes+0x188>)
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	4b42      	ldr	r3, [pc, #264]	@ (800bb68 <os_aes+0x188>)
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	0a1b      	lsrs	r3, r3, #8
 800ba62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba66:	431a      	orrs	r2, r3
 800ba68:	4b3f      	ldr	r3, [pc, #252]	@ (800bb68 <os_aes+0x188>)
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	0e1b      	lsrs	r3, r3, #24
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	4a3d      	ldr	r2, [pc, #244]	@ (800bb68 <os_aes+0x188>)
 800ba72:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 800ba74:	4b3c      	ldr	r3, [pc, #240]	@ (800bb68 <os_aes+0x188>)
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	061a      	lsls	r2, r3, #24
 800ba7a:	4b3b      	ldr	r3, [pc, #236]	@ (800bb68 <os_aes+0x188>)
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba84:	431a      	orrs	r2, r3
 800ba86:	4b38      	ldr	r3, [pc, #224]	@ (800bb68 <os_aes+0x188>)
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	0a1b      	lsrs	r3, r3, #8
 800ba8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba90:	431a      	orrs	r2, r3
 800ba92:	4b35      	ldr	r3, [pc, #212]	@ (800bb68 <os_aes+0x188>)
 800ba94:	689b      	ldr	r3, [r3, #8]
 800ba96:	0e1b      	lsrs	r3, r3, #24
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	4a33      	ldr	r2, [pc, #204]	@ (800bb68 <os_aes+0x188>)
 800ba9c:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 800ba9e:	4b32      	ldr	r3, [pc, #200]	@ (800bb68 <os_aes+0x188>)
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	061a      	lsls	r2, r3, #24
 800baa4:	4b30      	ldr	r3, [pc, #192]	@ (800bb68 <os_aes+0x188>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	021b      	lsls	r3, r3, #8
 800baaa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800baae:	431a      	orrs	r2, r3
 800bab0:	4b2d      	ldr	r3, [pc, #180]	@ (800bb68 <os_aes+0x188>)
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	0a1b      	lsrs	r3, r3, #8
 800bab6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800baba:	431a      	orrs	r2, r3
 800babc:	4b2a      	ldr	r3, [pc, #168]	@ (800bb68 <os_aes+0x188>)
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	0e1b      	lsrs	r3, r3, #24
 800bac2:	4313      	orrs	r3, r2
 800bac4:	4a28      	ldr	r2, [pc, #160]	@ (800bb68 <os_aes+0x188>)
 800bac6:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 800bac8:	f000 bca3 	b.w	800c412 <os_aes+0xa32>
            uint32_t a0, a1, a2, a3;
            uint32_t t0, t1, t2, t3;
            uint32_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 800bacc:	79fb      	ldrb	r3, [r7, #7]
 800bace:	f003 0304 	and.w	r3, r3, #4
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <os_aes+0x10a>
 800bad6:	79fb      	ldrb	r3, [r7, #7]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b00      	cmp	r3, #0
 800bade:	d011      	beq.n	800bb04 <os_aes+0x124>
 800bae0:	79fb      	ldrb	r3, [r7, #7]
 800bae2:	f003 0308 	and.w	r3, r3, #8
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10c      	bne.n	800bb04 <os_aes+0x124>
                a0 = AESAUX[0];
 800baea:	4b1f      	ldr	r3, [pc, #124]	@ (800bb68 <os_aes+0x188>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 800baf0:	4b1d      	ldr	r3, [pc, #116]	@ (800bb68 <os_aes+0x188>)
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 800baf6:	4b1c      	ldr	r3, [pc, #112]	@ (800bb68 <os_aes+0x188>)
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 800bafc:	4b1a      	ldr	r3, [pc, #104]	@ (800bb68 <os_aes+0x188>)
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	623b      	str	r3, [r7, #32]
 800bb02:	e062      	b.n	800bbca <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 800bb04:	79fb      	ldrb	r3, [r7, #7]
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d016      	beq.n	800bb3c <os_aes+0x15c>
 800bb0e:	88bb      	ldrh	r3, [r7, #4]
 800bb10:	2b10      	cmp	r3, #16
 800bb12:	d813      	bhi.n	800bb3c <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 800bb14:	2300      	movs	r3, #0
 800bb16:	623b      	str	r3, [r7, #32]
 800bb18:	6a3b      	ldr	r3, [r7, #32]
 800bb1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb22:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 800bb24:	88bb      	ldrh	r3, [r7, #4]
 800bb26:	2b10      	cmp	r3, #16
 800bb28:	d101      	bne.n	800bb2e <os_aes+0x14e>
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	e000      	b.n	800bb30 <os_aes+0x150>
 800bb2e:	2220      	movs	r2, #32
 800bb30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	b25b      	sxtb	r3, r3
 800bb38:	71fb      	strb	r3, [r7, #7]
 800bb3a:	e046      	b.n	800bbca <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 800bb3c:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 800bb3e:	2300      	movs	r3, #0
 800bb40:	61fb      	str	r3, [r7, #28]
 800bb42:	e026      	b.n	800bb92 <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	021a      	lsls	r2, r3, #8
 800bb48:	88bb      	ldrh	r3, [r7, #4]
 800bb4a:	69f9      	ldr	r1, [r7, #28]
 800bb4c:	4299      	cmp	r1, r3
 800bb4e:	d204      	bcs.n	800bb5a <os_aes+0x17a>
 800bb50:	6839      	ldr	r1, [r7, #0]
 800bb52:	69fb      	ldr	r3, [r7, #28]
 800bb54:	440b      	add	r3, r1
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	e009      	b.n	800bb6e <os_aes+0x18e>
 800bb5a:	88bb      	ldrh	r3, [r7, #4]
 800bb5c:	69f9      	ldr	r1, [r7, #28]
 800bb5e:	4299      	cmp	r1, r3
 800bb60:	d104      	bne.n	800bb6c <os_aes+0x18c>
 800bb62:	2380      	movs	r3, #128	@ 0x80
 800bb64:	e003      	b.n	800bb6e <os_aes+0x18e>
 800bb66:	bf00      	nop
 800bb68:	20000c88 	.word	0x20000c88
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	f003 0303 	and.w	r3, r3, #3
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d107      	bne.n	800bb8c <os_aes+0x1ac>
                        a0 = a1;
 800bb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 800bb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb82:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 800bb88:	69bb      	ldr	r3, [r7, #24]
 800bb8a:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	61fb      	str	r3, [r7, #28]
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	2b0f      	cmp	r3, #15
 800bb96:	d9d5      	bls.n	800bb44 <os_aes+0x164>
                    }
                }
                if( mode & AES_MIC ) {
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	f003 0302 	and.w	r3, r3, #2
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d013      	beq.n	800bbca <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 800bba2:	4ba6      	ldr	r3, [pc, #664]	@ (800be3c <os_aes+0x45c>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bba8:	4053      	eors	r3, r2
 800bbaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 800bbac:	4ba3      	ldr	r3, [pc, #652]	@ (800be3c <os_aes+0x45c>)
 800bbae:	685b      	ldr	r3, [r3, #4]
 800bbb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbb2:	4053      	eors	r3, r2
 800bbb4:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 800bbb6:	4ba1      	ldr	r3, [pc, #644]	@ (800be3c <os_aes+0x45c>)
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbbc:	4053      	eors	r3, r2
 800bbbe:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 800bbc0:	4b9e      	ldr	r3, [pc, #632]	@ (800be3c <os_aes+0x45c>)
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	6a3a      	ldr	r2, [r7, #32]
 800bbc6:	4053      	eors	r3, r2
 800bbc8:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 800bbca:	4b9d      	ldr	r3, [pc, #628]	@ (800be40 <os_aes+0x460>)
 800bbcc:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	3380      	adds	r3, #128	@ 0x80
 800bbd2:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbda:	4053      	eors	r3, r2
 800bbdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbe6:	4053      	eors	r3, r2
 800bbe8:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	3308      	adds	r3, #8
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbf2:	4053      	eors	r3, r2
 800bbf4:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	330c      	adds	r3, #12
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6a3a      	ldr	r2, [r7, #32]
 800bbfe:	4053      	eors	r3, r2
 800bc00:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	61bb      	str	r3, [r7, #24]
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	60fb      	str	r3, [r7, #12]
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	60bb      	str	r3, [r7, #8]
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 800bc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	4619      	mov	r1, r3
 800bc20:	4888      	ldr	r0, [pc, #544]	@ (800be44 <os_aes+0x464>)
 800bc22:	f7ff fe39 	bl	800b898 <table_get_u4>
 800bc26:	4602      	mov	r2, r0
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	4053      	eors	r3, r2
 800bc2c:	61bb      	str	r3, [r7, #24]
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	0a1b      	lsrs	r3, r3, #8
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	4619      	mov	r1, r3
 800bc36:	4884      	ldr	r0, [pc, #528]	@ (800be48 <os_aes+0x468>)
 800bc38:	f7ff fe2e 	bl	800b898 <table_get_u4>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	4053      	eors	r3, r2
 800bc42:	60fb      	str	r3, [r7, #12]
 800bc44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc46:	0c1b      	lsrs	r3, r3, #16
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	487f      	ldr	r0, [pc, #508]	@ (800be4c <os_aes+0x46c>)
 800bc4e:	f7ff fe23 	bl	800b898 <table_get_u4>
 800bc52:	4602      	mov	r2, r0
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	4053      	eors	r3, r2
 800bc58:	60bb      	str	r3, [r7, #8]
 800bc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc5c:	0e1b      	lsrs	r3, r3, #24
 800bc5e:	4619      	mov	r1, r3
 800bc60:	487b      	ldr	r0, [pc, #492]	@ (800be50 <os_aes+0x470>)
 800bc62:	f7ff fe19 	bl	800b898 <table_get_u4>
 800bc66:	4602      	mov	r2, r0
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	4053      	eors	r3, r2
 800bc6c:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 800bc6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	4619      	mov	r1, r3
 800bc74:	4873      	ldr	r0, [pc, #460]	@ (800be44 <os_aes+0x464>)
 800bc76:	f7ff fe0f 	bl	800b898 <table_get_u4>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4053      	eors	r3, r2
 800bc80:	60fb      	str	r3, [r7, #12]
 800bc82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc84:	0a1b      	lsrs	r3, r3, #8
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	4619      	mov	r1, r3
 800bc8a:	486f      	ldr	r0, [pc, #444]	@ (800be48 <os_aes+0x468>)
 800bc8c:	f7ff fe04 	bl	800b898 <table_get_u4>
 800bc90:	4602      	mov	r2, r0
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	4053      	eors	r3, r2
 800bc96:	60bb      	str	r3, [r7, #8]
 800bc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9a:	0c1b      	lsrs	r3, r3, #16
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	4619      	mov	r1, r3
 800bca0:	486a      	ldr	r0, [pc, #424]	@ (800be4c <os_aes+0x46c>)
 800bca2:	f7ff fdf9 	bl	800b898 <table_get_u4>
 800bca6:	4602      	mov	r2, r0
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	4053      	eors	r3, r2
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb0:	0e1b      	lsrs	r3, r3, #24
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4866      	ldr	r0, [pc, #408]	@ (800be50 <os_aes+0x470>)
 800bcb6:	f7ff fdef 	bl	800b898 <table_get_u4>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	69bb      	ldr	r3, [r7, #24]
 800bcbe:	4053      	eors	r3, r2
 800bcc0:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	485e      	ldr	r0, [pc, #376]	@ (800be44 <os_aes+0x464>)
 800bcca:	f7ff fde5 	bl	800b898 <table_get_u4>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	4053      	eors	r3, r2
 800bcd4:	60bb      	str	r3, [r7, #8]
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	0a1b      	lsrs	r3, r3, #8
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	4619      	mov	r1, r3
 800bcde:	485a      	ldr	r0, [pc, #360]	@ (800be48 <os_aes+0x468>)
 800bce0:	f7ff fdda 	bl	800b898 <table_get_u4>
 800bce4:	4602      	mov	r2, r0
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	4053      	eors	r3, r2
 800bcea:	61fb      	str	r3, [r7, #28]
 800bcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcee:	0c1b      	lsrs	r3, r3, #16
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	4855      	ldr	r0, [pc, #340]	@ (800be4c <os_aes+0x46c>)
 800bcf6:	f7ff fdcf 	bl	800b898 <table_get_u4>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	4053      	eors	r3, r2
 800bd00:	61bb      	str	r3, [r7, #24]
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	0e1b      	lsrs	r3, r3, #24
 800bd06:	4619      	mov	r1, r3
 800bd08:	4851      	ldr	r0, [pc, #324]	@ (800be50 <os_aes+0x470>)
 800bd0a:	f7ff fdc5 	bl	800b898 <table_get_u4>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4053      	eors	r3, r2
 800bd14:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 800bd16:	6a3b      	ldr	r3, [r7, #32]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	4619      	mov	r1, r3
 800bd1c:	4849      	ldr	r0, [pc, #292]	@ (800be44 <os_aes+0x464>)
 800bd1e:	f7ff fdbb 	bl	800b898 <table_get_u4>
 800bd22:	4602      	mov	r2, r0
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	4053      	eors	r3, r2
 800bd28:	61fb      	str	r3, [r7, #28]
 800bd2a:	6a3b      	ldr	r3, [r7, #32]
 800bd2c:	0a1b      	lsrs	r3, r3, #8
 800bd2e:	b2db      	uxtb	r3, r3
 800bd30:	4619      	mov	r1, r3
 800bd32:	4845      	ldr	r0, [pc, #276]	@ (800be48 <os_aes+0x468>)
 800bd34:	f7ff fdb0 	bl	800b898 <table_get_u4>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	4053      	eors	r3, r2
 800bd3e:	61bb      	str	r3, [r7, #24]
 800bd40:	6a3b      	ldr	r3, [r7, #32]
 800bd42:	0c1b      	lsrs	r3, r3, #16
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	4619      	mov	r1, r3
 800bd48:	4840      	ldr	r0, [pc, #256]	@ (800be4c <os_aes+0x46c>)
 800bd4a:	f7ff fda5 	bl	800b898 <table_get_u4>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	4053      	eors	r3, r2
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	0e1b      	lsrs	r3, r3, #24
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	483c      	ldr	r0, [pc, #240]	@ (800be50 <os_aes+0x470>)
 800bd5e:	f7ff fd9b 	bl	800b898 <table_get_u4>
 800bd62:	4602      	mov	r2, r0
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	4053      	eors	r3, r2
 800bd68:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd74:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7a:	623b      	str	r3, [r7, #32]
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	6a1b      	ldr	r3, [r3, #32]
 800bd80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	4619      	mov	r1, r3
 800bd88:	482e      	ldr	r0, [pc, #184]	@ (800be44 <os_aes+0x464>)
 800bd8a:	f7ff fd85 	bl	800b898 <table_get_u4>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	4053      	eors	r3, r2
 800bd94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bd96:	69fb      	ldr	r3, [r7, #28]
 800bd98:	0a1b      	lsrs	r3, r3, #8
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	482a      	ldr	r0, [pc, #168]	@ (800be48 <os_aes+0x468>)
 800bda0:	f7ff fd7a 	bl	800b898 <table_get_u4>
 800bda4:	4602      	mov	r2, r0
 800bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda8:	4053      	eors	r3, r2
 800bdaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	0c1b      	lsrs	r3, r3, #16
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4825      	ldr	r0, [pc, #148]	@ (800be4c <os_aes+0x46c>)
 800bdb6:	f7ff fd6f 	bl	800b898 <table_get_u4>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	4053      	eors	r3, r2
 800bdc0:	623b      	str	r3, [r7, #32]
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	0e1b      	lsrs	r3, r3, #24
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	4821      	ldr	r0, [pc, #132]	@ (800be50 <os_aes+0x470>)
 800bdca:	f7ff fd65 	bl	800b898 <table_get_u4>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd2:	4053      	eors	r3, r2
 800bdd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 800bdd6:	69bb      	ldr	r3, [r7, #24]
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	4619      	mov	r1, r3
 800bddc:	4819      	ldr	r0, [pc, #100]	@ (800be44 <os_aes+0x464>)
 800bdde:	f7ff fd5b 	bl	800b898 <table_get_u4>
 800bde2:	4602      	mov	r2, r0
 800bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde6:	4053      	eors	r3, r2
 800bde8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdea:	69bb      	ldr	r3, [r7, #24]
 800bdec:	0a1b      	lsrs	r3, r3, #8
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4815      	ldr	r0, [pc, #84]	@ (800be48 <os_aes+0x468>)
 800bdf4:	f7ff fd50 	bl	800b898 <table_get_u4>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	6a3b      	ldr	r3, [r7, #32]
 800bdfc:	4053      	eors	r3, r2
 800bdfe:	623b      	str	r3, [r7, #32]
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	0c1b      	lsrs	r3, r3, #16
 800be04:	b2db      	uxtb	r3, r3
 800be06:	4619      	mov	r1, r3
 800be08:	4810      	ldr	r0, [pc, #64]	@ (800be4c <os_aes+0x46c>)
 800be0a:	f7ff fd45 	bl	800b898 <table_get_u4>
 800be0e:	4602      	mov	r2, r0
 800be10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be12:	4053      	eors	r3, r2
 800be14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	0e1b      	lsrs	r3, r3, #24
 800be1a:	4619      	mov	r1, r3
 800be1c:	480c      	ldr	r0, [pc, #48]	@ (800be50 <os_aes+0x470>)
 800be1e:	f7ff fd3b 	bl	800b898 <table_get_u4>
 800be22:	4602      	mov	r2, r0
 800be24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be26:	4053      	eors	r3, r2
 800be28:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	4619      	mov	r1, r3
 800be30:	4804      	ldr	r0, [pc, #16]	@ (800be44 <os_aes+0x464>)
 800be32:	f7ff fd31 	bl	800b898 <table_get_u4>
 800be36:	4602      	mov	r2, r0
 800be38:	e00c      	b.n	800be54 <os_aes+0x474>
 800be3a:	bf00      	nop
 800be3c:	20000c88 	.word	0x20000c88
 800be40:	20000c98 	.word	0x20000c98
 800be44:	080156e8 	.word	0x080156e8
 800be48:	080152e8 	.word	0x080152e8
 800be4c:	08014ee8 	.word	0x08014ee8
 800be50:	08014ae8 	.word	0x08014ae8
 800be54:	6a3b      	ldr	r3, [r7, #32]
 800be56:	4053      	eors	r3, r2
 800be58:	623b      	str	r3, [r7, #32]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	0a1b      	lsrs	r3, r3, #8
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	4619      	mov	r1, r3
 800be62:	48ad      	ldr	r0, [pc, #692]	@ (800c118 <os_aes+0x738>)
 800be64:	f7ff fd18 	bl	800b898 <table_get_u4>
 800be68:	4602      	mov	r2, r0
 800be6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6c:	4053      	eors	r3, r2
 800be6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	0c1b      	lsrs	r3, r3, #16
 800be74:	b2db      	uxtb	r3, r3
 800be76:	4619      	mov	r1, r3
 800be78:	48a8      	ldr	r0, [pc, #672]	@ (800c11c <os_aes+0x73c>)
 800be7a:	f7ff fd0d 	bl	800b898 <table_get_u4>
 800be7e:	4602      	mov	r2, r0
 800be80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be82:	4053      	eors	r3, r2
 800be84:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	0e1b      	lsrs	r3, r3, #24
 800be8a:	4619      	mov	r1, r3
 800be8c:	48a4      	ldr	r0, [pc, #656]	@ (800c120 <os_aes+0x740>)
 800be8e:	f7ff fd03 	bl	800b898 <table_get_u4>
 800be92:	4602      	mov	r2, r0
 800be94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be96:	4053      	eors	r3, r2
 800be98:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	4619      	mov	r1, r3
 800bea0:	48a0      	ldr	r0, [pc, #640]	@ (800c124 <os_aes+0x744>)
 800bea2:	f7ff fcf9 	bl	800b898 <table_get_u4>
 800bea6:	4602      	mov	r2, r0
 800bea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beaa:	4053      	eors	r3, r2
 800beac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	0a1b      	lsrs	r3, r3, #8
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	4619      	mov	r1, r3
 800beb6:	4898      	ldr	r0, [pc, #608]	@ (800c118 <os_aes+0x738>)
 800beb8:	f7ff fcee 	bl	800b898 <table_get_u4>
 800bebc:	4602      	mov	r2, r0
 800bebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bec0:	4053      	eors	r3, r2
 800bec2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	0c1b      	lsrs	r3, r3, #16
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	4619      	mov	r1, r3
 800becc:	4893      	ldr	r0, [pc, #588]	@ (800c11c <os_aes+0x73c>)
 800bece:	f7ff fce3 	bl	800b898 <table_get_u4>
 800bed2:	4602      	mov	r2, r0
 800bed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed6:	4053      	eors	r3, r2
 800bed8:	627b      	str	r3, [r7, #36]	@ 0x24
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	0e1b      	lsrs	r3, r3, #24
 800bede:	4619      	mov	r1, r3
 800bee0:	488f      	ldr	r0, [pc, #572]	@ (800c120 <os_aes+0x740>)
 800bee2:	f7ff fcd9 	bl	800b898 <table_get_u4>
 800bee6:	4602      	mov	r2, r0
 800bee8:	6a3b      	ldr	r3, [r7, #32]
 800beea:	4053      	eors	r3, r2
 800beec:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	3320      	adds	r3, #32
 800bef2:	617b      	str	r3, [r7, #20]
 800bef4:	697a      	ldr	r2, [r7, #20]
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	429a      	cmp	r2, r3
 800befa:	f4ff ae82 	bcc.w	800bc02 <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	61bb      	str	r3, [r7, #24]
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	699b      	ldr	r3, [r3, #24]
 800bf08:	60fb      	str	r3, [r7, #12]
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	69db      	ldr	r3, [r3, #28]
 800bf0e:	60bb      	str	r3, [r7, #8]
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 800bf16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf18:	b2db      	uxtb	r3, r3
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4881      	ldr	r0, [pc, #516]	@ (800c124 <os_aes+0x744>)
 800bf1e:	f7ff fcbb 	bl	800b898 <table_get_u4>
 800bf22:	4602      	mov	r2, r0
 800bf24:	69bb      	ldr	r3, [r7, #24]
 800bf26:	4053      	eors	r3, r2
 800bf28:	61bb      	str	r3, [r7, #24]
 800bf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf2c:	0a1b      	lsrs	r3, r3, #8
 800bf2e:	b2db      	uxtb	r3, r3
 800bf30:	4619      	mov	r1, r3
 800bf32:	4879      	ldr	r0, [pc, #484]	@ (800c118 <os_aes+0x738>)
 800bf34:	f7ff fcb0 	bl	800b898 <table_get_u4>
 800bf38:	4602      	mov	r2, r0
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	4053      	eors	r3, r2
 800bf3e:	60fb      	str	r3, [r7, #12]
 800bf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf42:	0c1b      	lsrs	r3, r3, #16
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	4619      	mov	r1, r3
 800bf48:	4874      	ldr	r0, [pc, #464]	@ (800c11c <os_aes+0x73c>)
 800bf4a:	f7ff fca5 	bl	800b898 <table_get_u4>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	4053      	eors	r3, r2
 800bf54:	60bb      	str	r3, [r7, #8]
 800bf56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf58:	0e1b      	lsrs	r3, r3, #24
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	4870      	ldr	r0, [pc, #448]	@ (800c120 <os_aes+0x740>)
 800bf5e:	f7ff fc9b 	bl	800b898 <table_get_u4>
 800bf62:	4602      	mov	r2, r0
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	4053      	eors	r3, r2
 800bf68:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 800bf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	4619      	mov	r1, r3
 800bf70:	486c      	ldr	r0, [pc, #432]	@ (800c124 <os_aes+0x744>)
 800bf72:	f7ff fc91 	bl	800b898 <table_get_u4>
 800bf76:	4602      	mov	r2, r0
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	4053      	eors	r3, r2
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	4619      	mov	r1, r3
 800bf86:	4864      	ldr	r0, [pc, #400]	@ (800c118 <os_aes+0x738>)
 800bf88:	f7ff fc86 	bl	800b898 <table_get_u4>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	68bb      	ldr	r3, [r7, #8]
 800bf90:	4053      	eors	r3, r2
 800bf92:	60bb      	str	r3, [r7, #8]
 800bf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf96:	0c1b      	lsrs	r3, r3, #16
 800bf98:	b2db      	uxtb	r3, r3
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	485f      	ldr	r0, [pc, #380]	@ (800c11c <os_aes+0x73c>)
 800bf9e:	f7ff fc7b 	bl	800b898 <table_get_u4>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	4053      	eors	r3, r2
 800bfa8:	61fb      	str	r3, [r7, #28]
 800bfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfac:	0e1b      	lsrs	r3, r3, #24
 800bfae:	4619      	mov	r1, r3
 800bfb0:	485b      	ldr	r0, [pc, #364]	@ (800c120 <os_aes+0x740>)
 800bfb2:	f7ff fc71 	bl	800b898 <table_get_u4>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	4053      	eors	r3, r2
 800bfbc:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	4857      	ldr	r0, [pc, #348]	@ (800c124 <os_aes+0x744>)
 800bfc6:	f7ff fc67 	bl	800b898 <table_get_u4>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	4053      	eors	r3, r2
 800bfd0:	60bb      	str	r3, [r7, #8]
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd4:	0a1b      	lsrs	r3, r3, #8
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	4619      	mov	r1, r3
 800bfda:	484f      	ldr	r0, [pc, #316]	@ (800c118 <os_aes+0x738>)
 800bfdc:	f7ff fc5c 	bl	800b898 <table_get_u4>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	4053      	eors	r3, r2
 800bfe6:	61fb      	str	r3, [r7, #28]
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfea:	0c1b      	lsrs	r3, r3, #16
 800bfec:	b2db      	uxtb	r3, r3
 800bfee:	4619      	mov	r1, r3
 800bff0:	484a      	ldr	r0, [pc, #296]	@ (800c11c <os_aes+0x73c>)
 800bff2:	f7ff fc51 	bl	800b898 <table_get_u4>
 800bff6:	4602      	mov	r2, r0
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	4053      	eors	r3, r2
 800bffc:	61bb      	str	r3, [r7, #24]
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	0e1b      	lsrs	r3, r3, #24
 800c002:	4619      	mov	r1, r3
 800c004:	4846      	ldr	r0, [pc, #280]	@ (800c120 <os_aes+0x740>)
 800c006:	f7ff fc47 	bl	800b898 <table_get_u4>
 800c00a:	4602      	mov	r2, r0
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4053      	eors	r3, r2
 800c010:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 800c012:	6a3b      	ldr	r3, [r7, #32]
 800c014:	b2db      	uxtb	r3, r3
 800c016:	4619      	mov	r1, r3
 800c018:	4842      	ldr	r0, [pc, #264]	@ (800c124 <os_aes+0x744>)
 800c01a:	f7ff fc3d 	bl	800b898 <table_get_u4>
 800c01e:	4602      	mov	r2, r0
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	4053      	eors	r3, r2
 800c024:	61fb      	str	r3, [r7, #28]
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	0a1b      	lsrs	r3, r3, #8
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	4619      	mov	r1, r3
 800c02e:	483a      	ldr	r0, [pc, #232]	@ (800c118 <os_aes+0x738>)
 800c030:	f7ff fc32 	bl	800b898 <table_get_u4>
 800c034:	4602      	mov	r2, r0
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	4053      	eors	r3, r2
 800c03a:	61bb      	str	r3, [r7, #24]
 800c03c:	6a3b      	ldr	r3, [r7, #32]
 800c03e:	0c1b      	lsrs	r3, r3, #16
 800c040:	b2db      	uxtb	r3, r3
 800c042:	4619      	mov	r1, r3
 800c044:	4835      	ldr	r0, [pc, #212]	@ (800c11c <os_aes+0x73c>)
 800c046:	f7ff fc27 	bl	800b898 <table_get_u4>
 800c04a:	4602      	mov	r2, r0
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	4053      	eors	r3, r2
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	0e1b      	lsrs	r3, r3, #24
 800c056:	4619      	mov	r1, r3
 800c058:	4831      	ldr	r0, [pc, #196]	@ (800c120 <os_aes+0x740>)
 800c05a:	f7ff fc1d 	bl	800b898 <table_get_u4>
 800c05e:	4602      	mov	r2, r0
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	4053      	eors	r3, r2
 800c064:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c06c:	69fb      	ldr	r3, [r7, #28]
 800c06e:	0e1b      	lsrs	r3, r3, #24
 800c070:	4619      	mov	r1, r3
 800c072:	482d      	ldr	r0, [pc, #180]	@ (800c128 <os_aes+0x748>)
 800c074:	f7ff fbe1 	bl	800b83a <table_get_u1>
 800c078:	4603      	mov	r3, r0
 800c07a:	061b      	lsls	r3, r3, #24
 800c07c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c07e:	4053      	eors	r3, r2
 800c080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c082:	69bb      	ldr	r3, [r7, #24]
 800c084:	0c1b      	lsrs	r3, r3, #16
 800c086:	b2db      	uxtb	r3, r3
 800c088:	4619      	mov	r1, r3
 800c08a:	4827      	ldr	r0, [pc, #156]	@ (800c128 <os_aes+0x748>)
 800c08c:	f7ff fbd5 	bl	800b83a <table_get_u1>
 800c090:	4603      	mov	r3, r0
 800c092:	041b      	lsls	r3, r3, #16
 800c094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c096:	4053      	eors	r3, r2
 800c098:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	0a1b      	lsrs	r3, r3, #8
 800c09e:	b2db      	uxtb	r3, r3
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	4821      	ldr	r0, [pc, #132]	@ (800c128 <os_aes+0x748>)
 800c0a4:	f7ff fbc9 	bl	800b83a <table_get_u1>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	021b      	lsls	r3, r3, #8
 800c0ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0ae:	4053      	eors	r3, r2
 800c0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	b2db      	uxtb	r3, r3
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	481b      	ldr	r0, [pc, #108]	@ (800c128 <os_aes+0x748>)
 800c0ba:	f7ff fbbe 	bl	800b83a <table_get_u1>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	461a      	mov	r2, r3
 800c0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c4:	4053      	eors	r3, r2
 800c0c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	0e1b      	lsrs	r3, r3, #24
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4814      	ldr	r0, [pc, #80]	@ (800c128 <os_aes+0x748>)
 800c0d6:	f7ff fbb0 	bl	800b83a <table_get_u1>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	061b      	lsls	r3, r3, #24
 800c0de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0e0:	4053      	eors	r3, r2
 800c0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	0c1b      	lsrs	r3, r3, #16
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	480e      	ldr	r0, [pc, #56]	@ (800c128 <os_aes+0x748>)
 800c0ee:	f7ff fba4 	bl	800b83a <table_get_u1>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	041b      	lsls	r3, r3, #16
 800c0f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0f8:	4053      	eors	r3, r2
 800c0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	0a1b      	lsrs	r3, r3, #8
 800c100:	b2db      	uxtb	r3, r3
 800c102:	4619      	mov	r1, r3
 800c104:	4808      	ldr	r0, [pc, #32]	@ (800c128 <os_aes+0x748>)
 800c106:	f7ff fb98 	bl	800b83a <table_get_u1>
 800c10a:	4603      	mov	r3, r0
 800c10c:	021b      	lsls	r3, r3, #8
 800c10e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c110:	4053      	eors	r3, r2
 800c112:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c114:	e00a      	b.n	800c12c <os_aes+0x74c>
 800c116:	bf00      	nop
 800c118:	080152e8 	.word	0x080152e8
 800c11c:	08014ee8 	.word	0x08014ee8
 800c120:	08014ae8 	.word	0x08014ae8
 800c124:	080156e8 	.word	0x080156e8
 800c128:	080149e8 	.word	0x080149e8
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	4619      	mov	r1, r3
 800c132:	487e      	ldr	r0, [pc, #504]	@ (800c32c <os_aes+0x94c>)
 800c134:	f7ff fb81 	bl	800b83a <table_get_u1>
 800c138:	4603      	mov	r3, r0
 800c13a:	461a      	mov	r2, r3
 800c13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13e:	4053      	eors	r3, r2
 800c140:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c146:	627b      	str	r3, [r7, #36]	@ 0x24
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	0e1b      	lsrs	r3, r3, #24
 800c14c:	4619      	mov	r1, r3
 800c14e:	4877      	ldr	r0, [pc, #476]	@ (800c32c <os_aes+0x94c>)
 800c150:	f7ff fb73 	bl	800b83a <table_get_u1>
 800c154:	4603      	mov	r3, r0
 800c156:	061b      	lsls	r3, r3, #24
 800c158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c15a:	4053      	eors	r3, r2
 800c15c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	0c1b      	lsrs	r3, r3, #16
 800c162:	b2db      	uxtb	r3, r3
 800c164:	4619      	mov	r1, r3
 800c166:	4871      	ldr	r0, [pc, #452]	@ (800c32c <os_aes+0x94c>)
 800c168:	f7ff fb67 	bl	800b83a <table_get_u1>
 800c16c:	4603      	mov	r3, r0
 800c16e:	041b      	lsls	r3, r3, #16
 800c170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c172:	4053      	eors	r3, r2
 800c174:	627b      	str	r3, [r7, #36]	@ 0x24
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	0a1b      	lsrs	r3, r3, #8
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	4619      	mov	r1, r3
 800c17e:	486b      	ldr	r0, [pc, #428]	@ (800c32c <os_aes+0x94c>)
 800c180:	f7ff fb5b 	bl	800b83a <table_get_u1>
 800c184:	4603      	mov	r3, r0
 800c186:	021b      	lsls	r3, r3, #8
 800c188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c18a:	4053      	eors	r3, r2
 800c18c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	b2db      	uxtb	r3, r3
 800c192:	4619      	mov	r1, r3
 800c194:	4865      	ldr	r0, [pc, #404]	@ (800c32c <os_aes+0x94c>)
 800c196:	f7ff fb50 	bl	800b83a <table_get_u1>
 800c19a:	4603      	mov	r3, r0
 800c19c:	461a      	mov	r2, r3
 800c19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a0:	4053      	eors	r3, r2
 800c1a2:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1a8:	623b      	str	r3, [r7, #32]
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	0e1b      	lsrs	r3, r3, #24
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	485e      	ldr	r0, [pc, #376]	@ (800c32c <os_aes+0x94c>)
 800c1b2:	f7ff fb42 	bl	800b83a <table_get_u1>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	061b      	lsls	r3, r3, #24
 800c1ba:	6a3a      	ldr	r2, [r7, #32]
 800c1bc:	4053      	eors	r3, r2
 800c1be:	623b      	str	r3, [r7, #32]
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	0c1b      	lsrs	r3, r3, #16
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	4858      	ldr	r0, [pc, #352]	@ (800c32c <os_aes+0x94c>)
 800c1ca:	f7ff fb36 	bl	800b83a <table_get_u1>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	041b      	lsls	r3, r3, #16
 800c1d2:	6a3a      	ldr	r2, [r7, #32]
 800c1d4:	4053      	eors	r3, r2
 800c1d6:	623b      	str	r3, [r7, #32]
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	b2db      	uxtb	r3, r3
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4852      	ldr	r0, [pc, #328]	@ (800c32c <os_aes+0x94c>)
 800c1e2:	f7ff fb2a 	bl	800b83a <table_get_u1>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	021b      	lsls	r3, r3, #8
 800c1ea:	6a3a      	ldr	r2, [r7, #32]
 800c1ec:	4053      	eors	r3, r2
 800c1ee:	623b      	str	r3, [r7, #32]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	484d      	ldr	r0, [pc, #308]	@ (800c32c <os_aes+0x94c>)
 800c1f8:	f7ff fb1f 	bl	800b83a <table_get_u1>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	461a      	mov	r2, r3
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	4053      	eors	r3, r2
 800c204:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800c206:	79fb      	ldrb	r3, [r7, #7]
 800c208:	f003 0302 	and.w	r3, r3, #2
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d056      	beq.n	800c2be <os_aes+0x8de>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 800c210:	79fb      	ldrb	r3, [r7, #7]
 800c212:	111b      	asrs	r3, r3, #4
 800c214:	f003 0303 	and.w	r3, r3, #3
 800c218:	61bb      	str	r3, [r7, #24]
 800c21a:	69bb      	ldr	r3, [r7, #24]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d041      	beq.n	800c2a4 <os_aes+0x8c4>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 800c220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c222:	0fdb      	lsrs	r3, r3, #31
 800c224:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 800c226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c228:	005a      	lsls	r2, r3, #1
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	0fdb      	lsrs	r3, r3, #31
 800c22e:	4313      	orrs	r3, r2
 800c230:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 800c232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c234:	005a      	lsls	r2, r3, #1
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c238:	0fdb      	lsrs	r3, r3, #31
 800c23a:	4313      	orrs	r3, r2
 800c23c:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 800c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c240:	005a      	lsls	r2, r3, #1
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	0fdb      	lsrs	r3, r3, #31
 800c246:	4313      	orrs	r3, r2
 800c248:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 800c24a:	6a3b      	ldr	r3, [r7, #32]
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 800c250:	69fb      	ldr	r3, [r7, #28]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d003      	beq.n	800c25e <os_aes+0x87e>
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 800c25c:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	3b01      	subs	r3, #1
 800c262:	61bb      	str	r3, [r7, #24]
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1da      	bne.n	800c220 <os_aes+0x840>

                    AESAUX[0] ^= a0;
 800c26a:	4b31      	ldr	r3, [pc, #196]	@ (800c330 <os_aes+0x950>)
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c270:	4053      	eors	r3, r2
 800c272:	4a2f      	ldr	r2, [pc, #188]	@ (800c330 <os_aes+0x950>)
 800c274:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 800c276:	4b2e      	ldr	r3, [pc, #184]	@ (800c330 <os_aes+0x950>)
 800c278:	685a      	ldr	r2, [r3, #4]
 800c27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27c:	4053      	eors	r3, r2
 800c27e:	4a2c      	ldr	r2, [pc, #176]	@ (800c330 <os_aes+0x950>)
 800c280:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 800c282:	4b2b      	ldr	r3, [pc, #172]	@ (800c330 <os_aes+0x950>)
 800c284:	689a      	ldr	r2, [r3, #8]
 800c286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c288:	4053      	eors	r3, r2
 800c28a:	4a29      	ldr	r2, [pc, #164]	@ (800c330 <os_aes+0x950>)
 800c28c:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 800c28e:	4b28      	ldr	r3, [pc, #160]	@ (800c330 <os_aes+0x950>)
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	4053      	eors	r3, r2
 800c296:	4a26      	ldr	r2, [pc, #152]	@ (800c330 <os_aes+0x950>)
 800c298:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 800c29a:	79fb      	ldrb	r3, [r7, #7]
 800c29c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800c2a0:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 800c2a2:	e44c      	b.n	800bb3e <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 800c2a4:	4a22      	ldr	r2, [pc, #136]	@ (800c330 <os_aes+0x950>)
 800c2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a8:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 800c2aa:	4a21      	ldr	r2, [pc, #132]	@ (800c330 <os_aes+0x950>)
 800c2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ae:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 800c2b0:	4a1f      	ldr	r2, [pc, #124]	@ (800c330 <os_aes+0x950>)
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 800c2b6:	4a1e      	ldr	r2, [pc, #120]	@ (800c330 <os_aes+0x950>)
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	60d3      	str	r3, [r2, #12]
 800c2bc:	e095      	b.n	800c3ea <os_aes+0xa0a>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 800c2be:	79fb      	ldrb	r3, [r7, #7]
 800c2c0:	f003 0304 	and.w	r3, r3, #4
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d035      	beq.n	800c334 <os_aes+0x954>
                    t0 = (len > 16) ? 16: len;
 800c2c8:	88bb      	ldrh	r3, [r7, #4]
 800c2ca:	2b10      	cmp	r3, #16
 800c2cc:	bf28      	it	cs
 800c2ce:	2310      	movcs	r3, #16
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61bb      	str	r3, [r7, #24]
 800c2d8:	e01d      	b.n	800c316 <os_aes+0x936>
                        buf[t1] ^= (a0>>24);
 800c2da:	683a      	ldr	r2, [r7, #0]
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	4413      	add	r3, r2
 800c2e0:	7819      	ldrb	r1, [r3, #0]
 800c2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e4:	0e1b      	lsrs	r3, r3, #24
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	6838      	ldr	r0, [r7, #0]
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	4403      	add	r3, r0
 800c2ee:	404a      	eors	r2, r1
 800c2f0:	b2d2      	uxtb	r2, r2
 800c2f2:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800c2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2f6:	021b      	lsls	r3, r3, #8
 800c2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	f003 0303 	and.w	r3, r3, #3
 800c300:	2b03      	cmp	r3, #3
 800c302:	d105      	bne.n	800c310 <os_aes+0x930>
                            a0 = a1;
 800c304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c306:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 800c310:	69bb      	ldr	r3, [r7, #24]
 800c312:	3301      	adds	r3, #1
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	69ba      	ldr	r2, [r7, #24]
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d3dd      	bcc.n	800c2da <os_aes+0x8fa>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 800c31e:	4b04      	ldr	r3, [pc, #16]	@ (800c330 <os_aes+0x950>)
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	3301      	adds	r3, #1
 800c324:	4a02      	ldr	r2, [pc, #8]	@ (800c330 <os_aes+0x950>)
 800c326:	60d3      	str	r3, [r2, #12]
 800c328:	e05f      	b.n	800c3ea <os_aes+0xa0a>
 800c32a:	bf00      	nop
 800c32c:	080149e8 	.word	0x080149e8
 800c330:	20000c88 	.word	0x20000c88
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 800c334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c336:	0e1b      	lsrs	r3, r3, #24
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	701a      	strb	r2, [r3, #0]
 800c33e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c340:	0c1a      	lsrs	r2, r3, #16
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	3301      	adds	r3, #1
 800c346:	b2d2      	uxtb	r2, r2
 800c348:	701a      	strb	r2, [r3, #0]
 800c34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34c:	0a1a      	lsrs	r2, r3, #8
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	3302      	adds	r3, #2
 800c352:	b2d2      	uxtb	r2, r2
 800c354:	701a      	strb	r2, [r3, #0]
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	3303      	adds	r3, #3
 800c35a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c35c:	b2d2      	uxtb	r2, r2
 800c35e:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 800c360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c362:	0e1a      	lsrs	r2, r3, #24
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	3304      	adds	r3, #4
 800c368:	b2d2      	uxtb	r2, r2
 800c36a:	701a      	strb	r2, [r3, #0]
 800c36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36e:	0c1a      	lsrs	r2, r3, #16
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	3305      	adds	r3, #5
 800c374:	b2d2      	uxtb	r2, r2
 800c376:	701a      	strb	r2, [r3, #0]
 800c378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37a:	0a1a      	lsrs	r2, r3, #8
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	3306      	adds	r3, #6
 800c380:	b2d2      	uxtb	r2, r2
 800c382:	701a      	strb	r2, [r3, #0]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	3307      	adds	r3, #7
 800c388:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c38a:	b2d2      	uxtb	r2, r2
 800c38c:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 800c38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c390:	0e1a      	lsrs	r2, r3, #24
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	3308      	adds	r3, #8
 800c396:	b2d2      	uxtb	r2, r2
 800c398:	701a      	strb	r2, [r3, #0]
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	0c1a      	lsrs	r2, r3, #16
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	3309      	adds	r3, #9
 800c3a2:	b2d2      	uxtb	r2, r2
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	0a1a      	lsrs	r2, r3, #8
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	330a      	adds	r3, #10
 800c3ae:	b2d2      	uxtb	r2, r2
 800c3b0:	701a      	strb	r2, [r3, #0]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	330b      	adds	r3, #11
 800c3b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3b8:	b2d2      	uxtb	r2, r2
 800c3ba:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 800c3bc:	6a3b      	ldr	r3, [r7, #32]
 800c3be:	0e1a      	lsrs	r2, r3, #24
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	330c      	adds	r3, #12
 800c3c4:	b2d2      	uxtb	r2, r2
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	6a3b      	ldr	r3, [r7, #32]
 800c3ca:	0c1a      	lsrs	r2, r3, #16
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	330d      	adds	r3, #13
 800c3d0:	b2d2      	uxtb	r2, r2
 800c3d2:	701a      	strb	r2, [r3, #0]
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	0a1a      	lsrs	r2, r3, #8
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	330e      	adds	r3, #14
 800c3dc:	b2d2      	uxtb	r2, r2
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	330f      	adds	r3, #15
 800c3e4:	6a3a      	ldr	r2, [r7, #32]
 800c3e6:	b2d2      	uxtb	r2, r2
 800c3e8:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	f003 0302 	and.w	r3, r3, #2
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d004      	beq.n	800c3fe <os_aes+0xa1e>
 800c3f4:	79fb      	ldrb	r3, [r7, #7]
 800c3f6:	f003 0308 	and.w	r3, r3, #8
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d005      	beq.n	800c40a <os_aes+0xa2a>
                buf += 16;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	3310      	adds	r3, #16
 800c402:	603b      	str	r3, [r7, #0]
                len -= 16;
 800c404:	88bb      	ldrh	r3, [r7, #4]
 800c406:	3b10      	subs	r3, #16
 800c408:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 800c40a:	79fb      	ldrb	r3, [r7, #7]
 800c40c:	f043 0308 	orr.w	r3, r3, #8
 800c410:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 800c412:	88bb      	ldrh	r3, [r7, #4]
 800c414:	b25b      	sxtb	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	f73f ab58 	bgt.w	800bacc <os_aes+0xec>
        }
        return AESAUX[0];
 800c41c:	4b02      	ldr	r3, [pc, #8]	@ (800c428 <os_aes+0xa48>)
 800c41e:	681b      	ldr	r3, [r3, #0]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3730      	adds	r7, #48	@ 0x30
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	20000c88 	.word	0x20000c88

0800c42c <getSf>:
typedef uint32_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	80fb      	strh	r3, [r7, #6]
 800c436:	88fb      	ldrh	r3, [r7, #6]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	f003 0307 	and.w	r3, r3, #7
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	4618      	mov	r0, r3
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	80fb      	strh	r3, [r7, #6]
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	08db      	lsrs	r3, r3, #3
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	f003 0303 	and.w	r3, r3, #3
 800c462:	b2db      	uxtb	r3, r3
 800c464:	4618      	mov	r0, r3
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr

0800c470 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 800c470:	b480      	push	{r7}
 800c472:	b083      	sub	sp, #12
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	80fb      	strh	r3, [r7, #6]
 800c47a:	88fb      	ldrh	r3, [r7, #6]
 800c47c:	095b      	lsrs	r3, r3, #5
 800c47e:	b29b      	uxth	r3, r3
 800c480:	b2db      	uxtb	r3, r3
 800c482:	f003 0303 	and.w	r3, r3, #3
 800c486:	b2db      	uxtb	r3, r3
 800c488:	4618      	mov	r0, r3
 800c48a:	370c      	adds	r7, #12
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr

0800c494 <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	4603      	mov	r3, r0
 800c49c:	460a      	mov	r2, r1
 800c49e:	80fb      	strh	r3, [r7, #6]
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	717b      	strb	r3, [r7, #5]
 800c4a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4a8:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800c4ac:	b21a      	sxth	r2, r3
 800c4ae:	797b      	ldrb	r3, [r7, #5]
 800c4b0:	015b      	lsls	r3, r3, #5
 800c4b2:	b21b      	sxth	r3, r3
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	b21b      	sxth	r3, r3
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c4:	4770      	bx	lr

0800c4c6 <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800c4c6:	b480      	push	{r7}
 800c4c8:	b083      	sub	sp, #12
 800c4ca:	af00      	add	r7, sp, #0
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	80fb      	strh	r3, [r7, #6]
 800c4d0:	88fb      	ldrh	r3, [r7, #6]
 800c4d2:	09db      	lsrs	r3, r3, #7
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	f003 0301 	and.w	r3, r3, #1
 800c4da:	4618      	mov	r0, r3
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e4:	4770      	bx	lr

0800c4e6 <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 800c4e6:	b480      	push	{r7}
 800c4e8:	b083      	sub	sp, #12
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	6039      	str	r1, [r7, #0]
 800c4f0:	80fb      	strh	r3, [r7, #6]
 800c4f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c4f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c4fa:	b21a      	sxth	r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	01db      	lsls	r3, r3, #7
 800c500:	b21b      	sxth	r3, r3
 800c502:	4313      	orrs	r3, r2
 800c504:	b21b      	sxth	r3, r3
 800c506:	b29b      	uxth	r3, r3
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr

0800c514 <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	80fb      	strh	r3, [r7, #6]
 800c51e:	88fb      	ldrh	r3, [r7, #6]
 800c520:	0a1b      	lsrs	r3, r3, #8
 800c522:	b29b      	uxth	r3, r3
 800c524:	b2db      	uxtb	r3, r3
 800c526:	4618      	mov	r0, r3
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr

0800c532 <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 800c532:	b480      	push	{r7}
 800c534:	b083      	sub	sp, #12
 800c536:	af00      	add	r7, sp, #0
 800c538:	4603      	mov	r3, r0
 800c53a:	6039      	str	r1, [r7, #0]
 800c53c:	80fb      	strh	r3, [r7, #6]
 800c53e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	b21a      	sxth	r2, r3
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	021b      	lsls	r3, r3, #8
 800c54a:	b21b      	sxth	r3, r3
 800c54c:	4313      	orrs	r3, r2
 800c54e:	b21b      	sxth	r3, r3
 800c550:	b29b      	uxth	r3, r3
 800c552:	4618      	mov	r0, r3
 800c554:	370c      	adds	r7, #12
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
	...

0800c560 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern CONST_TABLE(uint8_t, _DR2RPS_CRC)[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)TABLE_GET_U1(_DR2RPS_CRC, dr+1); }
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	3301      	adds	r3, #1
 800c56e:	4619      	mov	r1, r3
 800c570:	4803      	ldr	r0, [pc, #12]	@ (800c580 <updr2rps+0x20>)
 800c572:	f7ff f962 	bl	800b83a <table_get_u1>
 800c576:	4603      	mov	r3, r0
 800c578:	4618      	mov	r0, r3
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	08015ae8 	.word	0x08015ae8

0800c584 <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	4603      	mov	r3, r0
 800c58c:	71fb      	strb	r3, [r7, #7]
 800c58e:	79fb      	ldrb	r3, [r7, #7]
 800c590:	4618      	mov	r0, r3
 800c592:	f7ff ffe5 	bl	800c560 <updr2rps>
 800c596:	4603      	mov	r3, r0
 800c598:	2101      	movs	r1, #1
 800c59a:	4618      	mov	r0, r3
 800c59c:	f7ff ffa3 	bl	800c4e6 <setNocrc>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3708      	adds	r7, #8
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}
	...

0800c5ac <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr+2)==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr  )==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	71fb      	strb	r3, [r7, #7]
 800c5b6:	79fb      	ldrb	r3, [r7, #7]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4807      	ldr	r0, [pc, #28]	@ (800c5d8 <decDR+0x2c>)
 800c5bc:	f7ff f93d 	bl	800b83a <table_get_u1>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2bff      	cmp	r3, #255	@ 0xff
 800c5c4:	d003      	beq.n	800c5ce <decDR+0x22>
 800c5c6:	79fb      	ldrb	r3, [r7, #7]
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	e000      	b.n	800c5d0 <decDR+0x24>
 800c5ce:	79fb      	ldrb	r3, [r7, #7]
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	3708      	adds	r7, #8
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	bd80      	pop	{r7, pc}
 800c5d8:	08015ae8 	.word	0x08015ae8

0800c5dc <validDR>:
inline dr_t  assertDR (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr+1)==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bool validDR  (dr_t dr) { return TABLE_GET_U1(_DR2RPS_CRC, dr+1)!=ILLEGAL_RPS; } // in range
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b082      	sub	sp, #8
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	71fb      	strb	r3, [r7, #7]
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	3301      	adds	r3, #1
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	4806      	ldr	r0, [pc, #24]	@ (800c608 <validDR+0x2c>)
 800c5ee:	f7ff f924 	bl	800b83a <table_get_u1>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2bff      	cmp	r3, #255	@ 0xff
 800c5f6:	bf14      	ite	ne
 800c5f8:	2301      	movne	r3, #1
 800c5fa:	2300      	moveq	r3, #0
 800c5fc:	b2db      	uxtb	r3, r3
 800c5fe:	4618      	mov	r0, r3
 800c600:	3708      	adds	r7, #8
 800c602:	46bd      	mov	sp, r7
 800c604:	bd80      	pop	{r7, pc}
 800c606:	bf00      	nop
 800c608:	08015ae8 	.word	0x08015ae8

0800c60c <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, uint8_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	4603      	mov	r3, r0
 800c614:	460a      	mov	r2, r1
 800c616:	71fb      	strb	r3, [r7, #7]
 800c618:	4613      	mov	r3, r2
 800c61a:	71bb      	strb	r3, [r7, #6]
 800c61c:	e005      	b.n	800c62a <lowerDR+0x1e>
 800c61e:	79fb      	ldrb	r3, [r7, #7]
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff ffc3 	bl	800c5ac <decDR>
 800c626:	4603      	mov	r3, r0
 800c628:	71fb      	strb	r3, [r7, #7]
 800c62a:	79bb      	ldrb	r3, [r7, #6]
 800c62c:	1e5a      	subs	r2, r3, #1
 800c62e:	71ba      	strb	r2, [r7, #6]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d1f4      	bne.n	800c61e <lowerDR+0x12>
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	4618      	mov	r0, r3
 800c638:	3708      	adds	r7, #8
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
uint16_t os_rlsbf2 (const uint8_t *buf) {
 800c63e:	b480      	push	{r7}
 800c640:	b083      	sub	sp, #12
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
    return (uint16_t)((uint16_t)buf[0] | ((uint16_t)buf[1]<<8));
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	b21a      	sxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	3301      	adds	r3, #1
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	021b      	lsls	r3, r3, #8
 800c654:	b21b      	sxth	r3, r3
 800c656:	4313      	orrs	r3, r2
 800c658:	b21b      	sxth	r3, r3
 800c65a:	b29b      	uxth	r3, r3
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	370c      	adds	r7, #12
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
uint32_t os_rlsbf4 (const uint8_t *buf) {
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
    return (uint32_t)((uint32_t)buf[0] | ((uint32_t)buf[1]<<8) | ((uint32_t)buf[2]<<16) | ((uint32_t)buf[3]<<24));
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	461a      	mov	r2, r3
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3301      	adds	r3, #1
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	021b      	lsls	r3, r3, #8
 800c67e:	431a      	orrs	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	3302      	adds	r3, #2
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	041b      	lsls	r3, r3, #16
 800c688:	431a      	orrs	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3303      	adds	r3, #3
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	061b      	lsls	r3, r3, #24
 800c692:	4313      	orrs	r3, r2
}
 800c694:	4618      	mov	r0, r3
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
uint32_t os_rmsbf4 (const uint8_t *buf) {
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
    return (uint32_t)((uint32_t)buf[3] | ((uint32_t)buf[2]<<8) | ((uint32_t)buf[1]<<16) | ((uint32_t)buf[0]<<24));
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3303      	adds	r3, #3
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3302      	adds	r3, #2
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	021b      	lsls	r3, r3, #8
 800c6b8:	431a      	orrs	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	041b      	lsls	r3, r3, #16
 800c6c2:	431a      	orrs	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	061b      	lsls	r3, r3, #24
 800c6ca:	4313      	orrs	r3, r2
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (uint8_t *buf, uint16_t v) {
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 800c6e4:	887b      	ldrh	r3, [r7, #2]
 800c6e6:	b2da      	uxtb	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 800c6ec:	887b      	ldrh	r3, [r7, #2]
 800c6ee:	0a1b      	lsrs	r3, r3, #8
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	b2d2      	uxtb	r2, r2
 800c6f8:	701a      	strb	r2, [r3, #0]
}
 800c6fa:	bf00      	nop
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (uint8_t *buf, uint32_t v) {
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	b2da      	uxtb	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	0a1a      	lsrs	r2, r3, #8
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3301      	adds	r3, #1
 800c720:	b2d2      	uxtb	r2, r2
 800c722:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	0c1a      	lsrs	r2, r3, #16
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	3302      	adds	r3, #2
 800c72c:	b2d2      	uxtb	r2, r2
 800c72e:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	0e1a      	lsrs	r2, r3, #24
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	3303      	adds	r3, #3
 800c738:	b2d2      	uxtb	r2, r2
 800c73a:	701a      	strb	r2, [r3, #0]
}
 800c73c:	bf00      	nop
 800c73e:	370c      	adds	r7, #12
 800c740:	46bd      	mov	sp, r7
 800c742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c746:	4770      	bx	lr

0800c748 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (uint8_t *buf, uint32_t v) {
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	3303      	adds	r3, #3
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	b2d2      	uxtb	r2, r2
 800c75a:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	0a1a      	lsrs	r2, r3, #8
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	3302      	adds	r3, #2
 800c764:	b2d2      	uxtb	r2, r2
 800c766:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	0c1a      	lsrs	r2, r3, #16
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3301      	adds	r3, #1
 800c770:	b2d2      	uxtb	r2, r2
 800c772:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	0e1b      	lsrs	r3, r3, #24
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	701a      	strb	r2, [r3, #0]
}
 800c77e:	bf00      	nop
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr

0800c78a <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
uint8_t os_getBattLevel (void) {
 800c78a:	b480      	push	{r7}
 800c78c:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 800c78e:	23ff      	movs	r3, #255	@ 0xff
}
 800c790:	4618      	mov	r0, r3
 800c792:	46bd      	mov	sp, r7
 800c794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c798:	4770      	bx	lr

0800c79a <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
uint16_t os_crc16 (uint8_t *data, size_t len) {
 800c79a:	b480      	push	{r7}
 800c79c:	b087      	sub	sp, #28
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	6039      	str	r1, [r7, #0]
    uint16_t remainder = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	82fb      	strh	r3, [r7, #22]
    uint16_t polynomial = 0x1021;
 800c7a8:	f241 0321 	movw	r3, #4129	@ 0x1021
 800c7ac:	81bb      	strh	r3, [r7, #12]
    for( size_t i = 0; i < len; i++ ) {
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	613b      	str	r3, [r7, #16]
 800c7b2:	e026      	b.n	800c802 <os_crc16+0x68>
        remainder ^= data[i] << 8;
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	781b      	ldrb	r3, [r3, #0]
 800c7bc:	021b      	lsls	r3, r3, #8
 800c7be:	b21a      	sxth	r2, r3
 800c7c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c7c4:	4053      	eors	r3, r2
 800c7c6:	b21b      	sxth	r3, r3
 800c7c8:	82fb      	strh	r3, [r7, #22]
        for( uint8_t bit = 8; bit > 0; bit--) {
 800c7ca:	2308      	movs	r3, #8
 800c7cc:	73fb      	strb	r3, [r7, #15]
 800c7ce:	e012      	b.n	800c7f6 <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 800c7d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	da08      	bge.n	800c7ea <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 800c7d8:	8afb      	ldrh	r3, [r7, #22]
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	b21a      	sxth	r2, r3
 800c7de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7e2:	4053      	eors	r3, r2
 800c7e4:	b21b      	sxth	r3, r3
 800c7e6:	82fb      	strh	r3, [r7, #22]
 800c7e8:	e002      	b.n	800c7f0 <os_crc16+0x56>
            else
                remainder <<= 1;
 800c7ea:	8afb      	ldrh	r3, [r7, #22]
 800c7ec:	005b      	lsls	r3, r3, #1
 800c7ee:	82fb      	strh	r3, [r7, #22]
        for( uint8_t bit = 8; bit > 0; bit--) {
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	73fb      	strb	r3, [r7, #15]
 800c7f6:	7bfb      	ldrb	r3, [r7, #15]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d1e9      	bne.n	800c7d0 <os_crc16+0x36>
    for( size_t i = 0; i < len; i++ ) {
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	3301      	adds	r3, #1
 800c800:	613b      	str	r3, [r7, #16]
 800c802:	693a      	ldr	r2, [r7, #16]
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	429a      	cmp	r2, r3
 800c808:	d3d4      	bcc.n	800c7b4 <os_crc16+0x1a>
        }
    }
    return remainder;
 800c80a:	8afb      	ldrh	r3, [r7, #22]
}
 800c80c:	4618      	mov	r0, r3
 800c80e:	371c      	adds	r7, #28
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (uint32_t devaddr, uint32_t seqno, int dndir, int len) {
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 800c826:	2210      	movs	r2, #16
 800c828:	2100      	movs	r1, #0
 800c82a:	4810      	ldr	r0, [pc, #64]	@ (800c86c <micB0+0x54>)
 800c82c:	f005 f99a 	bl	8011b64 <memset>
    AESaux[0]  = 0x49;
 800c830:	4b0e      	ldr	r3, [pc, #56]	@ (800c86c <micB0+0x54>)
 800c832:	2249      	movs	r2, #73	@ 0x49
 800c834:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	bf14      	ite	ne
 800c83c:	2301      	movne	r3, #1
 800c83e:	2300      	moveq	r3, #0
 800c840:	b2da      	uxtb	r2, r3
 800c842:	4b0b      	ldr	r3, [pc, #44]	@ (800c870 <micB0+0x58>)
 800c844:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 800c846:	4b0b      	ldr	r3, [pc, #44]	@ (800c874 <micB0+0x5c>)
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800c84e:	4b0a      	ldr	r3, [pc, #40]	@ (800c878 <micB0+0x60>)
 800c850:	68f9      	ldr	r1, [r7, #12]
 800c852:	4618      	mov	r0, r3
 800c854:	f7ff ff57 	bl	800c706 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 800c858:	4b08      	ldr	r3, [pc, #32]	@ (800c87c <micB0+0x64>)
 800c85a:	68b9      	ldr	r1, [r7, #8]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7ff ff52 	bl	800c706 <os_wlsbf4>
}
 800c862:	bf00      	nop
 800c864:	3710      	adds	r7, #16
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20000c88 	.word	0x20000c88
 800c870:	20000c8d 	.word	0x20000c8d
 800c874:	20000c97 	.word	0x20000c97
 800c878:	20000c8e 	.word	0x20000c8e
 800c87c:	20000c92 	.word	0x20000c92

0800c880 <aes_verifyMic>:


static int aes_verifyMic (const uint8_t *key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t *pdu, int len) {
 800c880:	b590      	push	{r4, r7, lr}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800c88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	6879      	ldr	r1, [r7, #4]
 800c894:	68b8      	ldr	r0, [r7, #8]
 800c896:	f7ff ffbf 	bl	800c818 <micB0>
    os_copyMem(AESkey,key,16);
 800c89a:	2210      	movs	r2, #16
 800c89c:	68f9      	ldr	r1, [r7, #12]
 800c89e:	480d      	ldr	r0, [pc, #52]	@ (800c8d4 <aes_verifyMic+0x54>)
 800c8a0:	f005 fa1d 	bl	8011cde <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	6a39      	ldr	r1, [r7, #32]
 800c8ac:	2002      	movs	r0, #2
 800c8ae:	f7ff f897 	bl	800b9e0 <os_aes>
 800c8b2:	4604      	mov	r4, r0
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	6a3a      	ldr	r2, [r7, #32]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff fef0 	bl	800c6a0 <os_rmsbf4>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	bf0c      	ite	eq
 800c8c6:	2301      	moveq	r3, #1
 800c8c8:	2300      	movne	r3, #0
 800c8ca:	b2db      	uxtb	r3, r3
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd90      	pop	{r4, r7, pc}
 800c8d4:	20000c98 	.word	0x20000c98

0800c8d8 <aes_appendMic>:


static void aes_appendMic (const uint8_t *key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t *pdu, int len) {
 800c8d8:	b590      	push	{r4, r7, lr}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	60f8      	str	r0, [r7, #12]
 800c8e0:	60b9      	str	r1, [r7, #8]
 800c8e2:	607a      	str	r2, [r7, #4]
 800c8e4:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e8:	683a      	ldr	r2, [r7, #0]
 800c8ea:	6879      	ldr	r1, [r7, #4]
 800c8ec:	68b8      	ldr	r0, [r7, #8]
 800c8ee:	f7ff ff93 	bl	800c818 <micB0>
    os_copyMem(AESkey,key,16);
 800c8f2:	2210      	movs	r2, #16
 800c8f4:	68f9      	ldr	r1, [r7, #12]
 800c8f6:	480b      	ldr	r0, [pc, #44]	@ (800c924 <aes_appendMic+0x4c>)
 800c8f8:	f005 f9f1 	bl	8011cde <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fe:	6a3a      	ldr	r2, [r7, #32]
 800c900:	18d4      	adds	r4, r2, r3
 800c902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c904:	b29b      	uxth	r3, r3
 800c906:	461a      	mov	r2, r3
 800c908:	6a39      	ldr	r1, [r7, #32]
 800c90a:	2002      	movs	r0, #2
 800c90c:	f7ff f868 	bl	800b9e0 <os_aes>
 800c910:	4603      	mov	r3, r0
 800c912:	4619      	mov	r1, r3
 800c914:	4620      	mov	r0, r4
 800c916:	f7ff ff17 	bl	800c748 <os_wmsbf4>
}
 800c91a:	bf00      	nop
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd90      	pop	{r4, r7, pc}
 800c922:	bf00      	nop
 800c924:	20000c98 	.word	0x20000c98

0800c928 <aes_appendMic0>:


static void aes_appendMic0 (uint8_t *pdu, int len) {
 800c928:	b590      	push	{r4, r7, lr}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800c932:	480b      	ldr	r0, [pc, #44]	@ (800c960 <aes_appendMic0+0x38>)
 800c934:	f7f5 fa58 	bl	8001de8 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	18d4      	adds	r4, r2, r3
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	b29b      	uxth	r3, r3
 800c942:	461a      	mov	r2, r3
 800c944:	6879      	ldr	r1, [r7, #4]
 800c946:	200a      	movs	r0, #10
 800c948:	f7ff f84a 	bl	800b9e0 <os_aes>
 800c94c:	4603      	mov	r3, r0
 800c94e:	4619      	mov	r1, r3
 800c950:	4620      	mov	r0, r4
 800c952:	f7ff fef9 	bl	800c748 <os_wmsbf4>
}
 800c956:	bf00      	nop
 800c958:	370c      	adds	r7, #12
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd90      	pop	{r4, r7, pc}
 800c95e:	bf00      	nop
 800c960:	20000c98 	.word	0x20000c98

0800c964 <aes_verifyMic0>:


static int aes_verifyMic0 (uint8_t *pdu, int len) {
 800c964:	b590      	push	{r4, r7, lr}
 800c966:	b083      	sub	sp, #12
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800c96e:	480d      	ldr	r0, [pc, #52]	@ (800c9a4 <aes_verifyMic0+0x40>)
 800c970:	f7f5 fa3a 	bl	8001de8 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	b29b      	uxth	r3, r3
 800c978:	461a      	mov	r2, r3
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	200a      	movs	r0, #10
 800c97e:	f7ff f82f 	bl	800b9e0 <os_aes>
 800c982:	4604      	mov	r4, r0
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	4413      	add	r3, r2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f7ff fe88 	bl	800c6a0 <os_rmsbf4>
 800c990:	4603      	mov	r3, r0
 800c992:	429c      	cmp	r4, r3
 800c994:	bf0c      	ite	eq
 800c996:	2301      	moveq	r3, #1
 800c998:	2300      	movne	r3, #0
 800c99a:	b2db      	uxtb	r3, r3
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd90      	pop	{r4, r7, pc}
 800c9a4:	20000c98 	.word	0x20000c98

0800c9a8 <aes_encrypt>:


static void aes_encrypt (uint8_t *pdu, int len) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800c9b2:	4807      	ldr	r0, [pc, #28]	@ (800c9d0 <aes_encrypt+0x28>)
 800c9b4:	f7f5 fa18 	bl	8001de8 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	461a      	mov	r2, r3
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	f7ff f80d 	bl	800b9e0 <os_aes>
}
 800c9c6:	bf00      	nop
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20000c98 	.word	0x20000c98

0800c9d4 <aes_cipher>:


static void aes_cipher (const uint8_t *key, uint32_t devaddr, uint32_t seqno, int dndir, uint8_t *payload, int len) {
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	60b9      	str	r1, [r7, #8]
 800c9de:	607a      	str	r2, [r7, #4]
 800c9e0:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	dd29      	ble.n	800ca3c <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 800c9e8:	2210      	movs	r2, #16
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	4815      	ldr	r0, [pc, #84]	@ (800ca44 <aes_cipher+0x70>)
 800c9ee:	f005 f8b9 	bl	8011b64 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 800c9f2:	4b15      	ldr	r3, [pc, #84]	@ (800ca48 <aes_cipher+0x74>)
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	701a      	strb	r2, [r3, #0]
 800c9f8:	4a12      	ldr	r2, [pc, #72]	@ (800ca44 <aes_cipher+0x70>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	bf14      	ite	ne
 800ca04:	2301      	movne	r3, #1
 800ca06:	2300      	moveq	r3, #0
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	4b10      	ldr	r3, [pc, #64]	@ (800ca4c <aes_cipher+0x78>)
 800ca0c:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 800ca0e:	4b10      	ldr	r3, [pc, #64]	@ (800ca50 <aes_cipher+0x7c>)
 800ca10:	68b9      	ldr	r1, [r7, #8]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff fe77 	bl	800c706 <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 800ca18:	4b0e      	ldr	r3, [pc, #56]	@ (800ca54 <aes_cipher+0x80>)
 800ca1a:	6879      	ldr	r1, [r7, #4]
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f7ff fe72 	bl	800c706 <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 800ca22:	2210      	movs	r2, #16
 800ca24:	68f9      	ldr	r1, [r7, #12]
 800ca26:	480c      	ldr	r0, [pc, #48]	@ (800ca58 <aes_cipher+0x84>)
 800ca28:	f005 f959 	bl	8011cde <memcpy>
    os_aes(AES_CTR, payload, len);
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	461a      	mov	r2, r3
 800ca32:	69b9      	ldr	r1, [r7, #24]
 800ca34:	2004      	movs	r0, #4
 800ca36:	f7fe ffd3 	bl	800b9e0 <os_aes>
 800ca3a:	e000      	b.n	800ca3e <aes_cipher+0x6a>
        return;
 800ca3c:	bf00      	nop
}
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	20000c88 	.word	0x20000c88
 800ca48:	20000c97 	.word	0x20000c97
 800ca4c:	20000c8d 	.word	0x20000c8d
 800ca50:	20000c8e 	.word	0x20000c8e
 800ca54:	20000c92 	.word	0x20000c92
 800ca58:	20000c98 	.word	0x20000c98

0800ca5c <aes_sessKeys>:


static void aes_sessKeys (uint16_t devnonce, const uint8_t *artnonce, uint8_t *nwkkey, uint8_t *artkey) {
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	607a      	str	r2, [r7, #4]
 800ca66:	603b      	str	r3, [r7, #0]
 800ca68:	4603      	mov	r3, r0
 800ca6a:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 800ca6c:	2210      	movs	r2, #16
 800ca6e:	2100      	movs	r1, #0
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f005 f877 	bl	8011b64 <memset>
    nwkkey[0] = 0x01;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2201      	movs	r2, #1
 800ca7a:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	3301      	adds	r3, #1
 800ca80:	2206      	movs	r2, #6
 800ca82:	68b9      	ldr	r1, [r7, #8]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f005 f92a 	bl	8011cde <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3307      	adds	r3, #7
 800ca8e:	89fa      	ldrh	r2, [r7, #14]
 800ca90:	4611      	mov	r1, r2
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fe20 	bl	800c6d8 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 800ca98:	2210      	movs	r2, #16
 800ca9a:	6879      	ldr	r1, [r7, #4]
 800ca9c:	6838      	ldr	r0, [r7, #0]
 800ca9e:	f005 f91e 	bl	8011cde <memcpy>
    artkey[0] = 0x02;
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2202      	movs	r2, #2
 800caa6:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 800caa8:	4809      	ldr	r0, [pc, #36]	@ (800cad0 <aes_sessKeys+0x74>)
 800caaa:	f7f5 f99d 	bl	8001de8 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 800caae:	2210      	movs	r2, #16
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	2000      	movs	r0, #0
 800cab4:	f7fe ff94 	bl	800b9e0 <os_aes>
    os_getDevKey(AESkey);
 800cab8:	4805      	ldr	r0, [pc, #20]	@ (800cad0 <aes_sessKeys+0x74>)
 800caba:	f7f5 f995 	bl	8001de8 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 800cabe:	2210      	movs	r2, #16
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	2000      	movs	r0, #0
 800cac4:	f7fe ff8c 	bl	800b9e0 <os_aes>
}
 800cac8:	bf00      	nop
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	20000c98 	.word	0x20000c98

0800cad4 <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 800cad4:	b590      	push	{r4, r7, lr}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4603      	mov	r3, r0
 800cadc:	80fb      	strh	r3, [r7, #6]
    return -141 + TABLE_GET_U1_TWODIM(SENSITIVITY, getSf(rps), getBw(rps));
 800cade:	88fb      	ldrh	r3, [r7, #6]
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff fca3 	bl	800c42c <getSf>
 800cae6:	4603      	mov	r3, r0
 800cae8:	461a      	mov	r2, r3
 800caea:	4613      	mov	r3, r2
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	4413      	add	r3, r2
 800caf0:	4a08      	ldr	r2, [pc, #32]	@ (800cb14 <getSensitivity+0x40>)
 800caf2:	189c      	adds	r4, r3, r2
 800caf4:	88fb      	ldrh	r3, [r7, #6]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fca8 	bl	800c44c <getBw>
 800cafc:	4603      	mov	r3, r0
 800cafe:	4619      	mov	r1, r3
 800cb00:	4620      	mov	r0, r4
 800cb02:	f7fe fe9a 	bl	800b83a <table_get_u1>
 800cb06:	4603      	mov	r3, r0
 800cb08:	3b8d      	subs	r3, #141	@ 0x8d
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd90      	pop	{r4, r7, pc}
 800cb12:	bf00      	nop
 800cb14:	08015b04 	.word	0x08015b04

0800cb18 <calcAirTime>:

ostime_t calcAirTime (rps_t rps, uint8_t plen) {
 800cb18:	b590      	push	{r4, r7, lr}
 800cb1a:	b087      	sub	sp, #28
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4603      	mov	r3, r0
 800cb20:	460a      	mov	r2, r1
 800cb22:	80fb      	strh	r3, [r7, #6]
 800cb24:	4613      	mov	r3, r2
 800cb26:	717b      	strb	r3, [r7, #5]
    uint8_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 800cb28:	88fb      	ldrh	r3, [r7, #6]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fc8e 	bl	800c44c <getBw>
 800cb30:	4603      	mov	r3, r0
 800cb32:	72fb      	strb	r3, [r7, #11]
    uint8_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 800cb34:	88fb      	ldrh	r3, [r7, #6]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff fc78 	bl	800c42c <getSf>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 800cb40:	7abb      	ldrb	r3, [r7, #10]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10c      	bne.n	800cb60 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 800cb46:	797b      	ldrb	r3, [r7, #5]
 800cb48:	330b      	adds	r3, #11
            * (int32_t)LMIC_OSTICKS_PER_SEC / /*kbit/s*/50000;
 800cb4a:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 800cb4e:	fb02 f303 	mul.w	r3, r2, r3
 800cb52:	4a3c      	ldr	r2, [pc, #240]	@ (800cc44 <calcAirTime+0x12c>)
 800cb54:	fb82 1203 	smull	r1, r2, r2, r3
 800cb58:	1312      	asrs	r2, r2, #12
 800cb5a:	17db      	asrs	r3, r3, #31
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	e06d      	b.n	800cc3c <calcAirTime+0x124>
    }
    uint8_t sfx = 4*(sf+(7-SF7));
 800cb60:	7abb      	ldrb	r3, [r7, #10]
 800cb62:	3306      	adds	r3, #6
 800cb64:	b2db      	uxtb	r3, r3
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	75fb      	strb	r3, [r7, #23]
    uint8_t q = sfx - (sf >= SF11 ? 8 : 0);
 800cb6a:	7abb      	ldrb	r3, [r7, #10]
 800cb6c:	2b04      	cmp	r3, #4
 800cb6e:	d901      	bls.n	800cb74 <calcAirTime+0x5c>
 800cb70:	2308      	movs	r3, #8
 800cb72:	e000      	b.n	800cb76 <calcAirTime+0x5e>
 800cb74:	2300      	movs	r3, #0
 800cb76:	7dfa      	ldrb	r2, [r7, #23]
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 800cb7c:	797b      	ldrb	r3, [r7, #5]
 800cb7e:	00da      	lsls	r2, r3, #3
 800cb80:	7dfb      	ldrb	r3, [r7, #23]
 800cb82:	1ad3      	subs	r3, r2, r3
 800cb84:	f103 041c 	add.w	r4, r3, #28
 800cb88:	88fb      	ldrh	r3, [r7, #6]
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7ff fc9b 	bl	800c4c6 <getNocrc>
 800cb90:	4603      	mov	r3, r0
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <calcAirTime+0x82>
 800cb96:	2300      	movs	r3, #0
 800cb98:	e000      	b.n	800cb9c <calcAirTime+0x84>
 800cb9a:	2310      	movs	r3, #16
 800cb9c:	441c      	add	r4, r3
 800cb9e:	88fb      	ldrh	r3, [r7, #6]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff fcb7 	bl	800c514 <getIh>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <calcAirTime+0x98>
 800cbac:	2314      	movs	r3, #20
 800cbae:	e000      	b.n	800cbb2 <calcAirTime+0x9a>
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	1ae3      	subs	r3, r4, r3
 800cbb4:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 800cbb6:	693b      	ldr	r3, [r7, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dd15      	ble.n	800cbe8 <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 800cbbc:	7a7a      	ldrb	r2, [r7, #9]
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	1e5a      	subs	r2, r3, #1
 800cbc4:	7a7b      	ldrb	r3, [r7, #9]
 800cbc6:	fb92 f3f3 	sdiv	r3, r2, r3
 800cbca:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 800cbcc:	88fb      	ldrh	r3, [r7, #6]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff fc4e 	bl	800c470 <getCr>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	1d5a      	adds	r2, r3, #5
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	fb02 f303 	mul.w	r3, r2, r3
 800cbde:	613b      	str	r3, [r7, #16]
        tmp += 8;
 800cbe0:	693b      	ldr	r3, [r7, #16]
 800cbe2:	3308      	adds	r3, #8
 800cbe4:	613b      	str	r3, [r7, #16]
 800cbe6:	e001      	b.n	800cbec <calcAirTime+0xd4>
    } else {
        tmp = 8;
 800cbe8:	2308      	movs	r3, #8
 800cbea:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	3331      	adds	r3, #49	@ 0x31
 800cbf2:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * LMIC_OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 800cbf4:	7aba      	ldrb	r2, [r7, #10]
 800cbf6:	7afb      	ldrb	r3, [r7, #11]
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	b2db      	uxtb	r3, r3
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 800cc00:	f643 5309 	movw	r3, #15625	@ 0x3d09
 800cc04:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 800cc06:	7dfb      	ldrb	r3, [r7, #23]
 800cc08:	2b04      	cmp	r3, #4
 800cc0a:	d907      	bls.n	800cc1c <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 800cc0c:	7dfb      	ldrb	r3, [r7, #23]
 800cc0e:	3b04      	subs	r3, #4
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	fa42 f303 	asr.w	r3, r2, r3
 800cc16:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 800cc18:	2304      	movs	r3, #4
 800cc1a:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * LMIC_OSTICKS_PER_SEC + div/2) / div;
 800cc1c:	693a      	ldr	r2, [r7, #16]
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	fa02 f303 	lsl.w	r3, r2, r3
 800cc24:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800cc28:	fb03 f202 	mul.w	r2, r3, r2
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	0fd9      	lsrs	r1, r3, #31
 800cc30:	440b      	add	r3, r1
 800cc32:	105b      	asrs	r3, r3, #1
 800cc34:	441a      	add	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	371c      	adds	r7, #28
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd90      	pop	{r4, r7, pc}
 800cc44:	14f8b589 	.word	0x14f8b589

0800cc48 <calcRxWindow>:
#endif
};


#if !defined(LMIC_DISABLE_BEACONS)
static ostime_t calcRxWindow (uint8_t secs, dr_t dr) {
 800cc48:	b590      	push	{r4, r7, lr}
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	460a      	mov	r2, r1
 800cc52:	71fb      	strb	r3, [r7, #7]
 800cc54:	4613      	mov	r3, r2
 800cc56:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 800cc58:	79fb      	ldrb	r3, [r7, #7]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d108      	bne.n	800cc70 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 800cc5e:	4b24      	ldr	r3, [pc, #144]	@ (800ccf0 <calcRxWindow+0xa8>)
 800cc60:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800cc64:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 800cc66:	4b22      	ldr	r3, [pc, #136]	@ (800ccf0 <calcRxWindow+0xa8>)
 800cc68:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 800cc6c:	613b      	str	r3, [r7, #16]
 800cc6e:	e011      	b.n	800cc94 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 800cc70:	4b1f      	ldr	r3, [pc, #124]	@ (800ccf0 <calcRxWindow+0xa8>)
 800cc72:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800cc76:	461a      	mov	r2, r3
 800cc78:	79fb      	ldrb	r3, [r7, #7]
 800cc7a:	fb02 f303 	mul.w	r3, r2, r3
 800cc7e:	09db      	lsrs	r3, r3, #7
 800cc80:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 800cc82:	4b1b      	ldr	r3, [pc, #108]	@ (800ccf0 <calcRxWindow+0xa8>)
 800cc84:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 800cc88:	461a      	mov	r2, r3
 800cc8a:	79fb      	ldrb	r3, [r7, #7]
 800cc8c:	fb02 f303 	mul.w	r3, r2, r3
 800cc90:	09db      	lsrs	r3, r3, #7
 800cc92:	613b      	str	r3, [r7, #16]
    }
    uint8_t rxsyms = MINRX_SYMS;
 800cc94:	2305      	movs	r3, #5
 800cc96:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 800cc98:	4b15      	ldr	r3, [pc, #84]	@ (800ccf0 <calcRxWindow+0xa8>)
 800cc9a:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800cc9e:	461a      	mov	r2, r3
 800cca0:	4b13      	ldr	r3, [pc, #76]	@ (800ccf0 <calcRxWindow+0xa8>)
 800cca2:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800cca6:	fb02 f303 	mul.w	r3, r2, r3
 800ccaa:	693a      	ldr	r2, [r7, #16]
 800ccac:	4413      	add	r3, r2
 800ccae:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 800ccb0:	79bb      	ldrb	r3, [r7, #6]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	480f      	ldr	r0, [pc, #60]	@ (800ccf4 <calcRxWindow+0xac>)
 800ccb6:	f7fe fdff 	bl	800b8b8 <table_get_ostime>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	3305      	adds	r3, #5
 800ccc6:	b2da      	uxtb	r2, r3
 800ccc8:	4b09      	ldr	r3, [pc, #36]	@ (800ccf0 <calcRxWindow+0xa8>)
 800ccca:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
 800ccce:	3b08      	subs	r3, #8
 800ccd0:	461c      	mov	r4, r3
 800ccd2:	79bb      	ldrb	r3, [r7, #6]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4807      	ldr	r0, [pc, #28]	@ (800ccf4 <calcRxWindow+0xac>)
 800ccd8:	f7fe fdee 	bl	800b8b8 <table_get_ostime>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	fb03 f204 	mul.w	r2, r3, r4
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	4413      	add	r3, r2
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	371c      	adds	r7, #28
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd90      	pop	{r4, r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000d48 	.word	0x20000d48
 800ccf4:	08015b28 	.word	0x08015b28

0800ccf8 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (uint8_t ms, bool ini) {
 800ccf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccfc:	b086      	sub	sp, #24
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	4603      	mov	r3, r0
 800cd02:	460a      	mov	r2, r1
 800cd04:	73fb      	strb	r3, [r7, #15]
 800cd06:	4613      	mov	r3, r2
 800cd08:	73bb      	strb	r3, [r7, #14]
    if( ini ) {
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d014      	beq.n	800cd3a <calcBcnRxWindowFromMillis+0x42>
        LMIC.drift = 0;
 800cd10:	4b3c      	ldr	r3, [pc, #240]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 800cd18:	4b3a      	ldr	r3, [pc, #232]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 800cd20:	4b38      	ldr	r3, [pc, #224]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 800cd28:	4b36      	ldr	r3, [pc, #216]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cd2a:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800cd2e:	f043 030c 	orr.w	r3, r3, #12
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	4b33      	ldr	r3, [pc, #204]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cd36:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 800cd3a:	2103      	movs	r1, #3
 800cd3c:	4832      	ldr	r0, [pc, #200]	@ (800ce08 <calcBcnRxWindowFromMillis+0x110>)
 800cd3e:	f7fe fdbb 	bl	800b8b8 <table_get_ostime>
 800cd42:	6178      	str	r0, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 800cd44:	7bfb      	ldrb	r3, [r7, #15]
 800cd46:	2200      	movs	r2, #0
 800cd48:	4698      	mov	r8, r3
 800cd4a:	4691      	mov	r9, r2
 800cd4c:	4642      	mov	r2, r8
 800cd4e:	464b      	mov	r3, r9
 800cd50:	f04f 0000 	mov.w	r0, #0
 800cd54:	f04f 0100 	mov.w	r1, #0
 800cd58:	0159      	lsls	r1, r3, #5
 800cd5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cd5e:	0150      	lsls	r0, r2, #5
 800cd60:	4602      	mov	r2, r0
 800cd62:	460b      	mov	r3, r1
 800cd64:	ebb2 0408 	subs.w	r4, r2, r8
 800cd68:	eb63 0509 	sbc.w	r5, r3, r9
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	f04f 0300 	mov.w	r3, #0
 800cd74:	00ab      	lsls	r3, r5, #2
 800cd76:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800cd7a:	00a2      	lsls	r2, r4, #2
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	461d      	mov	r5, r3
 800cd80:	eb14 0a08 	adds.w	sl, r4, r8
 800cd84:	eb45 0b09 	adc.w	fp, r5, r9
 800cd88:	f04f 0200 	mov.w	r2, #0
 800cd8c:	f04f 0300 	mov.w	r3, #0
 800cd90:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800cd94:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800cd98:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800cd9c:	4692      	mov	sl, r2
 800cd9e:	469b      	mov	fp, r3
 800cda0:	4652      	mov	r2, sl
 800cda2:	465b      	mov	r3, fp
 800cda4:	f240 31e7 	movw	r1, #999	@ 0x3e7
 800cda8:	1851      	adds	r1, r2, r1
 800cdaa:	6039      	str	r1, [r7, #0]
 800cdac:	f143 0300 	adc.w	r3, r3, #0
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdbe:	f7f3 ff6b 	bl	8000c98 <__aeabi_uldivmod>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	3305      	adds	r3, #5
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cdd4:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 800cdd8:	4b0a      	ldr	r3, [pc, #40]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cdda:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800cdde:	4b09      	ldr	r3, [pc, #36]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cde0:	f893 318d 	ldrb.w	r3, [r3, #397]	@ 0x18d
 800cde4:	3b08      	subs	r3, #8
 800cde6:	4619      	mov	r1, r3
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	fb01 f303 	mul.w	r3, r1, r3
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	f503 137a 	add.w	r3, r3, #4096000	@ 0x3e8000
 800cdf4:	4a03      	ldr	r2, [pc, #12]	@ (800ce04 <calcBcnRxWindowFromMillis+0x10c>)
 800cdf6:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
}
 800cdfa:	bf00      	nop
 800cdfc:	3718      	adds	r7, #24
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce04:	20000d48 	.word	0x20000d48
 800ce08:	08015b28 	.word	0x08015b28

0800ce0c <rxschedInit>:
#endif // !LMIC_DISABLE_BEACONS


#if !defined(LMIC_DISABLE_PING)
// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (rxsched_t *rxsched) {
 800ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	b085      	sub	sp, #20
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 800ce16:	2210      	movs	r2, #16
 800ce18:	2100      	movs	r1, #0
 800ce1a:	484a      	ldr	r0, [pc, #296]	@ (800cf44 <rxschedInit+0x138>)
 800ce1c:	f004 fea2 	bl	8011b64 <memset>
    os_clearMem(LMIC.frame+8,8);
 800ce20:	4b49      	ldr	r3, [pc, #292]	@ (800cf48 <rxschedInit+0x13c>)
 800ce22:	2208      	movs	r2, #8
 800ce24:	2100      	movs	r1, #0
 800ce26:	4618      	mov	r0, r3
 800ce28:	f004 fe9c 	bl	8011b64 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 800ce2c:	4b47      	ldr	r3, [pc, #284]	@ (800cf4c <rxschedInit+0x140>)
 800ce2e:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800ce32:	4619      	mov	r1, r3
 800ce34:	4846      	ldr	r0, [pc, #280]	@ (800cf50 <rxschedInit+0x144>)
 800ce36:	f7ff fc66 	bl	800c706 <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 800ce3a:	4a46      	ldr	r2, [pc, #280]	@ (800cf54 <rxschedInit+0x148>)
 800ce3c:	4b43      	ldr	r3, [pc, #268]	@ (800cf4c <rxschedInit+0x140>)
 800ce3e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800ce42:	4619      	mov	r1, r3
 800ce44:	4610      	mov	r0, r2
 800ce46:	f7ff fc5e 	bl	800c706 <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 800ce4a:	2210      	movs	r2, #16
 800ce4c:	4940      	ldr	r1, [pc, #256]	@ (800cf50 <rxschedInit+0x144>)
 800ce4e:	2000      	movs	r0, #0
 800ce50:	f7fe fdc6 	bl	800b9e0 <os_aes>
    uint8_t intvExp = rxsched->intvExp;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	785b      	ldrb	r3, [r3, #1]
 800ce58:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 800ce5a:	483d      	ldr	r0, [pc, #244]	@ (800cf50 <rxschedInit+0x144>)
 800ce5c:	f7ff fbef 	bl	800c63e <os_rlsbf2>
 800ce60:	4603      	mov	r3, r0
 800ce62:	4619      	mov	r1, r3
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
 800ce66:	f1c3 0307 	rsb	r3, r3, #7
 800ce6a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800ce6e:	fa42 f303 	asr.w	r3, r2, r3
 800ce72:	400b      	ands	r3, r1
 800ce74:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 800ce76:	4b35      	ldr	r3, [pc, #212]	@ (800cf4c <rxschedInit+0x140>)
 800ce78:	f8d3 6194 	ldr.w	r6, [r3, #404]	@ 0x194
                       BCN_RESERVE_osticks +
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 800ce7c:	68ba      	ldr	r2, [r7, #8]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	011b      	lsls	r3, r3, #4
 800ce82:	1a9b      	subs	r3, r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	461a      	mov	r2, r3
 800ce88:	2300      	movs	r3, #0
 800ce8a:	4690      	mov	r8, r2
 800ce8c:	4699      	mov	r9, r3
 800ce8e:	4642      	mov	r2, r8
 800ce90:	464b      	mov	r3, r9
 800ce92:	f04f 0000 	mov.w	r0, #0
 800ce96:	f04f 0100 	mov.w	r1, #0
 800ce9a:	0159      	lsls	r1, r3, #5
 800ce9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cea0:	0150      	lsls	r0, r2, #5
 800cea2:	4602      	mov	r2, r0
 800cea4:	460b      	mov	r3, r1
 800cea6:	ebb2 0408 	subs.w	r4, r2, r8
 800ceaa:	eb63 0509 	sbc.w	r5, r3, r9
 800ceae:	f04f 0200 	mov.w	r2, #0
 800ceb2:	f04f 0300 	mov.w	r3, #0
 800ceb6:	00ab      	lsls	r3, r5, #2
 800ceb8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800cebc:	00a2      	lsls	r2, r4, #2
 800cebe:	4614      	mov	r4, r2
 800cec0:	461d      	mov	r5, r3
 800cec2:	eb14 0a08 	adds.w	sl, r4, r8
 800cec6:	eb45 0b09 	adc.w	fp, r5, r9
 800ceca:	f04f 0200 	mov.w	r2, #0
 800cece:	f04f 0300 	mov.w	r3, #0
 800ced2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800ced6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800ceda:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800cede:	4692      	mov	sl, r2
 800cee0:	469b      	mov	fp, r3
 800cee2:	4650      	mov	r0, sl
 800cee4:	4659      	mov	r1, fp
 800cee6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ceea:	f04f 0300 	mov.w	r3, #0
 800ceee:	f7f3 fed3 	bl	8000c98 <__aeabi_uldivmod>
 800cef2:	4602      	mov	r2, r0
 800cef4:	460b      	mov	r3, r1
 800cef6:	4613      	mov	r3, r2
                       BCN_RESERVE_osticks +
 800cef8:	4433      	add	r3, r6
 800cefa:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800cefe:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	6053      	str	r3, [r2, #4]
    rxsched->slot   = 0;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	685c      	ldr	r4, [r3, #4]
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	2201      	movs	r2, #1
 800cf14:	fa02 f303 	lsl.w	r3, r2, r3
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	3302      	adds	r3, #2
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	4619      	mov	r1, r3
 800cf24:	4610      	mov	r0, r2
 800cf26:	f7ff fe8f 	bl	800cc48 <calcRxWindow>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	1ae2      	subs	r2, r4, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 800cf32:	4b06      	ldr	r3, [pc, #24]	@ (800cf4c <rxschedInit+0x140>)
 800cf34:	7c1a      	ldrb	r2, [r3, #16]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	70da      	strb	r2, [r3, #3]
}
 800cf3a:	bf00      	nop
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf44:	20000c98 	.word	0x20000c98
 800cf48:	20000e9c 	.word	0x20000e9c
 800cf4c:	20000d48 	.word	0x20000d48
 800cf50:	20000e94 	.word	0x20000e94
 800cf54:	20000e98 	.word	0x20000e98

0800cf58 <rxschedNext>:


static bool rxschedNext (rxsched_t *rxsched, ostime_t cando) {
 800cf58:	b590      	push	{r4, r7, lr}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  again:
    if( (ostimediff_t)(rxsched->rxtime - cando) >= 0 )
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	689a      	ldr	r2, [r3, #8]
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	db01      	blt.n	800cf72 <rxschedNext+0x1a>
        return 1;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e03a      	b.n	800cfe8 <rxschedNext+0x90>
    uint8_t slot;
    if( (slot=rxsched->slot) >= 128 )
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	789b      	ldrb	r3, [r3, #2]
 800cf76:	73fb      	strb	r3, [r7, #15]
 800cf78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	da01      	bge.n	800cf84 <rxschedNext+0x2c>
        return 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	e031      	b.n	800cfe8 <rxschedNext+0x90>
    uint8_t intv = 1<<rxsched->intvExp;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	785b      	ldrb	r3, [r3, #1]
 800cf88:	461a      	mov	r2, r3
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	4093      	lsls	r3, r2
 800cf8e:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 800cf90:	7bfa      	ldrb	r2, [r7, #15]
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	4413      	add	r3, r2
 800cf96:	73fb      	strb	r3, [r7, #15]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	7bfa      	ldrb	r2, [r7, #15]
 800cf9c:	709a      	strb	r2, [r3, #2]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	789b      	ldrb	r3, [r3, #2]
 800cfa2:	b25b      	sxtb	r3, r3
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	da01      	bge.n	800cfac <rxschedNext+0x54>
        return 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	e01d      	b.n	800cfe8 <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 800cfb0:	7bfa      	ldrb	r2, [r7, #15]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	011b      	lsls	r3, r3, #4
 800cfb6:	1a9b      	subs	r3, r3, r2
 800cfb8:	049b      	lsls	r3, r3, #18
 800cfba:	09db      	lsrs	r3, r3, #7
 800cfbc:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 800cfbe:	7bfa      	ldrb	r2, [r7, #15]
 800cfc0:	7bbb      	ldrb	r3, [r7, #14]
 800cfc2:	4413      	add	r3, r2
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	3302      	adds	r3, #2
 800cfc8:	b2da      	uxtb	r2, r3
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	f7ff fe39 	bl	800cc48 <calcRxWindow>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 800cfde:	4b04      	ldr	r3, [pc, #16]	@ (800cff0 <rxschedNext+0x98>)
 800cfe0:	7c1a      	ldrb	r2, [r3, #16]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	70da      	strb	r2, [r3, #3]
    goto again;
 800cfe6:	e7bc      	b.n	800cf62 <rxschedNext+0xa>
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3714      	adds	r7, #20
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd90      	pop	{r4, r7, pc}
 800cff0:	20000d48 	.word	0x20000d48

0800cff4 <rndDelay>:
#endif // !LMIC_DISABLE_PING)


static ostime_t rndDelay (uint8_t secSpan) {
 800cff4:	b590      	push	{r4, r7, lr}
 800cff6:	b085      	sub	sp, #20
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	4603      	mov	r3, r0
 800cffc:	71fb      	strb	r3, [r7, #7]
    uint16_t r = os_getRndU2();
 800cffe:	f003 fadb 	bl	80105b8 <radio_rand1>
 800d002:	4603      	mov	r3, r0
 800d004:	021b      	lsls	r3, r3, #8
 800d006:	b21c      	sxth	r4, r3
 800d008:	f003 fad6 	bl	80105b8 <radio_rand1>
 800d00c:	4603      	mov	r3, r0
 800d00e:	b21b      	sxth	r3, r3
 800d010:	4323      	orrs	r3, r4
 800d012:	b21b      	sxth	r3, r3
 800d014:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 800d016:	897b      	ldrh	r3, [r7, #10]
 800d018:	60fb      	str	r3, [r7, #12]
    if( delay > LMIC_OSTICKS_PER_SEC )
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 800d020:	d90b      	bls.n	800d03a <rndDelay+0x46>
        delay = r % (uint16_t)LMIC_OSTICKS_PER_SEC;
 800d022:	897b      	ldrh	r3, [r7, #10]
 800d024:	4a12      	ldr	r2, [pc, #72]	@ (800d070 <rndDelay+0x7c>)
 800d026:	fba2 1203 	umull	r1, r2, r2, r3
 800d02a:	0ad2      	lsrs	r2, r2, #11
 800d02c:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 800d030:	fb01 f202 	mul.w	r2, r1, r2
 800d034:	1a9b      	subs	r3, r3, r2
 800d036:	b29b      	uxth	r3, r3
 800d038:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d011      	beq.n	800d064 <rndDelay+0x70>
        delay += ((uint8_t)r % secSpan) * LMIC_OSTICKS_PER_SEC;
 800d040:	897b      	ldrh	r3, [r7, #10]
 800d042:	b2db      	uxtb	r3, r3
 800d044:	79fa      	ldrb	r2, [r7, #7]
 800d046:	fbb3 f1f2 	udiv	r1, r3, r2
 800d04a:	fb01 f202 	mul.w	r2, r1, r2
 800d04e:	1a9b      	subs	r3, r3, r2
 800d050:	b2db      	uxtb	r3, r3
 800d052:	461a      	mov	r2, r3
 800d054:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800d058:	fb02 f303 	mul.w	r3, r2, r3
 800d05c:	461a      	mov	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	4413      	add	r3, r2
 800d062:	60fb      	str	r3, [r7, #12]
    return delay;
 800d064:	68fb      	ldr	r3, [r7, #12]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3714      	adds	r7, #20
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd90      	pop	{r4, r7, pc}
 800d06e:	bf00      	nop
 800d070:	10624dd3 	.word	0x10624dd3

0800d074 <txDelay>:


static void txDelay (ostime_t reftime, uint8_t secSpan) {
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	460b      	mov	r3, r1
 800d07e:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 800d080:	78fb      	ldrb	r3, [r7, #3]
 800d082:	4618      	mov	r0, r3
 800d084:	f7ff ffb6 	bl	800cff4 <rndDelay>
 800d088:	4602      	mov	r2, r0
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4413      	add	r3, r2
 800d08e:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (ostimediff_t)(reftime - LMIC.globalDutyAvail) > 0 ) {
 800d090:	4b0e      	ldr	r3, [pc, #56]	@ (800d0cc <txDelay+0x58>)
 800d092:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800d096:	2b00      	cmp	r3, #0
 800d098:	d006      	beq.n	800d0a8 <txDelay+0x34>
 800d09a:	4b0c      	ldr	r3, [pc, #48]	@ (800d0cc <txDelay+0x58>)
 800d09c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	1ad3      	subs	r3, r2, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dd0c      	ble.n	800d0c2 <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 800d0a8:	4a08      	ldr	r2, [pc, #32]	@ (800d0cc <txDelay+0x58>)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 800d0b0:	4b06      	ldr	r3, [pc, #24]	@ (800d0cc <txDelay+0x58>)
 800d0b2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800d0b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	4b03      	ldr	r3, [pc, #12]	@ (800d0cc <txDelay+0x58>)
 800d0be:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 800d0c2:	bf00      	nop
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20000d48 	.word	0x20000d48

0800d0d0 <setDrJoin>:


static void setDrJoin (uint8_t reason, uint8_t dr) {
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	460a      	mov	r2, r1
 800d0da:	71fb      	strb	r3, [r7, #7]
 800d0dc:	4613      	mov	r3, r2
 800d0de:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 800d0e0:	4a04      	ldr	r2, [pc, #16]	@ (800d0f4 <setDrJoin+0x24>)
 800d0e2:	79bb      	ldrb	r3, [r7, #6]
 800d0e4:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 800d0e8:	bf00      	nop
 800d0ea:	370c      	adds	r7, #12
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	20000d48 	.word	0x20000d48

0800d0f8 <setDrTxpow>:


static void setDrTxpow (uint8_t reason, uint8_t dr, int8_t pow) {
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	4603      	mov	r3, r0
 800d100:	71fb      	strb	r3, [r7, #7]
 800d102:	460b      	mov	r3, r1
 800d104:	71bb      	strb	r3, [r7, #6]
 800d106:	4613      	mov	r3, r2
 800d108:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));

    if( pow != KEEP_TXPOW )
 800d10a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800d10e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800d112:	d003      	beq.n	800d11c <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 800d114:	4a0e      	ldr	r2, [pc, #56]	@ (800d150 <setDrTxpow+0x58>)
 800d116:	797b      	ldrb	r3, [r7, #5]
 800d118:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 800d11c:	4b0c      	ldr	r3, [pc, #48]	@ (800d150 <setDrTxpow+0x58>)
 800d11e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800d122:	79ba      	ldrb	r2, [r7, #6]
 800d124:	429a      	cmp	r2, r3
 800d126:	d00c      	beq.n	800d142 <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 800d128:	4a09      	ldr	r2, [pc, #36]	@ (800d150 <setDrTxpow+0x58>)
 800d12a:	79bb      	ldrb	r3, [r7, #6]
 800d12c:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 800d130:	4b07      	ldr	r3, [pc, #28]	@ (800d150 <setDrTxpow+0x58>)
 800d132:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800d136:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	4b04      	ldr	r3, [pc, #16]	@ (800d150 <setDrTxpow+0x58>)
 800d13e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 800d142:	bf00      	nop
 800d144:	370c      	adds	r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	20000d48 	.word	0x20000d48

0800d154 <initDefaultChannels>:
    EU868_F1|BAND_MILLI, EU868_F2|BAND_MILLI, EU868_F3|BAND_MILLI,
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
};

static void initDefaultChannels (bool join) {
 800d154:	b590      	push	{r4, r7, lr}
 800d156:	b085      	sub	sp, #20
 800d158:	af00      	add	r7, sp, #0
 800d15a:	4603      	mov	r3, r0
 800d15c:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 800d15e:	2240      	movs	r2, #64	@ 0x40
 800d160:	2100      	movs	r1, #0
 800d162:	483c      	ldr	r0, [pc, #240]	@ (800d254 <initDefaultChannels+0x100>)
 800d164:	f004 fcfe 	bl	8011b64 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 800d168:	2220      	movs	r2, #32
 800d16a:	2100      	movs	r1, #0
 800d16c:	483a      	ldr	r0, [pc, #232]	@ (800d258 <initDefaultChannels+0x104>)
 800d16e:	f004 fcf9 	bl	8011b64 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 800d172:	2220      	movs	r2, #32
 800d174:	2100      	movs	r1, #0
 800d176:	4839      	ldr	r0, [pc, #228]	@ (800d25c <initDefaultChannels+0x108>)
 800d178:	f004 fcf4 	bl	8011b64 <memset>

    LMIC.channelMap = 0x07;
 800d17c:	4b38      	ldr	r3, [pc, #224]	@ (800d260 <initDefaultChannels+0x10c>)
 800d17e:	2207      	movs	r2, #7
 800d180:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    uint8_t su = join ? 0 : 3;
 800d184:	79fb      	ldrb	r3, [r7, #7]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d001      	beq.n	800d18e <initDefaultChannels+0x3a>
 800d18a:	2300      	movs	r3, #0
 800d18c:	e000      	b.n	800d190 <initDefaultChannels+0x3c>
 800d18e:	2303      	movs	r3, #3
 800d190:	73fb      	strb	r3, [r7, #15]
    for( uint8_t fu=0; fu<3; fu++,su++ ) {
 800d192:	2300      	movs	r3, #0
 800d194:	73bb      	strb	r3, [r7, #14]
 800d196:	e017      	b.n	800d1c8 <initDefaultChannels+0x74>
        LMIC.channelFreq[fu]  = TABLE_GET_U4(iniChannelFreq, su);
 800d198:	7bfb      	ldrb	r3, [r7, #15]
 800d19a:	7bbc      	ldrb	r4, [r7, #14]
 800d19c:	4619      	mov	r1, r3
 800d19e:	4831      	ldr	r0, [pc, #196]	@ (800d264 <initDefaultChannels+0x110>)
 800d1a0:	f7fe fb7a 	bl	800b898 <table_get_u4>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	492e      	ldr	r1, [pc, #184]	@ (800d260 <initDefaultChannels+0x10c>)
 800d1a8:	f104 0310 	add.w	r3, r4, #16
 800d1ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 800d1b0:	7bbb      	ldrb	r3, [r7, #14]
 800d1b2:	4a2b      	ldr	r2, [pc, #172]	@ (800d260 <initDefaultChannels+0x10c>)
 800d1b4:	3340      	adds	r3, #64	@ 0x40
 800d1b6:	213f      	movs	r1, #63	@ 0x3f
 800d1b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( uint8_t fu=0; fu<3; fu++,su++ ) {
 800d1bc:	7bbb      	ldrb	r3, [r7, #14]
 800d1be:	3301      	adds	r3, #1
 800d1c0:	73bb      	strb	r3, [r7, #14]
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	73fb      	strb	r3, [r7, #15]
 800d1c8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ca:	2b02      	cmp	r3, #2
 800d1cc:	d9e4      	bls.n	800d198 <initDefaultChannels+0x44>
    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 800d1ce:	4b24      	ldr	r3, [pc, #144]	@ (800d260 <initDefaultChannels+0x10c>)
 800d1d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d1d4:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 800d1d6:	4b22      	ldr	r3, [pc, #136]	@ (800d260 <initDefaultChannels+0x10c>)
 800d1d8:	220e      	movs	r2, #14
 800d1da:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800d1de:	f003 f9eb 	bl	80105b8 <radio_rand1>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	f003 030f 	and.w	r3, r3, #15
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	4b1d      	ldr	r3, [pc, #116]	@ (800d260 <initDefaultChannels+0x10c>)
 800d1ec:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 800d1f0:	4b1b      	ldr	r3, [pc, #108]	@ (800d260 <initDefaultChannels+0x10c>)
 800d1f2:	2264      	movs	r2, #100	@ 0x64
 800d1f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 800d1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800d260 <initDefaultChannels+0x10c>)
 800d1f8:	220e      	movs	r2, #14
 800d1fa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800d1fe:	f003 f9db 	bl	80105b8 <radio_rand1>
 800d202:	4603      	mov	r3, r0
 800d204:	f003 030f 	and.w	r3, r3, #15
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	4b15      	ldr	r3, [pc, #84]	@ (800d260 <initDefaultChannels+0x10c>)
 800d20c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 800d210:	4b13      	ldr	r3, [pc, #76]	@ (800d260 <initDefaultChannels+0x10c>)
 800d212:	220a      	movs	r2, #10
 800d214:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 800d216:	4b12      	ldr	r3, [pc, #72]	@ (800d260 <initDefaultChannels+0x10c>)
 800d218:	221b      	movs	r2, #27
 800d21a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 800d21e:	f003 f9cb 	bl	80105b8 <radio_rand1>
 800d222:	4603      	mov	r3, r0
 800d224:	f003 030f 	and.w	r3, r3, #15
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	4b0d      	ldr	r3, [pc, #52]	@ (800d260 <initDefaultChannels+0x10c>)
 800d22c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail =
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 800d230:	f002 fb44 	bl	800f8bc <os_getTime>
 800d234:	4603      	mov	r3, r0
 800d236:	4a0a      	ldr	r2, [pc, #40]	@ (800d260 <initDefaultChannels+0x10c>)
 800d238:	6353      	str	r3, [r2, #52]	@ 0x34
 800d23a:	4b09      	ldr	r3, [pc, #36]	@ (800d260 <initDefaultChannels+0x10c>)
 800d23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 800d23e:	4a08      	ldr	r2, [pc, #32]	@ (800d260 <initDefaultChannels+0x10c>)
 800d240:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d242:	4b07      	ldr	r3, [pc, #28]	@ (800d260 <initDefaultChannels+0x10c>)
 800d244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail =
 800d246:	4a06      	ldr	r2, [pc, #24]	@ (800d260 <initDefaultChannels+0x10c>)
 800d248:	6253      	str	r3, [r2, #36]	@ 0x24
}
 800d24a:	bf00      	nop
 800d24c:	3714      	adds	r7, #20
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd90      	pop	{r4, r7, pc}
 800d252:	bf00      	nop
 800d254:	20000d88 	.word	0x20000d88
 800d258:	20000dc8 	.word	0x20000dc8
 800d25c:	20000d68 	.word	0x20000d68
 800d260:	20000d48 	.word	0x20000d48
 800d264:	08015b48 	.word	0x08015b48

0800d268 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bool LMIC_setupChannel (uint8_t chidx, uint32_t freq, uint16_t drmap, int8_t band) {
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6039      	str	r1, [r7, #0]
 800d270:	4611      	mov	r1, r2
 800d272:	461a      	mov	r2, r3
 800d274:	4603      	mov	r3, r0
 800d276:	71fb      	strb	r3, [r7, #7]
 800d278:	460b      	mov	r3, r1
 800d27a:	80bb      	strh	r3, [r7, #4]
 800d27c:	4613      	mov	r3, r2
 800d27e:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 800d280:	79fb      	ldrb	r3, [r7, #7]
 800d282:	2b0f      	cmp	r3, #15
 800d284:	d901      	bls.n	800d28a <LMIC_setupChannel+0x22>
        return 0;
 800d286:	2300      	movs	r3, #0
 800d288:	e054      	b.n	800d334 <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 800d28a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d292:	d121      	bne.n	800d2d8 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	4a2a      	ldr	r2, [pc, #168]	@ (800d340 <LMIC_setupChannel+0xd8>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d908      	bls.n	800d2ae <LMIC_setupChannel+0x46>
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	4a29      	ldr	r2, [pc, #164]	@ (800d344 <LMIC_setupChannel+0xdc>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d804      	bhi.n	800d2ae <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	f043 0302 	orr.w	r3, r3, #2
 800d2aa:	603b      	str	r3, [r7, #0]
 800d2ac:	e021      	b.n	800d2f2 <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	4a25      	ldr	r2, [pc, #148]	@ (800d348 <LMIC_setupChannel+0xe0>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d903      	bls.n	800d2be <LMIC_setupChannel+0x56>
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	4a24      	ldr	r2, [pc, #144]	@ (800d34c <LMIC_setupChannel+0xe4>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d907      	bls.n	800d2ce <LMIC_setupChannel+0x66>
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	4a23      	ldr	r2, [pc, #140]	@ (800d350 <LMIC_setupChannel+0xe8>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d315      	bcc.n	800d2f2 <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	4a22      	ldr	r2, [pc, #136]	@ (800d354 <LMIC_setupChannel+0xec>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d811      	bhi.n	800d2f2 <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	f043 0301 	orr.w	r3, r3, #1
 800d2d4:	603b      	str	r3, [r7, #0]
 800d2d6:	e00c      	b.n	800d2f2 <LMIC_setupChannel+0x8a>
        else
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 800d2d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d2dc:	2b03      	cmp	r3, #3
 800d2de:	dd01      	ble.n	800d2e4 <LMIC_setupChannel+0x7c>
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	e027      	b.n	800d334 <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	f023 0203 	bic.w	r2, r3, #3
 800d2ea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 800d2f2:	79fb      	ldrb	r3, [r7, #7]
 800d2f4:	4918      	ldr	r1, [pc, #96]	@ (800d358 <LMIC_setupChannel+0xf0>)
 800d2f6:	3310      	adds	r3, #16
 800d2f8:	683a      	ldr	r2, [r7, #0]
 800d2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 800d2fe:	88bb      	ldrh	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <LMIC_setupChannel+0xa0>
 800d304:	88ba      	ldrh	r2, [r7, #4]
 800d306:	e000      	b.n	800d30a <LMIC_setupChannel+0xa2>
 800d308:	223f      	movs	r2, #63	@ 0x3f
 800d30a:	79fb      	ldrb	r3, [r7, #7]
 800d30c:	4912      	ldr	r1, [pc, #72]	@ (800d358 <LMIC_setupChannel+0xf0>)
 800d30e:	3340      	adds	r3, #64	@ 0x40
 800d310:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 800d314:	4b10      	ldr	r3, [pc, #64]	@ (800d358 <LMIC_setupChannel+0xf0>)
 800d316:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800d31a:	b21a      	sxth	r2, r3
 800d31c:	79fb      	ldrb	r3, [r7, #7]
 800d31e:	2101      	movs	r1, #1
 800d320:	fa01 f303 	lsl.w	r3, r1, r3
 800d324:	b21b      	sxth	r3, r3
 800d326:	4313      	orrs	r3, r2
 800d328:	b21b      	sxth	r3, r3
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	4b0a      	ldr	r3, [pc, #40]	@ (800d358 <LMIC_setupChannel+0xf0>)
 800d32e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 800d332:	2301      	movs	r3, #1
}
 800d334:	4618      	mov	r0, r3
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	33d1fdbf 	.word	0x33d1fdbf
 800d344:	33d5ce50 	.word	0x33d5ce50
 800d348:	33bca0ff 	.word	0x33bca0ff
 800d34c:	33c5c8c0 	.word	0x33c5c8c0
 800d350:	33d691a0 	.word	0x33d691a0
 800d354:	33db2580 	.word	0x33db2580
 800d358:	20000d48 	.word	0x20000d48

0800d35c <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static uint32_t convFreq (uint8_t *ptr) {
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
    uint32_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	3b01      	subs	r3, #1
 800d368:	4618      	mov	r0, r3
 800d36a:	f7ff f97d 	bl	800c668 <os_rlsbf4>
 800d36e:	4603      	mov	r3, r0
 800d370:	0a1b      	lsrs	r3, r3, #8
 800d372:	2264      	movs	r2, #100	@ 0x64
 800d374:	fb02 f303 	mul.w	r3, r2, r3
 800d378:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	4a06      	ldr	r2, [pc, #24]	@ (800d398 <convFreq+0x3c>)
 800d37e:	4293      	cmp	r3, r2
 800d380:	d903      	bls.n	800d38a <convFreq+0x2e>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	4a05      	ldr	r2, [pc, #20]	@ (800d39c <convFreq+0x40>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d901      	bls.n	800d38e <convFreq+0x32>
        freq = 0;
 800d38a:	2300      	movs	r3, #0
 800d38c:	60fb      	str	r3, [r7, #12]
    return freq;
 800d38e:	68fb      	ldr	r3, [r7, #12]
}
 800d390:	4618      	mov	r0, r3
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	35d2afbf 	.word	0x35d2afbf
 800d39c:	35f5c820 	.word	0x35f5c820

0800d3a0 <mapChannels>:

static uint8_t mapChannels (uint8_t chpage, uint16_t chmap) {
 800d3a0:	b480      	push	{r7}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	460a      	mov	r2, r1
 800d3aa:	71fb      	strb	r3, [r7, #7]
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 800d3b0:	79fb      	ldrb	r3, [r7, #7]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10a      	bne.n	800d3cc <mapChannels+0x2c>
 800d3b6:	88bb      	ldrh	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d007      	beq.n	800d3cc <mapChannels+0x2c>
 800d3bc:	88ba      	ldrh	r2, [r7, #4]
 800d3be:	4b1c      	ldr	r3, [pc, #112]	@ (800d430 <mapChannels+0x90>)
 800d3c0:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800d3c4:	43db      	mvns	r3, r3
 800d3c6:	4013      	ands	r3, r2
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d001      	beq.n	800d3d0 <mapChannels+0x30>
        return 0;  // illegal input
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e028      	b.n	800d422 <mapChannels+0x82>
    for( uint8_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]
 800d3d4:	e01d      	b.n	800d412 <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 800d3d6:	88ba      	ldrh	r2, [r7, #4]
 800d3d8:	7bfb      	ldrb	r3, [r7, #15]
 800d3da:	fa42 f303 	asr.w	r3, r2, r3
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d012      	beq.n	800d40c <mapChannels+0x6c>
 800d3e6:	7bfb      	ldrb	r3, [r7, #15]
 800d3e8:	4a11      	ldr	r2, [pc, #68]	@ (800d430 <mapChannels+0x90>)
 800d3ea:	3310      	adds	r3, #16
 800d3ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10b      	bne.n	800d40c <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d3fc:	b21b      	sxth	r3, r3
 800d3fe:	43db      	mvns	r3, r3
 800d400:	b21a      	sxth	r2, r3
 800d402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d406:	4013      	ands	r3, r2
 800d408:	b21b      	sxth	r3, r3
 800d40a:	80bb      	strh	r3, [r7, #4]
    for( uint8_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	3301      	adds	r3, #1
 800d410:	73fb      	strb	r3, [r7, #15]
 800d412:	7bfb      	ldrb	r3, [r7, #15]
 800d414:	2b0f      	cmp	r3, #15
 800d416:	d9de      	bls.n	800d3d6 <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 800d418:	4a05      	ldr	r2, [pc, #20]	@ (800d430 <mapChannels+0x90>)
 800d41a:	88bb      	ldrh	r3, [r7, #4]
 800d41c:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 800d420:	2301      	movs	r3, #1
}
 800d422:	4618      	mov	r0, r3
 800d424:	3714      	adds	r7, #20
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	20000d48 	.word	0x20000d48

0800d434 <updateTx>:


static void updateTx (ostime_t txbeg) {
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
    uint32_t freq = LMIC.channelFreq[LMIC.txChnl];
 800d43c:	4b21      	ldr	r3, [pc, #132]	@ (800d4c4 <updateTx+0x90>)
 800d43e:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800d442:	4a20      	ldr	r2, [pc, #128]	@ (800d4c4 <updateTx+0x90>)
 800d444:	3310      	adds	r3, #16
 800d446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d44a:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 800d44c:	4b1d      	ldr	r3, [pc, #116]	@ (800d4c4 <updateTx+0x90>)
 800d44e:	89db      	ldrh	r3, [r3, #14]
 800d450:	4a1c      	ldr	r2, [pc, #112]	@ (800d4c4 <updateTx+0x90>)
 800d452:	f892 214b 	ldrb.w	r2, [r2, #331]	@ 0x14b
 800d456:	4611      	mov	r1, r2
 800d458:	4618      	mov	r0, r3
 800d45a:	f7ff fb5d 	bl	800cb18 <calcAirTime>
 800d45e:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    band_t *band = &LMIC.bands[freq & 0x3];
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	f003 0303 	and.w	r3, r3, #3
 800d466:	3304      	adds	r3, #4
 800d468:	00db      	lsls	r3, r3, #3
 800d46a:	4a16      	ldr	r2, [pc, #88]	@ (800d4c4 <updateTx+0x90>)
 800d46c:	4413      	add	r3, r2
 800d46e:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(uint32_t)3;
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	f023 0303 	bic.w	r3, r3, #3
 800d476:	4a13      	ldr	r2, [pc, #76]	@ (800d4c4 <updateTx+0x90>)
 800d478:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800d480:	4b10      	ldr	r3, [pc, #64]	@ (800d4c4 <updateTx+0x90>)
 800d482:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	461a      	mov	r2, r3
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	fb03 f202 	mul.w	r2, r3, r2
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	441a      	add	r2, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 800d498:	4b0a      	ldr	r3, [pc, #40]	@ (800d4c4 <updateTx+0x90>)
 800d49a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00b      	beq.n	800d4ba <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 800d4a2:	4b08      	ldr	r3, [pc, #32]	@ (800d4c4 <updateTx+0x90>)
 800d4a4:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	fa03 f202 	lsl.w	r2, r3, r2
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4413      	add	r3, r2
 800d4b4:	4a03      	ldr	r2, [pc, #12]	@ (800d4c4 <updateTx+0x90>)
 800d4b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Updating info for TX at %lu, airtime will be %lu. Setting available time for band %d to %lu\n", os_getTime(), txbeg, airtime, freq & 0x3, band->avail);
        if( LMIC.globalDutyRate != 0 )
            lmic_printf("%lu: Updating global duty avail to %lu\n", os_getTime(), LMIC.globalDutyAvail);
    #endif
}
 800d4ba:	bf00      	nop
 800d4bc:	3718      	adds	r7, #24
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20000d48 	.word	0x20000d48

0800d4c8 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 800d4c8:	b480      	push	{r7}
 800d4ca:	b087      	sub	sp, #28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
    uint8_t bmap=0xF;
 800d4d0:	230f      	movs	r3, #15
 800d4d2:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*8h*/sec2osticks(28800);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f103 535b 	add.w	r3, r3, #918552576	@ 0x36c00000
 800d4da:	f503 133a 	add.w	r3, r3, #3047424	@ 0x2e8000
 800d4de:	613b      	str	r3, [r7, #16]
        uint8_t band=0;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	73fb      	strb	r3, [r7, #15]
        for( uint8_t bi=0; bi<4; bi++ ) {
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	73bb      	strb	r3, [r7, #14]
 800d4e8:	e01c      	b.n	800d524 <nextTx+0x5c>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 ) {
 800d4ea:	7dfa      	ldrb	r2, [r7, #23]
 800d4ec:	7bbb      	ldrb	r3, [r7, #14]
 800d4ee:	fa42 f303 	asr.w	r3, r2, r3
 800d4f2:	f003 0301 	and.w	r3, r3, #1
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d011      	beq.n	800d51e <nextTx+0x56>
 800d4fa:	7bbb      	ldrb	r3, [r7, #14]
 800d4fc:	4a3e      	ldr	r2, [pc, #248]	@ (800d5f8 <nextTx+0x130>)
 800d4fe:	3304      	adds	r3, #4
 800d500:	00db      	lsls	r3, r3, #3
 800d502:	4413      	add	r3, r2
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d008      	beq.n	800d51e <nextTx+0x56>
                #if LMIC_DEBUG_LEVEL > 1
                    lmic_printf("%lu: Considering band %d, which is available at %lu\n", os_getTime(), bi, LMIC.bands[bi].avail);
                #endif
                mintime = LMIC.bands[band = bi].avail;
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	73fb      	strb	r3, [r7, #15]
 800d510:	7bfb      	ldrb	r3, [r7, #15]
 800d512:	4a39      	ldr	r2, [pc, #228]	@ (800d5f8 <nextTx+0x130>)
 800d514:	3304      	adds	r3, #4
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	4413      	add	r3, r2
 800d51a:	685b      	ldr	r3, [r3, #4]
 800d51c:	613b      	str	r3, [r7, #16]
        for( uint8_t bi=0; bi<4; bi++ ) {
 800d51e:	7bbb      	ldrb	r3, [r7, #14]
 800d520:	3301      	adds	r3, #1
 800d522:	73bb      	strb	r3, [r7, #14]
 800d524:	7bbb      	ldrb	r3, [r7, #14]
 800d526:	2b03      	cmp	r3, #3
 800d528:	d9df      	bls.n	800d4ea <nextTx+0x22>
            }
        }
        // Find next channel in given band
        uint8_t chnl = LMIC.bands[band].lastchnl;
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
 800d52c:	4a32      	ldr	r2, [pc, #200]	@ (800d5f8 <nextTx+0x130>)
 800d52e:	3304      	adds	r3, #4
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	4413      	add	r3, r2
 800d534:	78db      	ldrb	r3, [r3, #3]
 800d536:	737b      	strb	r3, [r7, #13]
        for( uint8_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800d538:	2300      	movs	r3, #0
 800d53a:	733b      	strb	r3, [r7, #12]
 800d53c:	e042      	b.n	800d5c4 <nextTx+0xfc>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 800d53e:	7b7b      	ldrb	r3, [r7, #13]
 800d540:	3301      	adds	r3, #1
 800d542:	737b      	strb	r3, [r7, #13]
 800d544:	7b7b      	ldrb	r3, [r7, #13]
 800d546:	2b0f      	cmp	r3, #15
 800d548:	d902      	bls.n	800d550 <nextTx+0x88>
                chnl -=  MAX_CHANNELS;
 800d54a:	7b7b      	ldrb	r3, [r7, #13]
 800d54c:	3b10      	subs	r3, #16
 800d54e:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 800d550:	4b29      	ldr	r3, [pc, #164]	@ (800d5f8 <nextTx+0x130>)
 800d552:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800d556:	461a      	mov	r2, r3
 800d558:	7b7b      	ldrb	r3, [r7, #13]
 800d55a:	fa42 f303 	asr.w	r3, r2, r3
 800d55e:	f003 0301 	and.w	r3, r3, #1
 800d562:	2b00      	cmp	r3, #0
 800d564:	d02b      	beq.n	800d5be <nextTx+0xf6>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800d566:	7b7b      	ldrb	r3, [r7, #13]
 800d568:	4a23      	ldr	r2, [pc, #140]	@ (800d5f8 <nextTx+0x130>)
 800d56a:	3340      	adds	r3, #64	@ 0x40
 800d56c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d570:	461a      	mov	r2, r3
 800d572:	4b21      	ldr	r3, [pc, #132]	@ (800d5f8 <nextTx+0x130>)
 800d574:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800d578:	f003 030f 	and.w	r3, r3, #15
 800d57c:	fa42 f303 	asr.w	r3, r2, r3
 800d580:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 800d584:	2b00      	cmp	r3, #0
 800d586:	d01a      	beq.n	800d5be <nextTx+0xf6>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 800d588:	7bfa      	ldrb	r2, [r7, #15]
 800d58a:	7b7b      	ldrb	r3, [r7, #13]
 800d58c:	491a      	ldr	r1, [pc, #104]	@ (800d5f8 <nextTx+0x130>)
 800d58e:	3310      	adds	r3, #16
 800d590:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800d594:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800d598:	429a      	cmp	r2, r3
 800d59a:	d110      	bne.n	800d5be <nextTx+0xf6>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 800d59c:	7bfa      	ldrb	r2, [r7, #15]
 800d59e:	4916      	ldr	r1, [pc, #88]	@ (800d5f8 <nextTx+0x130>)
 800d5a0:	1d13      	adds	r3, r2, #4
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	440b      	add	r3, r1
 800d5a6:	7b79      	ldrb	r1, [r7, #13]
 800d5a8:	70d9      	strb	r1, [r3, #3]
 800d5aa:	4913      	ldr	r1, [pc, #76]	@ (800d5f8 <nextTx+0x130>)
 800d5ac:	1d13      	adds	r3, r2, #4
 800d5ae:	00db      	lsls	r3, r3, #3
 800d5b0:	440b      	add	r3, r1
 800d5b2:	78da      	ldrb	r2, [r3, #3]
 800d5b4:	4b10      	ldr	r3, [pc, #64]	@ (800d5f8 <nextTx+0x130>)
 800d5b6:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	e016      	b.n	800d5ec <nextTx+0x124>
        for( uint8_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800d5be:	7b3b      	ldrb	r3, [r7, #12]
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	733b      	strb	r3, [r7, #12]
 800d5c4:	7b3b      	ldrb	r3, [r7, #12]
 800d5c6:	2b0f      	cmp	r3, #15
 800d5c8:	d9b9      	bls.n	800d53e <nextTx+0x76>
            }
        }
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: No channel found in band %d\n", os_getTime(), band);
        #endif
        if( (bmap &= ~(1<<band)) == 0 ) {
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d2:	b25b      	sxtb	r3, r3
 800d5d4:	43db      	mvns	r3, r3
 800d5d6:	b25a      	sxtb	r2, r3
 800d5d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d5dc:	4013      	ands	r3, r2
 800d5de:	b25b      	sxtb	r3, r3
 800d5e0:	75fb      	strb	r3, [r7, #23]
 800d5e2:	7dfb      	ldrb	r3, [r7, #23]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f47f af75 	bne.w	800d4d4 <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 800d5ea:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	371c      	adds	r7, #28
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	20000d48 	.word	0x20000d48

0800d5fc <setBcnRxParams>:


#if !defined(LMIC_DISABLE_BEACONS)
static void setBcnRxParams (void) {
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 800d600:	4b10      	ldr	r3, [pc, #64]	@ (800d644 <setBcnRxParams+0x48>)
 800d602:	2200      	movs	r2, #0
 800d604:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(uint32_t)3;
 800d608:	4b0e      	ldr	r3, [pc, #56]	@ (800d644 <setBcnRxParams+0x48>)
 800d60a:	f893 318c 	ldrb.w	r3, [r3, #396]	@ 0x18c
 800d60e:	4a0d      	ldr	r2, [pc, #52]	@ (800d644 <setBcnRxParams+0x48>)
 800d610:	3310      	adds	r3, #16
 800d612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d616:	f023 0303 	bic.w	r3, r3, #3
 800d61a:	4a0a      	ldr	r2, [pc, #40]	@ (800d644 <setBcnRxParams+0x48>)
 800d61c:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 800d61e:	2003      	movs	r0, #3
 800d620:	f7fe ffb0 	bl	800c584 <dndr2rps>
 800d624:	4603      	mov	r3, r0
 800d626:	2101      	movs	r1, #1
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe ff5c 	bl	800c4e6 <setNocrc>
 800d62e:	4603      	mov	r3, r0
 800d630:	2111      	movs	r1, #17
 800d632:	4618      	mov	r0, r3
 800d634:	f7fe ff7d 	bl	800c532 <setIh>
 800d638:	4603      	mov	r3, r0
 800d63a:	461a      	mov	r2, r3
 800d63c:	4b01      	ldr	r3, [pc, #4]	@ (800d644 <setBcnRxParams+0x48>)
 800d63e:	81da      	strh	r2, [r3, #14]
}
 800d640:	bf00      	nop
 800d642:	bd80      	pop	{r7, pc}
 800d644:	20000d48 	.word	0x20000d48

0800d648 <initJoinLoop>:
#endif // !LMIC_DISABLE_BEACONS

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

#if !defined(LMIC_DISABLE_JOIN)
static void initJoinLoop (void) {
 800d648:	b598      	push	{r3, r4, r7, lr}
 800d64a:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % 3;
 800d64c:	f002 ffb4 	bl	80105b8 <radio_rand1>
 800d650:	4603      	mov	r3, r0
 800d652:	461a      	mov	r2, r3
 800d654:	4b16      	ldr	r3, [pc, #88]	@ (800d6b0 <initJoinLoop+0x68>)
 800d656:	fba3 1302 	umull	r1, r3, r3, r2
 800d65a:	0859      	lsrs	r1, r3, #1
 800d65c:	460b      	mov	r3, r1
 800d65e:	005b      	lsls	r3, r3, #1
 800d660:	440b      	add	r3, r1
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	b2da      	uxtb	r2, r3
 800d666:	4b13      	ldr	r3, [pc, #76]	@ (800d6b4 <initJoinLoop+0x6c>)
 800d668:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 800d66c:	4b11      	ldr	r3, [pc, #68]	@ (800d6b4 <initJoinLoop+0x6c>)
 800d66e:	220e      	movs	r2, #14
 800d670:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 800d674:	2105      	movs	r1, #5
 800d676:	2000      	movs	r0, #0
 800d678:	f7ff fd2a 	bl	800d0d0 <setDrJoin>
    initDefaultChannels(0);
 800d67c:	2000      	movs	r0, #0
 800d67e:	f7ff fd69 	bl	800d154 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 800d682:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b4 <initJoinLoop+0x6c>)
 800d684:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800d688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d004      	beq.n	800d69a <initJoinLoop+0x52>
 800d690:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 800d694:	4808      	ldr	r0, [pc, #32]	@ (800d6b8 <initJoinLoop+0x70>)
 800d696:	f003 fb8f 	bl	8010db8 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 800d69a:	4b06      	ldr	r3, [pc, #24]	@ (800d6b4 <initJoinLoop+0x6c>)
 800d69c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d69e:	2008      	movs	r0, #8
 800d6a0:	f7ff fca8 	bl	800cff4 <rndDelay>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	4423      	add	r3, r4
 800d6a8:	4a02      	ldr	r2, [pc, #8]	@ (800d6b4 <initJoinLoop+0x6c>)
 800d6aa:	6013      	str	r3, [r2, #0]
}
 800d6ac:	bf00      	nop
 800d6ae:	bd98      	pop	{r3, r4, r7, pc}
 800d6b0:	aaaaaaab 	.word	0xaaaaaaab
 800d6b4:	20000d48 	.word	0x20000d48
 800d6b8:	08013f3c 	.word	0x08013f3c

0800d6bc <nextJoinState>:


static ostime_t nextJoinState (void) {
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
    uint8_t failed = 0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == 3 )
 800d6c6:	4b30      	ldr	r3, [pc, #192]	@ (800d788 <nextJoinState+0xcc>)
 800d6c8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	b2da      	uxtb	r2, r3
 800d6d0:	4b2d      	ldr	r3, [pc, #180]	@ (800d788 <nextJoinState+0xcc>)
 800d6d2:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 800d6d6:	4b2c      	ldr	r3, [pc, #176]	@ (800d788 <nextJoinState+0xcc>)
 800d6d8:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800d6dc:	2b03      	cmp	r3, #3
 800d6de:	d103      	bne.n	800d6e8 <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 800d6e0:	4b29      	ldr	r3, [pc, #164]	@ (800d788 <nextJoinState+0xcc>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 800d6e8:	4b27      	ldr	r3, [pc, #156]	@ (800d788 <nextJoinState+0xcc>)
 800d6ea:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	4b25      	ldr	r3, [pc, #148]	@ (800d788 <nextJoinState+0xcc>)
 800d6f4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
 800d6f8:	4b23      	ldr	r3, [pc, #140]	@ (800d788 <nextJoinState+0xcc>)
 800d6fa:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	2b00      	cmp	r3, #0
 800d704:	d112      	bne.n	800d72c <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 800d706:	4b20      	ldr	r3, [pc, #128]	@ (800d788 <nextJoinState+0xcc>)
 800d708:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 800d710:	2301      	movs	r3, #1
 800d712:	71fb      	strb	r3, [r7, #7]
 800d714:	e00a      	b.n	800d72c <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 800d716:	4b1c      	ldr	r3, [pc, #112]	@ (800d788 <nextJoinState+0xcc>)
 800d718:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fe ff45 	bl	800c5ac <decDR>
 800d722:	4603      	mov	r3, r0
 800d724:	4619      	mov	r1, r3
 800d726:	2001      	movs	r0, #1
 800d728:	f7ff fcd2 	bl	800d0d0 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 800d72c:	4b16      	ldr	r3, [pc, #88]	@ (800d788 <nextJoinState+0xcc>)
 800d72e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800d732:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d736:	b29a      	uxth	r2, r3
 800d738:	4b13      	ldr	r3, [pc, #76]	@ (800d788 <nextJoinState+0xcc>)
 800d73a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 800d73e:	f002 f8bd 	bl	800f8bc <os_getTime>
 800d742:	6038      	str	r0, [r7, #0]
    if( (ostimediff_t)(time - LMIC.bands[BAND_MILLI].avail) < 0 )
 800d744:	4b10      	ldr	r3, [pc, #64]	@ (800d788 <nextJoinState+0xcc>)
 800d746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	da02      	bge.n	800d756 <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 800d750:	4b0d      	ldr	r3, [pc, #52]	@ (800d788 <nextJoinState+0xcc>)
 800d752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d754:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 800d756:	4b0c      	ldr	r3, [pc, #48]	@ (800d788 <nextJoinState+0xcc>)
 800d758:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800d75c:	461a      	mov	r2, r3
 800d75e:	23ff      	movs	r3, #255	@ 0xff
 800d760:	4113      	asrs	r3, r2
 800d762:	b2db      	uxtb	r3, r3
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fc45 	bl	800cff4 <rndDelay>
 800d76a:	4602      	mov	r2, r0
    LMIC.txend = time +
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	4413      	add	r3, r2
 800d770:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 800d774:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800d778:	4a03      	ldr	r2, [pc, #12]	@ (800d788 <nextJoinState+0xcc>)
 800d77a:	6013      	str	r3, [r2, #0]
            lmic_printf("%lu: Join failed\n", os_getTime());
        else
            lmic_printf("%lu: Scheduling next join at %lu\n", os_getTime(), LMIC.txend);
    #endif
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 800d77c:	79fb      	ldrb	r3, [r7, #7]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	3708      	adds	r7, #8
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	20000d48 	.word	0x20000d48

0800d78c <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (osjob_t *osjob) {
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
    engineUpdate();
 800d794:	f001 fd8a 	bl	800f2ac <engineUpdate>
}
 800d798:	bf00      	nop
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <reportEvent>:


static void reportEvent (ev_t ev) {
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7f4 fb67 	bl	8001e80 <onEvent>
    engineUpdate();
 800d7b2:	f001 fd7b 	bl	800f2ac <engineUpdate>
}
 800d7b6:	bf00      	nop
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}

0800d7be <runReset>:


static void runReset (osjob_t *osjob) {
 800d7be:	b580      	push	{r7, lr}
 800d7c0:	b082      	sub	sp, #8
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 800d7c6:	f001 ff31 	bl	800f62c <LMIC_reset>
#if !defined(LMIC_DISABLE_JOIN)
    LMIC_startJoining();
 800d7ca:	f001 fae7 	bl	800ed9c <LMIC_startJoining>
#endif // !LMIC_DISABLE_JOIN
    reportEvent(EV_RESET);
 800d7ce:	200c      	movs	r0, #12
 800d7d0:	f7ff ffe6 	bl	800d7a0 <reportEvent>
}
 800d7d4:	bf00      	nop
 800d7d6:	3708      	adds	r7, #8
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <stateJustJoined>:

static void stateJustJoined (void) {
 800d7dc:	b480      	push	{r7}
 800d7de:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 800d7e0:	4b2c      	ldr	r3, [pc, #176]	@ (800d894 <stateJustJoined+0xb8>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
 800d7e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d894 <stateJustJoined+0xb8>)
 800d7ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d7ee:	4a29      	ldr	r2, [pc, #164]	@ (800d894 <stateJustJoined+0xb8>)
 800d7f0:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
    LMIC.rejoinCnt   = 0;
 800d7f4:	4b27      	ldr	r3, [pc, #156]	@ (800d894 <stateJustJoined+0xb8>)
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 800d7fc:	4b25      	ldr	r3, [pc, #148]	@ (800d894 <stateJustJoined+0xb8>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 800d804:	4b23      	ldr	r3, [pc, #140]	@ (800d894 <stateJustJoined+0xb8>)
 800d806:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 800d80a:	4b22      	ldr	r3, [pc, #136]	@ (800d894 <stateJustJoined+0xb8>)
 800d80c:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 800d810:	4b20      	ldr	r3, [pc, #128]	@ (800d894 <stateJustJoined+0xb8>)
 800d812:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 800d816:	461a      	mov	r2, r3
 800d818:	4b1e      	ldr	r3, [pc, #120]	@ (800d894 <stateJustJoined+0xb8>)
 800d81a:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 800d81e:	4b1d      	ldr	r3, [pc, #116]	@ (800d894 <stateJustJoined+0xb8>)
 800d820:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 800d824:	4b1b      	ldr	r3, [pc, #108]	@ (800d894 <stateJustJoined+0xb8>)
 800d826:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
#if !defined(LMIC_DISABLE_MCMD_SNCH_REQ)
    LMIC.snchAns     = 0;
 800d82a:	4b1a      	ldr	r3, [pc, #104]	@ (800d894 <stateJustJoined+0xb8>)
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif
#if !defined(LMIC_DISABLE_MCMD_DN2P_SET)
    LMIC.dn2Ans      = 0;
 800d832:	4b18      	ldr	r3, [pc, #96]	@ (800d894 <stateJustJoined+0xb8>)
 800d834:	2200      	movs	r2, #0
 800d836:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
#endif
    LMIC.moreData    = 0;
 800d83a:	4b16      	ldr	r3, [pc, #88]	@ (800d894 <stateJustJoined+0xb8>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
#if !defined(LMIC_DISABLE_MCMD_DCAP_REQ)
    LMIC.dutyCapAns  = 0;
 800d842:	4b14      	ldr	r3, [pc, #80]	@ (800d894 <stateJustJoined+0xb8>)
 800d844:	2200      	movs	r2, #0
 800d846:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
#endif
#if !defined(LMIC_DISABLE_MCMD_PING_SET) && !defined(LMIC_DISABLE_PING)
    LMIC.pingSetAns  = 0;
 800d84a:	4b12      	ldr	r3, [pc, #72]	@ (800d894 <stateJustJoined+0xb8>)
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 2137 	strb.w	r2, [r3, #311]	@ 0x137
#endif
    LMIC.upRepeat    = 0;
 800d852:	4b10      	ldr	r3, [pc, #64]	@ (800d894 <stateJustJoined+0xb8>)
 800d854:	2200      	movs	r2, #0
 800d856:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 800d85a:	4b0e      	ldr	r3, [pc, #56]	@ (800d894 <stateJustJoined+0xb8>)
 800d85c:	22f4      	movs	r2, #244	@ 0xf4
 800d85e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    LMIC.dn2Dr       = DR_DNW2;
 800d862:	4b0c      	ldr	r3, [pc, #48]	@ (800d894 <stateJustJoined+0xb8>)
 800d864:	2200      	movs	r2, #0
 800d866:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
    LMIC.dn2Freq     = FREQ_DNW2;
 800d86a:	4b0a      	ldr	r3, [pc, #40]	@ (800d894 <stateJustJoined+0xb8>)
 800d86c:	4a0a      	ldr	r2, [pc, #40]	@ (800d898 <stateJustJoined+0xbc>)
 800d86e:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
#if !defined(LMIC_DISABLE_BEACONS)
    LMIC.bcnChnl     = CHNL_BCN;
 800d872:	4b08      	ldr	r3, [pc, #32]	@ (800d894 <stateJustJoined+0xb8>)
 800d874:	2205      	movs	r2, #5
 800d876:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
#endif
#if !defined(LMIC_DISABLE_PING)
    LMIC.ping.freq   = FREQ_PING;
 800d87a:	4b06      	ldr	r3, [pc, #24]	@ (800d894 <stateJustJoined+0xb8>)
 800d87c:	4a06      	ldr	r2, [pc, #24]	@ (800d898 <stateJustJoined+0xbc>)
 800d87e:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    LMIC.ping.dr     = DR_PING;
 800d882:	4b04      	ldr	r3, [pc, #16]	@ (800d894 <stateJustJoined+0xb8>)
 800d884:	2203      	movs	r2, #3
 800d886:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
#endif
}
 800d88a:	bf00      	nop
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr
 800d894:	20000d48 	.word	0x20000d48
 800d898:	36fab500 	.word	0x36fab500

0800d89c <decodeBeacon>:
// Decoding frames


#if !defined(LMIC_DISABLE_BEACONS)
// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 800d89c:	b590      	push	{r4, r7, lr}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 800d8a2:	4b47      	ldr	r3, [pc, #284]	@ (800d9c0 <decodeBeacon+0x124>)
 800d8a4:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800d8a8:	2b11      	cmp	r3, #17
 800d8aa:	d004      	beq.n	800d8b6 <decodeBeacon+0x1a>
 800d8ac:	f240 31fd 	movw	r1, #1021	@ 0x3fd
 800d8b0:	4844      	ldr	r0, [pc, #272]	@ (800d9c4 <decodeBeacon+0x128>)
 800d8b2:	f003 fa81 	bl	8010db8 <hal_failed>
    uint8_t *d = LMIC.frame;
 800d8b6:	4b44      	ldr	r3, [pc, #272]	@ (800d9c8 <decodeBeacon+0x12c>)
 800d8b8:	607b      	str	r3, [r7, #4]
    if(
#if LMIC_EU868
        d[OFF_BCN_CRC1] != (uint8_t)os_crc16(d,OFF_BCN_CRC1)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	3307      	adds	r3, #7
 800d8be:	781c      	ldrb	r4, [r3, #0]
 800d8c0:	2107      	movs	r1, #7
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7fe ff69 	bl	800c79a <os_crc16>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	b2db      	uxtb	r3, r3
    if(
 800d8cc:	429c      	cmp	r4, r3
 800d8ce:	d001      	beq.n	800d8d4 <decodeBeacon+0x38>
#elif LMIC_US915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	e071      	b.n	800d9b8 <decodeBeacon+0x11c>
    // First set of fields is ok
    uint32_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f7fe fec7 	bl	800c668 <os_rlsbf4>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d8e0:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 800d8e2:	4b37      	ldr	r3, [pc, #220]	@ (800d9c0 <decodeBeacon+0x124>)
 800d8e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800d8e8:	683a      	ldr	r2, [r7, #0]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d002      	beq.n	800d8f4 <decodeBeacon+0x58>
        return -1;  // not the beacon we're looking for
 800d8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f2:	e061      	b.n	800d9b8 <decodeBeacon+0x11c>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 800d8f4:	4b32      	ldr	r3, [pc, #200]	@ (800d9c0 <decodeBeacon+0x124>)
 800d8f6:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800d8fa:	f023 0303 	bic.w	r3, r3, #3
 800d8fe:	b2da      	uxtb	r2, r3
 800d900:	4b2f      	ldr	r3, [pc, #188]	@ (800d9c0 <decodeBeacon+0x124>)
 800d902:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 800d906:	4b2e      	ldr	r3, [pc, #184]	@ (800d9c0 <decodeBeacon+0x124>)
 800d908:	f993 200d 	ldrsb.w	r2, [r3, #13]
 800d90c:	4b2c      	ldr	r3, [pc, #176]	@ (800d9c0 <decodeBeacon+0x124>)
 800d90e:	f883 2199 	strb.w	r2, [r3, #409]	@ 0x199
    LMIC.bcninfo.rssi   = LMIC.rssi;
 800d912:	4b2b      	ldr	r3, [pc, #172]	@ (800d9c0 <decodeBeacon+0x124>)
 800d914:	f993 200c 	ldrsb.w	r2, [r3, #12]
 800d918:	4b29      	ldr	r3, [pc, #164]	@ (800d9c0 <decodeBeacon+0x124>)
 800d91a:	f883 2198 	strb.w	r2, [r3, #408]	@ 0x198
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 800d91e:	4b28      	ldr	r3, [pc, #160]	@ (800d9c0 <decodeBeacon+0x124>)
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 800d926:	3b0c      	subs	r3, #12
 800d928:	4a25      	ldr	r2, [pc, #148]	@ (800d9c0 <decodeBeacon+0x124>)
 800d92a:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3303      	adds	r3, #3
 800d932:	4618      	mov	r0, r3
 800d934:	f7fe fe98 	bl	800c668 <os_rlsbf4>
 800d938:	4603      	mov	r3, r0
 800d93a:	4a21      	ldr	r2, [pc, #132]	@ (800d9c0 <decodeBeacon+0x124>)
 800d93c:	f8c2 319c 	str.w	r3, [r2, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 800d940:	4b1f      	ldr	r3, [pc, #124]	@ (800d9c0 <decodeBeacon+0x124>)
 800d942:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800d946:	f043 0301 	orr.w	r3, r3, #1
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	4b1c      	ldr	r3, [pc, #112]	@ (800d9c0 <decodeBeacon+0x124>)
 800d94e:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	330f      	adds	r3, #15
 800d956:	4618      	mov	r0, r3
 800d958:	f7fe fe71 	bl	800c63e <os_rlsbf2>
 800d95c:	4603      	mov	r3, r0
 800d95e:	461c      	mov	r4, r3
 800d960:	210f      	movs	r1, #15
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7fe ff19 	bl	800c79a <os_crc16>
 800d968:	4603      	mov	r3, r0
 800d96a:	429c      	cmp	r4, r3
 800d96c:	d001      	beq.n	800d972 <decodeBeacon+0xd6>
        return 1;
 800d96e:	2301      	movs	r3, #1
 800d970:	e022      	b.n	800d9b8 <decodeBeacon+0x11c>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (int32_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	3308      	adds	r3, #8
 800d976:	4618      	mov	r0, r3
 800d978:	f7fe fe76 	bl	800c668 <os_rlsbf4>
 800d97c:	4603      	mov	r3, r0
 800d97e:	121b      	asrs	r3, r3, #8
 800d980:	4a0f      	ldr	r2, [pc, #60]	@ (800d9c0 <decodeBeacon+0x124>)
 800d982:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.lon    = (int32_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	330b      	adds	r3, #11
 800d98a:	4618      	mov	r0, r3
 800d98c:	f7fe fe6c 	bl	800c668 <os_rlsbf4>
 800d990:	4603      	mov	r3, r0
 800d992:	121b      	asrs	r3, r3, #8
 800d994:	4a0a      	ldr	r2, [pc, #40]	@ (800d9c0 <decodeBeacon+0x124>)
 800d996:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	7a1a      	ldrb	r2, [r3, #8]
 800d99e:	4b08      	ldr	r3, [pc, #32]	@ (800d9c0 <decodeBeacon+0x124>)
 800d9a0:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
    LMIC.bcninfo.flags |= BCN_FULL;
 800d9a4:	4b06      	ldr	r3, [pc, #24]	@ (800d9c0 <decodeBeacon+0x124>)
 800d9a6:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800d9aa:	f043 0302 	orr.w	r3, r3, #2
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	4b03      	ldr	r3, [pc, #12]	@ (800d9c0 <decodeBeacon+0x124>)
 800d9b2:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
    return 2;
 800d9b6:	2302      	movs	r3, #2
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd90      	pop	{r4, r7, pc}
 800d9c0:	20000d48 	.word	0x20000d48
 800d9c4:	08013f3c 	.word	0x08013f3c
 800d9c8:	20000e94 	.word	0x20000e94

0800d9cc <decodeFrame>:
#endif // !LMIC_DISABLE_BEACONS


static bool decodeFrame (void) {
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	b09b      	sub	sp, #108	@ 0x6c
 800d9d2:	af02      	add	r7, sp, #8
    uint8_t *d = LMIC.frame;
 800d9d4:	4ba6      	ldr	r3, [pc, #664]	@ (800dc70 <decodeFrame+0x2a4>)
 800d9d6:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint8_t hdr    = d[0];
 800d9d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9da:	781b      	ldrb	r3, [r3, #0]
 800d9dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t ftype  = hdr & HDR_FTYPE;
 800d9e0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800d9e4:	f023 031f 	bic.w	r3, r3, #31
 800d9e8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 800d9ec:	4ba1      	ldr	r3, [pc, #644]	@ (800dc74 <decodeFrame+0x2a8>)
 800d9ee:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800d9f2:	643b      	str	r3, [r7, #64]	@ 0x40
    const char *window = (LMIC.txrxFlags & TXRX_DNW1) ? "RX1" : ((LMIC.txrxFlags & TXRX_DNW2) ? "RX2" : "Other");
 800d9f4:	4b9f      	ldr	r3, [pc, #636]	@ (800dc74 <decodeFrame+0x2a8>)
 800d9f6:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800d9fa:	f003 0301 	and.w	r3, r3, #1
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10a      	bne.n	800da18 <decodeFrame+0x4c>
 800da02:	4b9c      	ldr	r3, [pc, #624]	@ (800dc74 <decodeFrame+0x2a8>)
 800da04:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800da08:	f003 0302 	and.w	r3, r3, #2
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <decodeFrame+0x48>
 800da10:	4b99      	ldr	r3, [pc, #612]	@ (800dc78 <decodeFrame+0x2ac>)
 800da12:	e002      	b.n	800da1a <decodeFrame+0x4e>
 800da14:	4b99      	ldr	r3, [pc, #612]	@ (800dc7c <decodeFrame+0x2b0>)
 800da16:	e000      	b.n	800da1a <decodeFrame+0x4e>
 800da18:	4b99      	ldr	r3, [pc, #612]	@ (800dc80 <decodeFrame+0x2b4>)
 800da1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if( dlen < OFF_DAT_OPTS+4 ||
 800da1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da1e:	2b0b      	cmp	r3, #11
 800da20:	dd0d      	ble.n	800da3e <decodeFrame+0x72>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 800da22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800da26:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d107      	bne.n	800da3e <decodeFrame+0x72>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 800da2e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800da32:	2b60      	cmp	r3, #96	@ 0x60
 800da34:	d01c      	beq.n	800da70 <decodeFrame+0xa4>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 800da36:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800da3a:	2ba0      	cmp	r3, #160	@ 0xa0
 800da3c:	d018      	beq.n	800da70 <decodeFrame+0xa4>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 800da3e:	bf00      	nop
 800da40:	e008      	b.n	800da54 <decodeFrame+0x88>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 800da42:	bf00      	nop
 800da44:	e006      	b.n	800da54 <decodeFrame+0x88>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 800da46:	bf00      	nop
 800da48:	e004      	b.n	800da54 <decodeFrame+0x88>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 800da4a:	bf00      	nop
 800da4c:	e002      	b.n	800da54 <decodeFrame+0x88>
        if( (int32_t)seqno > (int32_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn,
                                e_.info2  = seqno));
            goto norx;
 800da4e:	bf00      	nop
 800da50:	e000      	b.n	800da54 <decodeFrame+0x88>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn,
                                e_.info2  = seqno));
            goto norx;
 800da52:	bf00      	nop
        lmic_printf("%lu: Invalid downlink, window=%s\n", os_getTime(), window);
 800da54:	f001 ff32 	bl	800f8bc <os_getTime>
 800da58:	4603      	mov	r3, r0
 800da5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800da5c:	4619      	mov	r1, r3
 800da5e:	4889      	ldr	r0, [pc, #548]	@ (800dc84 <decodeFrame+0x2b8>)
 800da60:	f002 feea 	bl	8010838 <printf>
        LMIC.dataLen = 0;
 800da64:	4b83      	ldr	r3, [pc, #524]	@ (800dc74 <decodeFrame+0x2a8>)
 800da66:	2200      	movs	r2, #0
 800da68:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
        return 0;
 800da6c:	2300      	movs	r3, #0
 800da6e:	e350      	b.n	800e112 <decodeFrame+0x746>
    int  fct   = d[OFF_DAT_FCT];
 800da70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da72:	3305      	adds	r3, #5
 800da74:	781b      	ldrb	r3, [r3, #0]
 800da76:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint32_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 800da78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da7a:	3301      	adds	r3, #1
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7fe fdf3 	bl	800c668 <os_rlsbf4>
 800da82:	6378      	str	r0, [r7, #52]	@ 0x34
    uint32_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 800da84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da86:	3306      	adds	r3, #6
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fe fdd8 	bl	800c63e <os_rlsbf2>
 800da8e:	4603      	mov	r3, r0
 800da90:	633b      	str	r3, [r7, #48]	@ 0x30
    int  olen  = fct & FCT_OPTLEN;
 800da92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da94:	f003 030f 	and.w	r3, r3, #15
 800da98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 800da9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da9c:	115b      	asrs	r3, r3, #5
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    int  poff  = OFF_DAT_OPTS+olen;
 800daa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa6:	3308      	adds	r3, #8
 800daa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 800daaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daac:	3b04      	subs	r3, #4
 800daae:	627b      	str	r3, [r7, #36]	@ 0x24
    if( addr != LMIC.devaddr ) {
 800dab0:	4b70      	ldr	r3, [pc, #448]	@ (800dc74 <decodeFrame+0x2a8>)
 800dab2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800dab6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dab8:	429a      	cmp	r2, r3
 800daba:	d1c2      	bne.n	800da42 <decodeFrame+0x76>
    if( poff > pend ) {
 800dabc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800dabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac0:	429a      	cmp	r2, r3
 800dac2:	dcc0      	bgt.n	800da46 <decodeFrame+0x7a>
    int port = -1;
 800dac4:	f04f 33ff 	mov.w	r3, #4294967295
 800dac8:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 800daca:	2300      	movs	r3, #0
 800dacc:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 800dace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dad0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dad2:	429a      	cmp	r2, r3
 800dad4:	dd07      	ble.n	800dae6 <decodeFrame+0x11a>
        port = d[poff++];
 800dad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800dad8:	1c5a      	adds	r2, r3, #1
 800dada:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800dadc:	461a      	mov	r2, r3
 800dade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dae0:	4413      	add	r3, r2
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (uint16_t)(seqno - LMIC.seqnoDn);
 800dae6:	4b63      	ldr	r3, [pc, #396]	@ (800dc74 <decodeFrame+0x2a8>)
 800dae8:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800daec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daee:	b291      	uxth	r1, r2
 800daf0:	4a60      	ldr	r2, [pc, #384]	@ (800dc74 <decodeFrame+0x2a8>)
 800daf2:	f8d2 211c 	ldr.w	r2, [r2, #284]	@ 0x11c
 800daf6:	b292      	uxth	r2, r2
 800daf8:	1a8a      	subs	r2, r1, r2
 800dafa:	b292      	uxth	r2, r2
 800dafc:	4413      	add	r3, r2
 800dafe:	633b      	str	r3, [r7, #48]	@ 0x30
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 800db00:	4b5c      	ldr	r3, [pc, #368]	@ (800dc74 <decodeFrame+0x2a8>)
 800db02:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 800db06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	2301      	movs	r3, #1
 800db10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db12:	485d      	ldr	r0, [pc, #372]	@ (800dc88 <decodeFrame+0x2bc>)
 800db14:	f7fe feb4 	bl	800c880 <aes_verifyMic>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d095      	beq.n	800da4a <decodeFrame+0x7e>
    if( seqno < LMIC.seqnoDn ) {
 800db1e:	4b55      	ldr	r3, [pc, #340]	@ (800dc74 <decodeFrame+0x2a8>)
 800db20:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800db24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db26:	429a      	cmp	r2, r3
 800db28:	d21a      	bcs.n	800db60 <decodeFrame+0x194>
        if( (int32_t)seqno > (int32_t)LMIC.seqnoDn ) {
 800db2a:	4b52      	ldr	r3, [pc, #328]	@ (800dc74 <decodeFrame+0x2a8>)
 800db2c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800db30:	461a      	mov	r2, r3
 800db32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db34:	429a      	cmp	r2, r3
 800db36:	db8a      	blt.n	800da4e <decodeFrame+0x82>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 800db38:	4b4e      	ldr	r3, [pc, #312]	@ (800dc74 <decodeFrame+0x2a8>)
 800db3a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800db3e:	3b01      	subs	r3, #1
 800db40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db42:	429a      	cmp	r2, r3
 800db44:	d185      	bne.n	800da52 <decodeFrame+0x86>
 800db46:	4b4b      	ldr	r3, [pc, #300]	@ (800dc74 <decodeFrame+0x2a8>)
 800db48:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d080      	beq.n	800da52 <decodeFrame+0x86>
 800db50:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800db54:	2ba0      	cmp	r3, #160	@ 0xa0
 800db56:	f47f af7c 	bne.w	800da52 <decodeFrame+0x86>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 800db5a:	2301      	movs	r3, #1
 800db5c:	657b      	str	r3, [r7, #84]	@ 0x54
 800db5e:	e00e      	b.n	800db7e <decodeFrame+0x1b2>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn,
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 800db60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db62:	3301      	adds	r3, #1
 800db64:	4a43      	ldr	r2, [pc, #268]	@ (800dc74 <decodeFrame+0x2a8>)
 800db66:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 800db6a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800db6e:	2ba0      	cmp	r3, #160	@ 0xa0
 800db70:	d101      	bne.n	800db76 <decodeFrame+0x1aa>
 800db72:	2220      	movs	r2, #32
 800db74:	e000      	b.n	800db78 <decodeFrame+0x1ac>
 800db76:	2200      	movs	r2, #0
 800db78:	4b3e      	ldr	r3, [pc, #248]	@ (800dc74 <decodeFrame+0x2a8>)
 800db7a:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 800db7e:	4b3d      	ldr	r3, [pc, #244]	@ (800dc74 <decodeFrame+0x2a8>)
 800db80:	f893 3124 	ldrb.w	r3, [r3, #292]	@ 0x124
 800db84:	2b00      	cmp	r3, #0
 800db86:	d104      	bne.n	800db92 <decodeFrame+0x1c6>
 800db88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8a:	f003 0310 	and.w	r3, r3, #16
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d008      	beq.n	800dba4 <decodeFrame+0x1d8>
        LMIC.opmode |= OP_POLL;
 800db92:	4b38      	ldr	r3, [pc, #224]	@ (800dc74 <decodeFrame+0x2a8>)
 800db94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800db98:	f043 0310 	orr.w	r3, r3, #16
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	4b35      	ldr	r3, [pc, #212]	@ (800dc74 <decodeFrame+0x2a8>)
 800dba0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 800dba4:	4b33      	ldr	r3, [pc, #204]	@ (800dc74 <decodeFrame+0x2a8>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 800dbac:	4b31      	ldr	r3, [pc, #196]	@ (800dc74 <decodeFrame+0x2a8>)
 800dbae:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800dbb2:	4b30      	ldr	r3, [pc, #192]	@ (800dc74 <decodeFrame+0x2a8>)
 800dbb4:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 800dbb8:	4b2e      	ldr	r3, [pc, #184]	@ (800dc74 <decodeFrame+0x2a8>)
 800dbba:	f993 3125 	ldrsb.w	r3, [r3, #293]	@ 0x125
 800dbbe:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800dbc2:	d003      	beq.n	800dbcc <decodeFrame+0x200>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 800dbc4:	4b2b      	ldr	r3, [pc, #172]	@ (800dc74 <decodeFrame+0x2a8>)
 800dbc6:	22f4      	movs	r2, #244	@ 0xf4
 800dbc8:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 800dbcc:	4b29      	ldr	r3, [pc, #164]	@ (800dc74 <decodeFrame+0x2a8>)
 800dbce:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800dbd2:	f1a3 0640 	sub.w	r6, r3, #64	@ 0x40
 800dbd6:	4b27      	ldr	r3, [pc, #156]	@ (800dc74 <decodeFrame+0x2a8>)
 800dbd8:	89db      	ldrh	r3, [r3, #14]
 800dbda:	4618      	mov	r0, r3
 800dbdc:	f7fe ff7a 	bl	800cad4 <getSensitivity>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	1af3      	subs	r3, r6, r3
 800dbe4:	623b      	str	r3, [r7, #32]
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	db05      	blt.n	800dbf8 <decodeFrame+0x22c>
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	2bfe      	cmp	r3, #254	@ 0xfe
 800dbf0:	bfa8      	it	ge
 800dbf2:	23fe      	movge	r3, #254	@ 0xfe
 800dbf4:	b2db      	uxtb	r3, r3
 800dbf6:	e000      	b.n	800dbfa <decodeFrame+0x22e>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4a1e      	ldr	r2, [pc, #120]	@ (800dc74 <decodeFrame+0x2a8>)
 800dbfc:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128

    uint8_t *opts = &d[OFF_DAT_OPTS];
 800dc00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc02:	3308      	adds	r3, #8
 800dc04:	61fb      	str	r3, [r7, #28]
    int oidx = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 800dc0a:	e20a      	b.n	800e022 <decodeFrame+0x656>
        switch( opts[oidx] ) {
 800dc0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc0e:	69fa      	ldr	r2, [r7, #28]
 800dc10:	4413      	add	r3, r2
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	3b02      	subs	r3, #2
 800dc16:	2b10      	cmp	r3, #16
 800dc18:	f200 8209 	bhi.w	800e02e <decodeFrame+0x662>
 800dc1c:	a201      	add	r2, pc, #4	@ (adr r2, 800dc24 <decodeFrame+0x258>)
 800dc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc22:	bf00      	nop
 800dc24:	0800dc69 	.word	0x0800dc69
 800dc28:	0800dc8d 	.word	0x0800dc8d
 800dc2c:	0800de07 	.word	0x0800de07
 800dc30:	0800dd85 	.word	0x0800dd85
 800dc34:	0800dd75 	.word	0x0800dd75
 800dc38:	0800de55 	.word	0x0800de55
 800dc3c:	0800e02f 	.word	0x0800e02f
 800dc40:	0800e02f 	.word	0x0800e02f
 800dc44:	0800e02f 	.word	0x0800e02f
 800dc48:	0800e02f 	.word	0x0800e02f
 800dc4c:	0800e02f 	.word	0x0800e02f
 800dc50:	0800e02f 	.word	0x0800e02f
 800dc54:	0800e02f 	.word	0x0800e02f
 800dc58:	0800e02f 	.word	0x0800e02f
 800dc5c:	0800e02f 	.word	0x0800e02f
 800dc60:	0800dee1 	.word	0x0800dee1
 800dc64:	0800df2d 	.word	0x0800df2d
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 800dc68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc6a:	3303      	adds	r3, #3
 800dc6c:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800dc6e:	e1d8      	b.n	800e022 <decodeFrame+0x656>
 800dc70:	20000e94 	.word	0x20000e94
 800dc74:	20000d48 	.word	0x20000d48
 800dc78:	08013f4c 	.word	0x08013f4c
 800dc7c:	08013f50 	.word	0x08013f50
 800dc80:	08013f58 	.word	0x08013f58
 800dc84:	08013f5c 	.word	0x08013f5c
 800dc88:	20000e3e 	.word	0x20000e3e
        }
        case MCMD_LADR_REQ: {
            uint8_t p1     = opts[oidx+1];            // txpow + DR
 800dc8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc8e:	3301      	adds	r3, #1
 800dc90:	69fa      	ldr	r2, [r7, #28]
 800dc92:	4413      	add	r3, r2
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	71bb      	strb	r3, [r7, #6]
            uint16_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 800dc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc9a:	3302      	adds	r3, #2
 800dc9c:	69fa      	ldr	r2, [r7, #28]
 800dc9e:	4413      	add	r3, r2
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fe fccc 	bl	800c63e <os_rlsbf2>
 800dca6:	4603      	mov	r3, r0
 800dca8:	80bb      	strh	r3, [r7, #4]
            uint8_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 800dcaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcac:	3304      	adds	r3, #4
 800dcae:	69fa      	ldr	r2, [r7, #28]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	f023 030f 	bic.w	r3, r3, #15
 800dcb8:	70fb      	strb	r3, [r7, #3]
            uint8_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 800dcba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcbc:	3304      	adds	r3, #4
 800dcbe:	69fa      	ldr	r2, [r7, #28]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	f003 030f 	and.w	r3, r3, #15
 800dcc8:	70bb      	strb	r3, [r7, #2]
            oidx += 5;
 800dcca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dccc:	3305      	adds	r3, #5
 800dcce:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 800dcd0:	4b94      	ldr	r3, [pc, #592]	@ (800df24 <decodeFrame+0x558>)
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 800dcd8:	88ba      	ldrh	r2, [r7, #4]
 800dcda:	78fb      	ldrb	r3, [r7, #3]
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7ff fb5e 	bl	800d3a0 <mapChannels>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d10c      	bne.n	800dd04 <decodeFrame+0x338>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 800dcea:	4b8e      	ldr	r3, [pc, #568]	@ (800df24 <decodeFrame+0x558>)
 800dcec:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 800dcf0:	f023 0301 	bic.w	r3, r3, #1
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	bf14      	ite	ne
 800dcf8:	2301      	movne	r3, #1
 800dcfa:	2300      	moveq	r3, #0
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	4b89      	ldr	r3, [pc, #548]	@ (800df24 <decodeFrame+0x558>)
 800dd00:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 800dd04:	79bb      	ldrb	r3, [r7, #6]
 800dd06:	091b      	lsrs	r3, r3, #4
 800dd08:	707b      	strb	r3, [r7, #1]
            if( !validDR(dr) ) {
 800dd0a:	787b      	ldrb	r3, [r7, #1]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fe fc65 	bl	800c5dc <validDR>
 800dd12:	4603      	mov	r3, r0
 800dd14:	f083 0301 	eor.w	r3, r3, #1
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00c      	beq.n	800dd38 <decodeFrame+0x36c>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 800dd1e:	4b81      	ldr	r3, [pc, #516]	@ (800df24 <decodeFrame+0x558>)
 800dd20:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 800dd24:	f023 0302 	bic.w	r3, r3, #2
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	bf14      	ite	ne
 800dd2c:	2301      	movne	r3, #1
 800dd2e:	2300      	moveq	r3, #0
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	4b7c      	ldr	r3, [pc, #496]	@ (800df24 <decodeFrame+0x558>)
 800dd34:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 800dd38:	4b7a      	ldr	r3, [pc, #488]	@ (800df24 <decodeFrame+0x558>)
 800dd3a:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 800dd3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd42:	2b07      	cmp	r3, #7
 800dd44:	d111      	bne.n	800dd6a <decodeFrame+0x39e>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 800dd46:	4a77      	ldr	r2, [pc, #476]	@ (800df24 <decodeFrame+0x558>)
 800dd48:	78bb      	ldrb	r3, [r7, #2]
 800dd4a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 800dd4e:	79bb      	ldrb	r3, [r7, #6]
 800dd50:	f003 030f 	and.w	r3, r3, #15
 800dd54:	4619      	mov	r1, r3
 800dd56:	4874      	ldr	r0, [pc, #464]	@ (800df28 <decodeFrame+0x55c>)
 800dd58:	f7fd fd7e 	bl	800b858 <table_get_s1>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	461a      	mov	r2, r3
 800dd60:	787b      	ldrb	r3, [r7, #1]
 800dd62:	4619      	mov	r1, r3
 800dd64:	2004      	movs	r0, #4
 800dd66:	f7ff f9c7 	bl	800d0f8 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 800dd6a:	4b6e      	ldr	r3, [pc, #440]	@ (800df24 <decodeFrame+0x558>)
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            continue;
 800dd72:	e156      	b.n	800e022 <decodeFrame+0x656>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 800dd74:	4b6b      	ldr	r3, [pc, #428]	@ (800df24 <decodeFrame+0x558>)
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 1;
 800dd7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd7e:	3301      	adds	r3, #1
 800dd80:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800dd82:	e14e      	b.n	800e022 <decodeFrame+0x656>
        }
        case MCMD_DN2P_SET: {
#if !defined(LMIC_DISABLE_MCMD_DN2P_SET)
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 800dd84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd86:	3301      	adds	r3, #1
 800dd88:	69fa      	ldr	r2, [r7, #28]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	f003 030f 	and.w	r3, r3, #15
 800dd92:	73bb      	strb	r3, [r7, #14]
            uint32_t freq = convFreq(&opts[oidx+2]);
 800dd94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd96:	3302      	adds	r3, #2
 800dd98:	69fa      	ldr	r2, [r7, #28]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff fadd 	bl	800d35c <convFreq>
 800dda2:	60b8      	str	r0, [r7, #8]
            LMIC.dn2Ans = 0x80;   // answer pending
 800dda4:	4b5f      	ldr	r3, [pc, #380]	@ (800df24 <decodeFrame+0x558>)
 800dda6:	2280      	movs	r2, #128	@ 0x80
 800dda8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            if( validDR(dr) )
 800ddac:	7bbb      	ldrb	r3, [r7, #14]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fc14 	bl	800c5dc <validDR>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d008      	beq.n	800ddcc <decodeFrame+0x400>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 800ddba:	4b5a      	ldr	r3, [pc, #360]	@ (800df24 <decodeFrame+0x558>)
 800ddbc:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800ddc0:	f043 0302 	orr.w	r3, r3, #2
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	4b57      	ldr	r3, [pc, #348]	@ (800df24 <decodeFrame+0x558>)
 800ddc8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            if( freq != 0 )
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d008      	beq.n	800dde4 <decodeFrame+0x418>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 800ddd2:	4b54      	ldr	r3, [pc, #336]	@ (800df24 <decodeFrame+0x558>)
 800ddd4:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800ddd8:	f043 0301 	orr.w	r3, r3, #1
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	4b51      	ldr	r3, [pc, #324]	@ (800df24 <decodeFrame+0x558>)
 800dde0:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 800dde4:	4b4f      	ldr	r3, [pc, #316]	@ (800df24 <decodeFrame+0x558>)
 800dde6:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800ddea:	2b83      	cmp	r3, #131	@ 0x83
 800ddec:	d107      	bne.n	800ddfe <decodeFrame+0x432>
                LMIC.dn2Dr = dr;
 800ddee:	4a4d      	ldr	r2, [pc, #308]	@ (800df24 <decodeFrame+0x558>)
 800ddf0:	7bbb      	ldrb	r3, [r7, #14]
 800ddf2:	f882 312f 	strb.w	r3, [r2, #303]	@ 0x12f
                LMIC.dn2Freq = freq;
 800ddf6:	4a4b      	ldr	r2, [pc, #300]	@ (800df24 <decodeFrame+0x558>)
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
#endif // !LMIC_DISABLE_MCMD_DN2P_SET
            oidx += 5;
 800ddfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de00:	3305      	adds	r3, #5
 800de02:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800de04:	e10d      	b.n	800e022 <decodeFrame+0x656>
        }
        case MCMD_DCAP_REQ: {
#if !defined(LMIC_DISABLE_MCMD_DCAP_REQ)
            uint8_t cap = opts[oidx+1];
 800de06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de08:	3301      	adds	r3, #1
 800de0a:	69fa      	ldr	r2, [r7, #28]
 800de0c:	4413      	add	r3, r2
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	71fb      	strb	r3, [r7, #7]
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 800de12:	79fb      	ldrb	r3, [r7, #7]
 800de14:	2bff      	cmp	r3, #255	@ 0xff
 800de16:	d108      	bne.n	800de2a <decodeFrame+0x45e>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 800de18:	4b42      	ldr	r3, [pc, #264]	@ (800df24 <decodeFrame+0x558>)
 800de1a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800de1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de22:	b29a      	uxth	r2, r3
 800de24:	4b3f      	ldr	r3, [pc, #252]	@ (800df24 <decodeFrame+0x558>)
 800de26:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 800de2a:	79fb      	ldrb	r3, [r7, #7]
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	b2da      	uxtb	r2, r3
 800de32:	4b3c      	ldr	r3, [pc, #240]	@ (800df24 <decodeFrame+0x558>)
 800de34:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 800de38:	f001 fd40 	bl	800f8bc <os_getTime>
 800de3c:	4603      	mov	r3, r0
 800de3e:	4a39      	ldr	r2, [pc, #228]	@ (800df24 <decodeFrame+0x558>)
 800de40:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 800de44:	4b37      	ldr	r3, [pc, #220]	@ (800df24 <decodeFrame+0x558>)
 800de46:	2201      	movs	r2, #1
 800de48:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
            oidx += 2;
 800de4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de4e:	3302      	adds	r3, #2
 800de50:	653b      	str	r3, [r7, #80]	@ 0x50
#endif // !LMIC_DISABLE_MCMD_DCAP_REQ
            continue;
 800de52:	e0e6      	b.n	800e022 <decodeFrame+0x656>
        }
        case MCMD_SNCH_REQ: {
#if !defined(LMIC_DISABLE_MCMD_SNCH_REQ)
            uint8_t chidx = opts[oidx+1];  // channel
 800de54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de56:	3301      	adds	r3, #1
 800de58:	69fa      	ldr	r2, [r7, #28]
 800de5a:	4413      	add	r3, r2
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	75fb      	strb	r3, [r7, #23]
            uint32_t freq  = convFreq(&opts[oidx+2]); // freq
 800de60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de62:	3302      	adds	r3, #2
 800de64:	69fa      	ldr	r2, [r7, #28]
 800de66:	4413      	add	r3, r2
 800de68:	4618      	mov	r0, r3
 800de6a:	f7ff fa77 	bl	800d35c <convFreq>
 800de6e:	6138      	str	r0, [r7, #16]
            uint8_t drs   = opts[oidx+5];  // datarate span
 800de70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de72:	3305      	adds	r3, #5
 800de74:	69fa      	ldr	r2, [r7, #28]
 800de76:	4413      	add	r3, r2
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	73fb      	strb	r3, [r7, #15]
            LMIC.snchAns = 0x80;
 800de7c:	4b29      	ldr	r3, [pc, #164]	@ (800df24 <decodeFrame+0x558>)
 800de7e:	2280      	movs	r2, #128	@ 0x80
 800de80:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d026      	beq.n	800ded8 <decodeFrame+0x50c>
 800de8a:	7bfb      	ldrb	r3, [r7, #15]
 800de8c:	f003 030f 	and.w	r3, r3, #15
 800de90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800de94:	fa02 f303 	lsl.w	r3, r2, r3
 800de98:	b21a      	sxth	r2, r3
 800de9a:	7bfb      	ldrb	r3, [r7, #15]
 800de9c:	091b      	lsrs	r3, r3, #4
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	f1c3 030f 	rsb	r3, r3, #15
 800dea4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800dea8:	fa41 f303 	asr.w	r3, r1, r3
 800deac:	b21b      	sxth	r3, r3
 800deae:	4013      	ands	r3, r2
 800deb0:	b21b      	sxth	r3, r3
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	7df8      	ldrb	r0, [r7, #23]
 800deb6:	f04f 33ff 	mov.w	r3, #4294967295
 800deba:	6939      	ldr	r1, [r7, #16]
 800debc:	f7ff f9d4 	bl	800d268 <LMIC_setupChannel>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d008      	beq.n	800ded8 <decodeFrame+0x50c>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 800dec6:	4b17      	ldr	r3, [pc, #92]	@ (800df24 <decodeFrame+0x558>)
 800dec8:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800decc:	f043 0303 	orr.w	r3, r3, #3
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	4b14      	ldr	r3, [pc, #80]	@ (800df24 <decodeFrame+0x558>)
 800ded4:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif // !LMIC_DISABLE_MCMD_SNCH_REQ
            oidx += 6;
 800ded8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deda:	3306      	adds	r3, #6
 800dedc:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800dede:	e0a0      	b.n	800e022 <decodeFrame+0x656>
        }
        case MCMD_PING_SET: {
#if !defined(LMIC_DISABLE_MCMD_PING_SET) && !defined(LMIC_DISABLE_PING)
            uint32_t freq = convFreq(&opts[oidx+1]);
 800dee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dee2:	3301      	adds	r3, #1
 800dee4:	69fa      	ldr	r2, [r7, #28]
 800dee6:	4413      	add	r3, r2
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff fa37 	bl	800d35c <convFreq>
 800deee:	61b8      	str	r0, [r7, #24]
            uint8_t flags = 0x80;
 800def0:	2380      	movs	r3, #128	@ 0x80
 800def2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 800def6:	69bb      	ldr	r3, [r7, #24]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d009      	beq.n	800df10 <decodeFrame+0x544>
                flags |= MCMD_PING_ANS_FQACK;
 800defc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800df00:	f043 0301 	orr.w	r3, r3, #1
 800df04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 800df08:	4a06      	ldr	r2, [pc, #24]	@ (800df24 <decodeFrame+0x558>)
 800df0a:	69bb      	ldr	r3, [r7, #24]
 800df0c:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 800df10:	4a04      	ldr	r2, [pc, #16]	@ (800df24 <decodeFrame+0x558>)
 800df12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800df16:	f882 3137 	strb.w	r3, [r2, #311]	@ 0x137
#endif // !LMIC_DISABLE_MCMD_PING_SET && !LMIC_DISABLE_PING
            oidx += 4;
 800df1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df1c:	3304      	adds	r3, #4
 800df1e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800df20:	e07f      	b.n	800e022 <decodeFrame+0x656>
 800df22:	bf00      	nop
 800df24:	20000d48 	.word	0x20000d48
 800df28:	08015af4 	.word	0x08015af4
        }
        case MCMD_BCNI_ANS: {
#if !defined(LMIC_DISABLE_MCMD_BCNI_ANS) && !defined(LMIC_DISABLE_BEACONS)
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 800df2c:	4b7b      	ldr	r3, [pc, #492]	@ (800e11c <decodeFrame+0x750>)
 800df2e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800df32:	f003 0302 	and.w	r3, r3, #2
 800df36:	2b00      	cmp	r3, #0
 800df38:	d16f      	bne.n	800e01a <decodeFrame+0x64e>
                LMIC.bcnChnl = opts[oidx+3];
 800df3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df3c:	3303      	adds	r3, #3
 800df3e:	69fa      	ldr	r2, [r7, #28]
 800df40:	4413      	add	r3, r2
 800df42:	781a      	ldrb	r2, [r3, #0]
 800df44:	4b75      	ldr	r3, [pc, #468]	@ (800e11c <decodeFrame+0x750>)
 800df46:	f883 218c 	strb.w	r2, [r3, #396]	@ 0x18c
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 800df4a:	4b74      	ldr	r3, [pc, #464]	@ (800e11c <decodeFrame+0x750>)
 800df4c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800df50:	f043 0302 	orr.w	r3, r3, #2
 800df54:	b29a      	uxth	r2, r3
 800df56:	4b71      	ldr	r3, [pc, #452]	@ (800e11c <decodeFrame+0x750>)
 800df58:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 800df5c:	4b6f      	ldr	r3, [pc, #444]	@ (800e11c <decodeFrame+0x750>)
 800df5e:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800df62:	2b00      	cmp	r3, #0
 800df64:	d104      	bne.n	800df70 <decodeFrame+0x5a4>
 800df66:	f240 41f9 	movw	r1, #1273	@ 0x4f9
 800df6a:	486d      	ldr	r0, [pc, #436]	@ (800e120 <decodeFrame+0x754>)
 800df6c:	f002 ff24 	bl	8010db8 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 800df70:	4b6a      	ldr	r3, [pc, #424]	@ (800e11c <decodeFrame+0x750>)
 800df72:	685e      	ldr	r6, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 800df74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df76:	3301      	adds	r3, #1
 800df78:	69fa      	ldr	r2, [r7, #28]
 800df7a:	4413      	add	r3, r2
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe fb5e 	bl	800c63e <os_rlsbf2>
 800df82:	4603      	mov	r3, r0
 800df84:	461a      	mov	r2, r3
 800df86:	4613      	mov	r3, r2
 800df88:	011b      	lsls	r3, r3, #4
 800df8a:	1a9b      	subs	r3, r3, r2
 800df8c:	005b      	lsls	r3, r3, #1
 800df8e:	17da      	asrs	r2, r3, #31
 800df90:	4698      	mov	r8, r3
 800df92:	4691      	mov	r9, r2
 800df94:	4642      	mov	r2, r8
 800df96:	464b      	mov	r3, r9
 800df98:	f04f 0000 	mov.w	r0, #0
 800df9c:	f04f 0100 	mov.w	r1, #0
 800dfa0:	0159      	lsls	r1, r3, #5
 800dfa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dfa6:	0150      	lsls	r0, r2, #5
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	ebb2 0408 	subs.w	r4, r2, r8
 800dfb0:	eb63 0509 	sbc.w	r5, r3, r9
 800dfb4:	f04f 0200 	mov.w	r2, #0
 800dfb8:	f04f 0300 	mov.w	r3, #0
 800dfbc:	00ab      	lsls	r3, r5, #2
 800dfbe:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800dfc2:	00a2      	lsls	r2, r4, #2
 800dfc4:	4614      	mov	r4, r2
 800dfc6:	461d      	mov	r5, r3
 800dfc8:	eb14 0a08 	adds.w	sl, r4, r8
 800dfcc:	eb45 0b09 	adc.w	fp, r5, r9
 800dfd0:	f04f 0200 	mov.w	r2, #0
 800dfd4:	f04f 0300 	mov.w	r3, #0
 800dfd8:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800dfdc:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800dfe0:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800dfe4:	4692      	mov	sl, r2
 800dfe6:	469b      	mov	fp, r3
 800dfe8:	4650      	mov	r0, sl
 800dfea:	4659      	mov	r1, fp
 800dfec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dff0:	f04f 0300 	mov.w	r3, #0
 800dff4:	f7f2 fe50 	bl	8000c98 <__aeabi_uldivmod>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	4613      	mov	r3, r2
 800dffe:	18f2      	adds	r2, r6, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 800e000:	4b48      	ldr	r3, [pc, #288]	@ (800e124 <decodeFrame+0x758>)
 800e002:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 800e004:	4a45      	ldr	r2, [pc, #276]	@ (800e11c <decodeFrame+0x750>)
 800e006:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 800e00a:	4b44      	ldr	r3, [pc, #272]	@ (800e11c <decodeFrame+0x750>)
 800e00c:	2200      	movs	r2, #0
 800e00e:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms
 800e012:	2101      	movs	r1, #1
 800e014:	201e      	movs	r0, #30
 800e016:	f7fe fe6f 	bl	800ccf8 <calcBcnRxWindowFromMillis>
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
#endif // !LMIC_DISABLE_MCMD_BCNI_ANS && !LMIC_DISABLE_BEACONS
            oidx += 4;
 800e01a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e01c:	3304      	adds	r3, #4
 800e01e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800e020:	bf00      	nop
    while( oidx < olen ) {
 800e022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e026:	429a      	cmp	r2, r3
 800e028:	f6ff adf0 	blt.w	800dc0c <decodeFrame+0x240>
 800e02c:	e000      	b.n	800e030 <decodeFrame+0x664>
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 800e02e:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 800e030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e032:	2b00      	cmp	r3, #0
 800e034:	d11d      	bne.n	800e072 <decodeFrame+0x6a6>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 800e036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e038:	2b00      	cmp	r3, #0
 800e03a:	db1a      	blt.n	800e072 <decodeFrame+0x6a6>
 800e03c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e03e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e040:	1ad3      	subs	r3, r2, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	dd15      	ble.n	800e072 <decodeFrame+0x6a6>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 800e046:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e048:	2b00      	cmp	r3, #0
 800e04a:	dc01      	bgt.n	800e050 <decodeFrame+0x684>
 800e04c:	4836      	ldr	r0, [pc, #216]	@ (800e128 <decodeFrame+0x75c>)
 800e04e:	e000      	b.n	800e052 <decodeFrame+0x686>
 800e050:	4836      	ldr	r0, [pc, #216]	@ (800e12c <decodeFrame+0x760>)
 800e052:	4b32      	ldr	r3, [pc, #200]	@ (800e11c <decodeFrame+0x750>)
 800e054:	f8d3 4118 	ldr.w	r4, [r3, #280]	@ 0x118
 800e058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e05a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e05c:	4413      	add	r3, r2
 800e05e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e060:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e062:	1a8a      	subs	r2, r1, r2
 800e064:	9201      	str	r2, [sp, #4]
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	2301      	movs	r3, #1
 800e06a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e06c:	4621      	mov	r1, r4
 800e06e:	f7fe fcb1 	bl	800c9d4 <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 800e072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e074:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 800e076:	4b29      	ldr	r3, [pc, #164]	@ (800e11c <decodeFrame+0x750>)
 800e078:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d010      	beq.n	800e0a2 <decodeFrame+0x6d6>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 800e080:	4b26      	ldr	r3, [pc, #152]	@ (800e11c <decodeFrame+0x750>)
 800e082:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800e086:	b25b      	sxtb	r3, r3
 800e088:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e08a:	2a00      	cmp	r2, #0
 800e08c:	d002      	beq.n	800e094 <decodeFrame+0x6c8>
 800e08e:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800e092:	e000      	b.n	800e096 <decodeFrame+0x6ca>
 800e094:	2240      	movs	r2, #64	@ 0x40
 800e096:	4313      	orrs	r3, r2
 800e098:	b25b      	sxtb	r3, r3
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	4b1f      	ldr	r3, [pc, #124]	@ (800e11c <decodeFrame+0x750>)
 800e09e:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149

    if( port < 0 ) {
 800e0a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	da12      	bge.n	800e0ce <decodeFrame+0x702>
        LMIC.txrxFlags |= TXRX_NOPORT;
 800e0a8:	4b1c      	ldr	r3, [pc, #112]	@ (800e11c <decodeFrame+0x750>)
 800e0aa:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800e0ae:	f043 0320 	orr.w	r3, r3, #32
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	4b19      	ldr	r3, [pc, #100]	@ (800e11c <decodeFrame+0x750>)
 800e0b6:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
        LMIC.dataBeg = poff;
 800e0ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	4b17      	ldr	r3, [pc, #92]	@ (800e11c <decodeFrame+0x750>)
 800e0c0:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        LMIC.dataLen = 0;
 800e0c4:	4b15      	ldr	r3, [pc, #84]	@ (800e11c <decodeFrame+0x750>)
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 800e0cc:	e016      	b.n	800e0fc <decodeFrame+0x730>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 800e0ce:	4b13      	ldr	r3, [pc, #76]	@ (800e11c <decodeFrame+0x750>)
 800e0d0:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800e0d4:	f043 0310 	orr.w	r3, r3, #16
 800e0d8:	b2da      	uxtb	r2, r3
 800e0da:	4b10      	ldr	r3, [pc, #64]	@ (800e11c <decodeFrame+0x750>)
 800e0dc:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
        LMIC.dataBeg = poff;
 800e0e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800e11c <decodeFrame+0x750>)
 800e0e6:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
        LMIC.dataLen = pend-poff;
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ec:	b2da      	uxtb	r2, r3
 800e0ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e0f0:	b2db      	uxtb	r3, r3
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	4b09      	ldr	r3, [pc, #36]	@ (800e11c <decodeFrame+0x750>)
 800e0f8:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
    }
#if LMIC_DEBUG_LEVEL > 0
    lmic_printf("%lu: Received downlink, window=%s, port=%d, ack=%d\n", os_getTime(), window, port, ackup);
 800e0fc:	f001 fbde 	bl	800f8bc <os_getTime>
 800e100:	4601      	mov	r1, r0
 800e102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e108:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e10a:	4809      	ldr	r0, [pc, #36]	@ (800e130 <decodeFrame+0x764>)
 800e10c:	f002 fb94 	bl	8010838 <printf>
#endif
    return 1;
 800e110:	2301      	movs	r3, #1
}
 800e112:	4618      	mov	r0, r3
 800e114:	3764      	adds	r7, #100	@ 0x64
 800e116:	46bd      	mov	sp, r7
 800e118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e11c:	20000d48 	.word	0x20000d48
 800e120:	08013f3c 	.word	0x08013f3c
 800e124:	ffc181e0 	.word	0xffc181e0
 800e128:	20000e3e 	.word	0x20000e3e
 800e12c:	20000e4e 	.word	0x20000e4e
 800e130:	08013f80 	.word	0x08013f80

0800e134 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 800e134:	b580      	push	{r7, lr}
 800e136:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 800e138:	4b0d      	ldr	r3, [pc, #52]	@ (800e170 <setupRx2+0x3c>)
 800e13a:	2202      	movs	r2, #2
 800e13c:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 800e140:	4b0b      	ldr	r3, [pc, #44]	@ (800e170 <setupRx2+0x3c>)
 800e142:	f893 312f 	ldrb.w	r3, [r3, #303]	@ 0x12f
 800e146:	4618      	mov	r0, r3
 800e148:	f7fe fa1c 	bl	800c584 <dndr2rps>
 800e14c:	4603      	mov	r3, r0
 800e14e:	461a      	mov	r2, r3
 800e150:	4b07      	ldr	r3, [pc, #28]	@ (800e170 <setupRx2+0x3c>)
 800e152:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 800e154:	4b06      	ldr	r3, [pc, #24]	@ (800e170 <setupRx2+0x3c>)
 800e156:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800e15a:	4a05      	ldr	r2, [pc, #20]	@ (800e170 <setupRx2+0x3c>)
 800e15c:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 800e15e:	4b04      	ldr	r3, [pc, #16]	@ (800e170 <setupRx2+0x3c>)
 800e160:	2200      	movs	r2, #0
 800e162:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
    os_radio(RADIO_RX);
 800e166:	2002      	movs	r0, #2
 800e168:	f002 fb3a 	bl	80107e0 <os_radio>
}
 800e16c:	bf00      	nop
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	20000d48 	.word	0x20000d48

0800e174 <schedRx12>:


static void schedRx12 (ostime_t delay, osjobcb_t func, uint8_t dr) {
 800e174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e178:	b088      	sub	sp, #32
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6178      	str	r0, [r7, #20]
 800e17e:	6139      	str	r1, [r7, #16]
 800e180:	4613      	mov	r3, r2
 800e182:	73fb      	strb	r3, [r7, #15]
    ostime_t hsym = dr2hsym(dr);
 800e184:	7bfb      	ldrb	r3, [r7, #15]
 800e186:	4619      	mov	r1, r3
 800e188:	4837      	ldr	r0, [pc, #220]	@ (800e268 <schedRx12+0xf4>)
 800e18a:	f7fd fb95 	bl	800b8b8 <table_get_ostime>
 800e18e:	61f8      	str	r0, [r7, #28]

    LMIC.rxsyms = MINRX_SYMS;
 800e190:	4b36      	ldr	r3, [pc, #216]	@ (800e26c <schedRx12+0xf8>)
 800e192:	2205      	movs	r2, #5
 800e194:	741a      	strb	r2, [r3, #16]

    // If a clock error is specified, compensate for it by extending the
    // receive window
    if (LMIC.clockError != 0) {
 800e196:	4b35      	ldr	r3, [pc, #212]	@ (800e26c <schedRx12+0xf8>)
 800e198:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d046      	beq.n	800e22e <schedRx12+0xba>
        // Calculate how much the clock will drift maximally after delay has
        // passed. This indicates the amount of time we can be early
        // _or_ late.
        ostime_t drift = (int64_t)delay * LMIC.clockError / MAX_CLOCK_ERROR;
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	469a      	mov	sl, r3
 800e1a6:	4693      	mov	fp, r2
 800e1a8:	4b30      	ldr	r3, [pc, #192]	@ (800e26c <schedRx12+0xf8>)
 800e1aa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 800e1ae:	b29b      	uxth	r3, r3
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	4698      	mov	r8, r3
 800e1b4:	4691      	mov	r9, r2
 800e1b6:	fb08 f20b 	mul.w	r2, r8, fp
 800e1ba:	fb0a f309 	mul.w	r3, sl, r9
 800e1be:	4413      	add	r3, r2
 800e1c0:	fbaa 4508 	umull	r4, r5, sl, r8
 800e1c4:	442b      	add	r3, r5
 800e1c6:	461d      	mov	r5, r3
 800e1c8:	4622      	mov	r2, r4
 800e1ca:	462b      	mov	r3, r5
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	da08      	bge.n	800e1e2 <schedRx12+0x6e>
 800e1d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e1d4:	1851      	adds	r1, r2, r1
 800e1d6:	6039      	str	r1, [r7, #0]
 800e1d8:	f143 0300 	adc.w	r3, r3, #0
 800e1dc:	607b      	str	r3, [r7, #4]
 800e1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e1e2:	f04f 0000 	mov.w	r0, #0
 800e1e6:	f04f 0100 	mov.w	r1, #0
 800e1ea:	0c10      	lsrs	r0, r2, #16
 800e1ec:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800e1f0:	1419      	asrs	r1, r3, #16
 800e1f2:	4602      	mov	r2, r0
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	4613      	mov	r3, r2
 800e1f8:	61bb      	str	r3, [r7, #24]
        // compensate for a slow or a fast clock).
        // decrease the rxtime to compensate for. Note that hsym is a
        // *half* symbol time, so the factor 2 is hidden. First check if
        // this would overflow (which can happen if the drift is very
        // high, or the symbol time is low at high datarates).
        if ((255 - LMIC.rxsyms) * hsym < drift)
 800e1fa:	4b1c      	ldr	r3, [pc, #112]	@ (800e26c <schedRx12+0xf8>)
 800e1fc:	7c1b      	ldrb	r3, [r3, #16]
 800e1fe:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800e202:	461a      	mov	r2, r3
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	fb02 f303 	mul.w	r3, r2, r3
 800e20a:	69ba      	ldr	r2, [r7, #24]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d903      	bls.n	800e218 <schedRx12+0xa4>
            LMIC.rxsyms = 255;
 800e210:	4b16      	ldr	r3, [pc, #88]	@ (800e26c <schedRx12+0xf8>)
 800e212:	22ff      	movs	r2, #255	@ 0xff
 800e214:	741a      	strb	r2, [r3, #16]
 800e216:	e00a      	b.n	800e22e <schedRx12+0xba>
        else
            LMIC.rxsyms += drift / hsym;
 800e218:	4b14      	ldr	r3, [pc, #80]	@ (800e26c <schedRx12+0xf8>)
 800e21a:	7c1a      	ldrb	r2, [r3, #16]
 800e21c:	69b9      	ldr	r1, [r7, #24]
 800e21e:	69fb      	ldr	r3, [r7, #28]
 800e220:	fbb1 f3f3 	udiv	r3, r1, r3
 800e224:	b2db      	uxtb	r3, r3
 800e226:	4413      	add	r3, r2
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b10      	ldr	r3, [pc, #64]	@ (800e26c <schedRx12+0xf8>)
 800e22c:	741a      	strb	r2, [r3, #16]

    }

    // Center the receive window on the center of the expected preamble
    // (again note that hsym is half a sumbol time, so no /2 needed)
    LMIC.rxtime = LMIC.txend + delay + PAMBL_SYMS * hsym - LMIC.rxsyms * hsym;
 800e22e:	4b0f      	ldr	r3, [pc, #60]	@ (800e26c <schedRx12+0xf8>)
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	441a      	add	r2, r3
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	441a      	add	r2, r3
 800e23c:	4b0b      	ldr	r3, [pc, #44]	@ (800e26c <schedRx12+0xf8>)
 800e23e:	7c1b      	ldrb	r3, [r3, #16]
 800e240:	4619      	mov	r1, r3
 800e242:	69fb      	ldr	r3, [r7, #28]
 800e244:	fb01 f303 	mul.w	r3, r1, r3
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	4a08      	ldr	r2, [pc, #32]	@ (800e26c <schedRx12+0xf8>)
 800e24c:	6053      	str	r3, [r2, #4]

    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 800e24e:	4b07      	ldr	r3, [pc, #28]	@ (800e26c <schedRx12+0xf8>)
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	3b40      	subs	r3, #64	@ 0x40
 800e254:	693a      	ldr	r2, [r7, #16]
 800e256:	4619      	mov	r1, r3
 800e258:	4805      	ldr	r0, [pc, #20]	@ (800e270 <schedRx12+0xfc>)
 800e25a:	f001 fbad 	bl	800f9b8 <os_setTimedCallback>
}
 800e25e:	bf00      	nop
 800e260:	3720      	adds	r7, #32
 800e262:	46bd      	mov	sp, r7
 800e264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e268:	08015b28 	.word	0x08015b28
 800e26c:	20000d48 	.word	0x20000d48
 800e270:	20000d5c 	.word	0x20000d5c

0800e274 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 800e274:	b580      	push	{r7, lr}
 800e276:	b082      	sub	sp, #8
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 800e27c:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b4 <setupRx1+0x40>)
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 800e284:	4b0b      	ldr	r3, [pc, #44]	@ (800e2b4 <setupRx1+0x40>)
 800e286:	89db      	ldrh	r3, [r3, #14]
 800e288:	2101      	movs	r1, #1
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7fe f92b 	bl	800c4e6 <setNocrc>
 800e290:	4603      	mov	r3, r0
 800e292:	461a      	mov	r2, r3
 800e294:	4b07      	ldr	r3, [pc, #28]	@ (800e2b4 <setupRx1+0x40>)
 800e296:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 800e298:	4b06      	ldr	r3, [pc, #24]	@ (800e2b4 <setupRx1+0x40>)
 800e29a:	2200      	movs	r2, #0
 800e29c:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
    LMIC.osjob.func = func;
 800e2a0:	4a04      	ldr	r2, [pc, #16]	@ (800e2b4 <setupRx1+0x40>)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 800e2a6:	2002      	movs	r0, #2
 800e2a8:	f002 fa9a 	bl	80107e0 <os_radio>
}
 800e2ac:	bf00      	nop
 800e2ae:	3708      	adds	r7, #8
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20000d48 	.word	0x20000d48

0800e2b8 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 800e2c2:	4b1c      	ldr	r3, [pc, #112]	@ (800e334 <txDone+0x7c>)
 800e2c4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	f240 6302 	movw	r3, #1538	@ 0x602
 800e2ce:	4013      	ands	r3, r2
 800e2d0:	f240 4202 	movw	r2, #1026	@ 0x402
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d10b      	bne.n	800e2f0 <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 800e2d8:	4817      	ldr	r0, [pc, #92]	@ (800e338 <txDone+0x80>)
 800e2da:	f7fe fd97 	bl	800ce0c <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 800e2de:	4b15      	ldr	r3, [pc, #84]	@ (800e334 <txDone+0x7c>)
 800e2e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e2e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	4b12      	ldr	r3, [pc, #72]	@ (800e334 <txDone+0x7c>)
 800e2ec:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(LMIC_EU868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 800e2f0:	4b10      	ldr	r3, [pc, #64]	@ (800e334 <txDone+0x7c>)
 800e2f2:	7c1b      	ldrb	r3, [r3, #16]
 800e2f4:	2b07      	cmp	r3, #7
 800e2f6:	d112      	bne.n	800e31e <txDone+0x66>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 800e2f8:	4b0e      	ldr	r3, [pc, #56]	@ (800e334 <txDone+0x7c>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4413      	add	r3, r2
 800e300:	3b05      	subs	r3, #5
 800e302:	4a0c      	ldr	r2, [pc, #48]	@ (800e334 <txDone+0x7c>)
 800e304:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 800e306:	4b0b      	ldr	r3, [pc, #44]	@ (800e334 <txDone+0x7c>)
 800e308:	2208      	movs	r2, #8
 800e30a:	741a      	strb	r2, [r3, #16]
        os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 800e30c:	4b09      	ldr	r3, [pc, #36]	@ (800e334 <txDone+0x7c>)
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	3b40      	subs	r3, #64	@ 0x40
 800e312:	683a      	ldr	r2, [r7, #0]
 800e314:	4619      	mov	r1, r3
 800e316:	4809      	ldr	r0, [pc, #36]	@ (800e33c <txDone+0x84>)
 800e318:	f001 fb4e 	bl	800f9b8 <os_setTimedCallback>
    else
#endif
    {
        schedRx12(delay, func, LMIC.dndr);
    }
}
 800e31c:	e006      	b.n	800e32c <txDone+0x74>
        schedRx12(delay, func, LMIC.dndr);
 800e31e:	4b05      	ldr	r3, [pc, #20]	@ (800e334 <txDone+0x7c>)
 800e320:	7c5b      	ldrb	r3, [r3, #17]
 800e322:	461a      	mov	r2, r3
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff ff24 	bl	800e174 <schedRx12>
}
 800e32c:	bf00      	nop
 800e32e:	3708      	adds	r7, #8
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	20000d48 	.word	0x20000d48
 800e338:	20000e80 	.word	0x20000e80
 800e33c:	20000d5c 	.word	0x20000d5c

0800e340 <onJoinFailed>:

// ======================================== Join frames


#if !defined(LMIC_DISABLE_JOIN)
static void onJoinFailed (osjob_t *osjob) {
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 800e348:	2008      	movs	r0, #8
 800e34a:	f7ff fa29 	bl	800d7a0 <reportEvent>
}
 800e34e:	bf00      	nop
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
	...

0800e358 <processJoinAccept>:


static bool processJoinAccept (void) {
 800e358:	b580      	push	{r7, lr}
 800e35a:	b086      	sub	sp, #24
 800e35c:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 800e35e:	4ba0      	ldr	r3, [pc, #640]	@ (800e5e0 <processJoinAccept+0x288>)
 800e360:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800e364:	2b01      	cmp	r3, #1
 800e366:	d109      	bne.n	800e37c <processJoinAccept+0x24>
 800e368:	4b9d      	ldr	r3, [pc, #628]	@ (800e5e0 <processJoinAccept+0x288>)
 800e36a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d104      	bne.n	800e37c <processJoinAccept+0x24>
 800e372:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 800e376:	489b      	ldr	r0, [pc, #620]	@ (800e5e4 <processJoinAccept+0x28c>)
 800e378:	f002 fd1e 	bl	8010db8 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 800e37c:	4b98      	ldr	r3, [pc, #608]	@ (800e5e0 <processJoinAccept+0x288>)
 800e37e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e386:	2b00      	cmp	r3, #0
 800e388:	d104      	bne.n	800e394 <processJoinAccept+0x3c>
 800e38a:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 800e38e:	4895      	ldr	r0, [pc, #596]	@ (800e5e4 <processJoinAccept+0x28c>)
 800e390:	f002 fd12 	bl	8010db8 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 800e394:	4b92      	ldr	r3, [pc, #584]	@ (800e5e0 <processJoinAccept+0x288>)
 800e396:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d14f      	bne.n	800e43e <processJoinAccept+0xe6>
      nojoinframe:
 800e39e:	bf00      	nop
 800e3a0:	e000      	b.n	800e3a4 <processJoinAccept+0x4c>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 800e3a2:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 800e3a4:	4b8e      	ldr	r3, [pc, #568]	@ (800e5e0 <processJoinAccept+0x288>)
 800e3a6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e3aa:	f003 0304 	and.w	r3, r3, #4
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d126      	bne.n	800e400 <processJoinAccept+0xa8>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 800e3b2:	4b8b      	ldr	r3, [pc, #556]	@ (800e5e0 <processJoinAccept+0x288>)
 800e3b4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e3b8:	f003 0320 	and.w	r3, r3, #32
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d104      	bne.n	800e3ca <processJoinAccept+0x72>
 800e3c0:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
 800e3c4:	4887      	ldr	r0, [pc, #540]	@ (800e5e4 <processJoinAccept+0x28c>)
 800e3c6:	f002 fcf7 	bl	8010db8 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 800e3ca:	4b85      	ldr	r3, [pc, #532]	@ (800e5e0 <processJoinAccept+0x288>)
 800e3cc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e3d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e3d4:	b29a      	uxth	r2, r3
 800e3d6:	4b82      	ldr	r3, [pc, #520]	@ (800e5e0 <processJoinAccept+0x288>)
 800e3d8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 800e3dc:	4b80      	ldr	r3, [pc, #512]	@ (800e5e0 <processJoinAccept+0x288>)
 800e3de:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 800e3e2:	2b09      	cmp	r3, #9
 800e3e4:	d807      	bhi.n	800e3f6 <processJoinAccept+0x9e>
                LMIC.rejoinCnt++;
 800e3e6:	4b7e      	ldr	r3, [pc, #504]	@ (800e5e0 <processJoinAccept+0x288>)
 800e3e8:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	4b7b      	ldr	r3, [pc, #492]	@ (800e5e0 <processJoinAccept+0x288>)
 800e3f2:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 800e3f6:	2009      	movs	r0, #9
 800e3f8:	f7ff f9d2 	bl	800d7a0 <reportEvent>
            return 1;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e0eb      	b.n	800e5d8 <processJoinAccept+0x280>
        LMIC.opmode &= ~OP_TXRXPEND;
 800e400:	4b77      	ldr	r3, [pc, #476]	@ (800e5e0 <processJoinAccept+0x288>)
 800e402:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	4b74      	ldr	r3, [pc, #464]	@ (800e5e0 <processJoinAccept+0x288>)
 800e40e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 800e412:	f7ff f953 	bl	800d6bc <nextJoinState>
 800e416:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800e418:	f001 fa50 	bl	800f8bc <os_getTime>
 800e41c:	4602      	mov	r2, r0
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d001      	beq.n	800e430 <processJoinAccept+0xd8>
 800e42c:	4b6e      	ldr	r3, [pc, #440]	@ (800e5e8 <processJoinAccept+0x290>)
 800e42e:	e000      	b.n	800e432 <processJoinAccept+0xda>
 800e430:	4b6e      	ldr	r3, [pc, #440]	@ (800e5ec <processJoinAccept+0x294>)
 800e432:	461a      	mov	r2, r3
 800e434:	486e      	ldr	r0, [pc, #440]	@ (800e5f0 <processJoinAccept+0x298>)
 800e436:	f001 fabf 	bl	800f9b8 <os_setTimedCallback>
        return 1;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e0cc      	b.n	800e5d8 <processJoinAccept+0x280>
    uint8_t hdr  = LMIC.frame[0];
 800e43e:	4b68      	ldr	r3, [pc, #416]	@ (800e5e0 <processJoinAccept+0x288>)
 800e440:	f893 314c 	ldrb.w	r3, [r3, #332]	@ 0x14c
 800e444:	757b      	strb	r3, [r7, #21]
    uint8_t dlen = LMIC.dataLen;
 800e446:	4b66      	ldr	r3, [pc, #408]	@ (800e5e0 <processJoinAccept+0x288>)
 800e448:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800e44c:	75fb      	strb	r3, [r7, #23]
    uint32_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 800e44e:	7dfb      	ldrb	r3, [r7, #23]
 800e450:	3b04      	subs	r3, #4
 800e452:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e456:	4a62      	ldr	r2, [pc, #392]	@ (800e5e0 <processJoinAccept+0x288>)
 800e458:	4413      	add	r3, r2
 800e45a:	3304      	adds	r3, #4
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fe f903 	bl	800c668 <os_rlsbf4>
 800e462:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 800e464:	7dfb      	ldrb	r3, [r7, #23]
 800e466:	2b11      	cmp	r3, #17
 800e468:	d002      	beq.n	800e470 <processJoinAccept+0x118>
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
 800e46c:	2b21      	cmp	r3, #33	@ 0x21
 800e46e:	d104      	bne.n	800e47a <processJoinAccept+0x122>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 800e470:	7d7b      	ldrb	r3, [r7, #21]
 800e472:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 800e476:	2b20      	cmp	r3, #32
 800e478:	d00b      	beq.n	800e492 <processJoinAccept+0x13a>
      badframe:
 800e47a:	bf00      	nop
 800e47c:	e000      	b.n	800e480 <processJoinAccept+0x128>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 800e47e:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 800e480:	4b57      	ldr	r3, [pc, #348]	@ (800e5e0 <processJoinAccept+0x288>)
 800e482:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800e486:	f003 0301 	and.w	r3, r3, #1
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d089      	beq.n	800e3a2 <processJoinAccept+0x4a>
            return 0;
 800e48e:	2300      	movs	r3, #0
 800e490:	e0a2      	b.n	800e5d8 <processJoinAccept+0x280>
    aes_encrypt(LMIC.frame+1, dlen-1);
 800e492:	4a58      	ldr	r2, [pc, #352]	@ (800e5f4 <processJoinAccept+0x29c>)
 800e494:	7dfb      	ldrb	r3, [r7, #23]
 800e496:	3b01      	subs	r3, #1
 800e498:	4619      	mov	r1, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	f7fe fa84 	bl	800c9a8 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 800e4a0:	7dfb      	ldrb	r3, [r7, #23]
 800e4a2:	3b04      	subs	r3, #4
 800e4a4:	4619      	mov	r1, r3
 800e4a6:	4854      	ldr	r0, [pc, #336]	@ (800e5f8 <processJoinAccept+0x2a0>)
 800e4a8:	f7fe fa5c 	bl	800c964 <aes_verifyMic0>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0e5      	beq.n	800e47e <processJoinAccept+0x126>
    }

    uint32_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 800e4b2:	4b52      	ldr	r3, [pc, #328]	@ (800e5fc <processJoinAccept+0x2a4>)
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fe f8d7 	bl	800c668 <os_rlsbf4>
 800e4ba:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 800e4bc:	4a48      	ldr	r2, [pc, #288]	@ (800e5e0 <processJoinAccept+0x288>)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 800e4c4:	484e      	ldr	r0, [pc, #312]	@ (800e600 <processJoinAccept+0x2a8>)
 800e4c6:	f7fe f8cf 	bl	800c668 <os_rlsbf4>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e4d0:	4a43      	ldr	r2, [pc, #268]	@ (800e5e0 <processJoinAccept+0x288>)
 800e4d2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(LMIC_EU868)
    initDefaultChannels(0);
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	f7fe fe3c 	bl	800d154 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
 800e4de:	2b11      	cmp	r3, #17
 800e4e0:	d921      	bls.n	800e526 <processJoinAccept+0x1ce>
#if defined(LMIC_US915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 800e4e2:	230d      	movs	r3, #13
 800e4e4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 800e4e6:	2303      	movs	r3, #3
 800e4e8:	75bb      	strb	r3, [r7, #22]
 800e4ea:	e019      	b.n	800e520 <processJoinAccept+0x1c8>
            uint32_t freq = convFreq(&LMIC.frame[dlen]);
 800e4ec:	7dfb      	ldrb	r3, [r7, #23]
 800e4ee:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800e4f2:	4a3b      	ldr	r2, [pc, #236]	@ (800e5e0 <processJoinAccept+0x288>)
 800e4f4:	4413      	add	r3, r2
 800e4f6:	3304      	adds	r3, #4
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fe ff2f 	bl	800d35c <convFreq>
 800e4fe:	60b8      	str	r0, [r7, #8]
            if( freq ) {
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d006      	beq.n	800e514 <processJoinAccept+0x1bc>
                LMIC_setupChannel(chidx, freq, 0, -1);
 800e506:	7db8      	ldrb	r0, [r7, #22]
 800e508:	f04f 33ff 	mov.w	r3, #4294967295
 800e50c:	2200      	movs	r2, #0
 800e50e:	68b9      	ldr	r1, [r7, #8]
 800e510:	f7fe feaa 	bl	800d268 <LMIC_setupChannel>
        for( uint8_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 800e514:	7dbb      	ldrb	r3, [r7, #22]
 800e516:	3301      	adds	r3, #1
 800e518:	75bb      	strb	r3, [r7, #22]
 800e51a:	7dfb      	ldrb	r3, [r7, #23]
 800e51c:	3303      	adds	r3, #3
 800e51e:	75fb      	strb	r3, [r7, #23]
 800e520:	7dbb      	ldrb	r3, [r7, #22]
 800e522:	2b07      	cmp	r3, #7
 800e524:	d9e2      	bls.n	800e4ec <processJoinAccept+0x194>
            }
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 800e526:	4b2e      	ldr	r3, [pc, #184]	@ (800e5e0 <processJoinAccept+0x288>)
 800e528:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 800e52c:	3b01      	subs	r3, #1
 800e52e:	b298      	uxth	r0, r3
 800e530:	4b34      	ldr	r3, [pc, #208]	@ (800e604 <processJoinAccept+0x2ac>)
 800e532:	4a35      	ldr	r2, [pc, #212]	@ (800e608 <processJoinAccept+0x2b0>)
 800e534:	492f      	ldr	r1, [pc, #188]	@ (800e5f4 <processJoinAccept+0x29c>)
 800e536:	f7fe fa91 	bl	800ca5c <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));

    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 800e53a:	4b29      	ldr	r3, [pc, #164]	@ (800e5e0 <processJoinAccept+0x288>)
 800e53c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e540:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 800e544:	2b00      	cmp	r3, #0
 800e546:	d104      	bne.n	800e552 <processJoinAccept+0x1fa>
 800e548:	f240 610c 	movw	r1, #1548	@ 0x60c
 800e54c:	4825      	ldr	r0, [pc, #148]	@ (800e5e4 <processJoinAccept+0x28c>)
 800e54e:	f002 fc33 	bl	8010db8 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800e552:	4b23      	ldr	r3, [pc, #140]	@ (800e5e0 <processJoinAccept+0x288>)
 800e554:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e558:	f003 0320 	and.w	r3, r3, #32
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00e      	beq.n	800e57e <processJoinAccept+0x226>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 800e560:	4b1f      	ldr	r3, [pc, #124]	@ (800e5e0 <processJoinAccept+0x288>)
 800e562:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800e566:	4a1e      	ldr	r2, [pc, #120]	@ (800e5e0 <processJoinAccept+0x288>)
 800e568:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 800e56c:	4611      	mov	r1, r2
 800e56e:	4618      	mov	r0, r3
 800e570:	f7fe f84c 	bl	800c60c <lowerDR>
 800e574:	4603      	mov	r3, r0
 800e576:	461a      	mov	r2, r3
 800e578:	4b19      	ldr	r3, [pc, #100]	@ (800e5e0 <processJoinAccept+0x288>)
 800e57a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 800e57e:	4b18      	ldr	r3, [pc, #96]	@ (800e5e0 <processJoinAccept+0x288>)
 800e580:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e584:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 800e588:	f023 0302 	bic.w	r3, r3, #2
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	4b14      	ldr	r3, [pc, #80]	@ (800e5e0 <processJoinAccept+0x288>)
 800e590:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 800e594:	4b12      	ldr	r3, [pc, #72]	@ (800e5e0 <processJoinAccept+0x288>)
 800e596:	2200      	movs	r2, #0
 800e598:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    stateJustJoined();
 800e59c:	f7ff f91e 	bl	800d7dc <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 800e5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800e5e0 <processJoinAccept+0x288>)
 800e5a2:	f893 3157 	ldrb.w	r3, [r3, #343]	@ 0x157
 800e5a6:	f003 030f 	and.w	r3, r3, #15
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	4b0c      	ldr	r3, [pc, #48]	@ (800e5e0 <processJoinAccept+0x288>)
 800e5ae:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 800e5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e5e0 <processJoinAccept+0x288>)
 800e5b4:	f893 2158 	ldrb.w	r2, [r3, #344]	@ 0x158
 800e5b8:	4b09      	ldr	r3, [pc, #36]	@ (800e5e0 <processJoinAccept+0x288>)
 800e5ba:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;
 800e5be:	4b08      	ldr	r3, [pc, #32]	@ (800e5e0 <processJoinAccept+0x288>)
 800e5c0:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d103      	bne.n	800e5d0 <processJoinAccept+0x278>
 800e5c8:	4b05      	ldr	r3, [pc, #20]	@ (800e5e0 <processJoinAccept+0x288>)
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    reportEvent(EV_JOINED);
 800e5d0:	2006      	movs	r0, #6
 800e5d2:	f7ff f8e5 	bl	800d7a0 <reportEvent>
    return 1;
 800e5d6:	2301      	movs	r3, #1
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	20000d48 	.word	0x20000d48
 800e5e4:	08013f3c 	.word	0x08013f3c
 800e5e8:	0800e341 	.word	0x0800e341
 800e5ec:	0800d78d 	.word	0x0800d78d
 800e5f0:	20000d5c 	.word	0x20000d5c
 800e5f4:	20000e95 	.word	0x20000e95
 800e5f8:	20000e94 	.word	0x20000e94
 800e5fc:	20000e9b 	.word	0x20000e9b
 800e600:	20000e98 	.word	0x20000e98
 800e604:	20000e4e 	.word	0x20000e4e
 800e608:	20000e3e 	.word	0x20000e3e

0800e60c <processRx2Jacc>:


static void processRx2Jacc (osjob_t *osjob) {
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b082      	sub	sp, #8
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 800e614:	4b07      	ldr	r3, [pc, #28]	@ (800e634 <processRx2Jacc+0x28>)
 800e616:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d103      	bne.n	800e626 <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800e61e:	4b05      	ldr	r3, [pc, #20]	@ (800e634 <processRx2Jacc+0x28>)
 800e620:	2200      	movs	r2, #0
 800e622:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
    processJoinAccept();
 800e626:	f7ff fe97 	bl	800e358 <processJoinAccept>
}
 800e62a:	bf00      	nop
 800e62c:	3708      	adds	r7, #8
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	20000d48 	.word	0x20000d48

0800e638 <setupRx2Jacc>:


static void setupRx2Jacc (osjob_t *osjob) {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 800e640:	4b04      	ldr	r3, [pc, #16]	@ (800e654 <setupRx2Jacc+0x1c>)
 800e642:	4a05      	ldr	r2, [pc, #20]	@ (800e658 <setupRx2Jacc+0x20>)
 800e644:	61da      	str	r2, [r3, #28]
    setupRx2();
 800e646:	f7ff fd75 	bl	800e134 <setupRx2>
}
 800e64a:	bf00      	nop
 800e64c:	3708      	adds	r7, #8
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	20000d48 	.word	0x20000d48
 800e658:	0800e60d 	.word	0x0800e60d

0800e65c <processRx1Jacc>:


static void processRx1Jacc (osjob_t *osjob) {
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 800e664:	4b0c      	ldr	r3, [pc, #48]	@ (800e698 <processRx1Jacc+0x3c>)
 800e666:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d007      	beq.n	800e67e <processRx1Jacc+0x22>
 800e66e:	f7ff fe73 	bl	800e358 <processJoinAccept>
 800e672:	4603      	mov	r3, r0
 800e674:	f083 0301 	eor.w	r3, r3, #1
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d007      	beq.n	800e68e <processRx1Jacc+0x32>
        schedRx12(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc), LMIC.dn2Dr);
 800e67e:	4b06      	ldr	r3, [pc, #24]	@ (800e698 <processRx1Jacc+0x3c>)
 800e680:	f893 312f 	ldrb.w	r3, [r3, #303]	@ 0x12f
 800e684:	461a      	mov	r2, r3
 800e686:	4905      	ldr	r1, [pc, #20]	@ (800e69c <processRx1Jacc+0x40>)
 800e688:	4805      	ldr	r0, [pc, #20]	@ (800e6a0 <processRx1Jacc+0x44>)
 800e68a:	f7ff fd73 	bl	800e174 <schedRx12>
}
 800e68e:	bf00      	nop
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	20000d48 	.word	0x20000d48
 800e69c:	0800e639 	.word	0x0800e639
 800e6a0:	0002ee00 	.word	0x0002ee00

0800e6a4 <setupRx1Jacc>:


static void setupRx1Jacc (osjob_t *osjob) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 800e6ac:	4803      	ldr	r0, [pc, #12]	@ (800e6bc <setupRx1Jacc+0x18>)
 800e6ae:	f7ff fde1 	bl	800e274 <setupRx1>
}
 800e6b2:	bf00      	nop
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	0800e65d 	.word	0x0800e65d

0800e6c0 <jreqDone>:


static void jreqDone (osjob_t *osjob) {
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 800e6c8:	4903      	ldr	r1, [pc, #12]	@ (800e6d8 <jreqDone+0x18>)
 800e6ca:	4804      	ldr	r0, [pc, #16]	@ (800e6dc <jreqDone+0x1c>)
 800e6cc:	f7ff fdf4 	bl	800e2b8 <txDone>
}
 800e6d0:	bf00      	nop
 800e6d2:	3708      	adds	r7, #8
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	0800e6a5 	.word	0x0800e6a5
 800e6dc:	00027100 	.word	0x00027100

0800e6e0 <processRx2DnData>:
// ======================================== Data frames

// Fwd decl.
static bool processDnData(void);

static void processRx2DnData (osjob_t *osjob) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 800e6e8:	4b0c      	ldr	r3, [pc, #48]	@ (800e71c <processRx2DnData+0x3c>)
 800e6ea:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d10e      	bne.n	800e710 <processRx2DnData+0x30>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800e6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800e71c <processRx2DnData+0x3c>)
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
        // It could be that the gateway *is* sending a reply, but we
        // just didn't pick it up. To avoid TX'ing again while the
        // gateay is not listening anyway, delay the next transmission
        // until DNW2_SAFETY_ZONE from now, and add up to 2 seconds of
        // extra randomization.
        txDelay(os_getTime() + DNW2_SAFETY_ZONE, 2);
 800e6fa:	f001 f8df 	bl	800f8bc <os_getTime>
 800e6fe:	4603      	mov	r3, r0
 800e700:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 800e704:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e708:	2102      	movs	r1, #2
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fe fcb2 	bl	800d074 <txDelay>
    }
    processDnData();
 800e710:	f000 fbaa 	bl	800ee68 <processDnData>
}
 800e714:	bf00      	nop
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	20000d48 	.word	0x20000d48

0800e720 <setupRx2DnData>:


static void setupRx2DnData (osjob_t *osjob) {
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 800e728:	4b04      	ldr	r3, [pc, #16]	@ (800e73c <setupRx2DnData+0x1c>)
 800e72a:	4a05      	ldr	r2, [pc, #20]	@ (800e740 <setupRx2DnData+0x20>)
 800e72c:	61da      	str	r2, [r3, #28]
    setupRx2();
 800e72e:	f7ff fd01 	bl	800e134 <setupRx2>
}
 800e732:	bf00      	nop
 800e734:	3708      	adds	r7, #8
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	20000d48 	.word	0x20000d48
 800e740:	0800e6e1 	.word	0x0800e6e1

0800e744 <processRx1DnData>:


static void processRx1DnData (osjob_t *osjob) {
 800e744:	b5b0      	push	{r4, r5, r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 800e74c:	4b11      	ldr	r3, [pc, #68]	@ (800e794 <processRx1DnData+0x50>)
 800e74e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800e752:	2b00      	cmp	r3, #0
 800e754:	d007      	beq.n	800e766 <processRx1DnData+0x22>
 800e756:	f000 fb87 	bl	800ee68 <processDnData>
 800e75a:	4603      	mov	r3, r0
 800e75c:	f083 0301 	eor.w	r3, r3, #1
 800e760:	b2db      	uxtb	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	d012      	beq.n	800e78c <processRx1DnData+0x48>
        schedRx12(sec2osticks(LMIC.rxDelay +(int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData), LMIC.dn2Dr);
 800e766:	4b0b      	ldr	r3, [pc, #44]	@ (800e794 <processRx1DnData+0x50>)
 800e768:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 800e76c:	3301      	adds	r3, #1
 800e76e:	17da      	asrs	r2, r3, #31
 800e770:	461c      	mov	r4, r3
 800e772:	4615      	mov	r5, r2
 800e774:	4622      	mov	r2, r4
 800e776:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e77a:	fb02 f303 	mul.w	r3, r2, r3
 800e77e:	4a05      	ldr	r2, [pc, #20]	@ (800e794 <processRx1DnData+0x50>)
 800e780:	f892 212f 	ldrb.w	r2, [r2, #303]	@ 0x12f
 800e784:	4904      	ldr	r1, [pc, #16]	@ (800e798 <processRx1DnData+0x54>)
 800e786:	4618      	mov	r0, r3
 800e788:	f7ff fcf4 	bl	800e174 <schedRx12>
}
 800e78c:	bf00      	nop
 800e78e:	3708      	adds	r7, #8
 800e790:	46bd      	mov	sp, r7
 800e792:	bdb0      	pop	{r4, r5, r7, pc}
 800e794:	20000d48 	.word	0x20000d48
 800e798:	0800e721 	.word	0x0800e721

0800e79c <setupRx1DnData>:


static void setupRx1DnData (osjob_t *osjob) {
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 800e7a4:	4803      	ldr	r0, [pc, #12]	@ (800e7b4 <setupRx1DnData+0x18>)
 800e7a6:	f7ff fd65 	bl	800e274 <setupRx1>
}
 800e7aa:	bf00      	nop
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	0800e745 	.word	0x0800e745

0800e7b8 <updataDone>:


static void updataDone (osjob_t *osjob) {
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 800e7c0:	4b07      	ldr	r3, [pc, #28]	@ (800e7e0 <updataDone+0x28>)
 800e7c2:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800e7cc:	fb02 f303 	mul.w	r3, r2, r3
 800e7d0:	4904      	ldr	r1, [pc, #16]	@ (800e7e4 <updataDone+0x2c>)
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7ff fd70 	bl	800e2b8 <txDone>
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	20000d48 	.word	0x20000d48
 800e7e4:	0800e79d 	.word	0x0800e79d

0800e7e8 <buildDataFrame>:

// ========================================


static void buildDataFrame (void) {
 800e7e8:	b590      	push	{r4, r7, lr}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af02      	add	r7, sp, #8
    bool txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800e7ee:	4ba3      	ldr	r3, [pc, #652]	@ (800ea7c <buildDataFrame+0x294>)
 800e7f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e7f4:	f003 0318 	and.w	r3, r3, #24
 800e7f8:	2b10      	cmp	r3, #16
 800e7fa:	bf14      	ite	ne
 800e7fc:	2301      	movne	r3, #1
 800e7fe:	2300      	moveq	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]
    uint8_t dlen = txdata ? LMIC.pendTxLen : 0;
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <buildDataFrame+0x28>
 800e808:	4b9c      	ldr	r3, [pc, #624]	@ (800ea7c <buildDataFrame+0x294>)
 800e80a:	f893 30be 	ldrb.w	r3, [r3, #190]	@ 0xbe
 800e80e:	e000      	b.n	800e812 <buildDataFrame+0x2a>
 800e810:	2300      	movs	r3, #0
 800e812:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 800e814:	2308      	movs	r3, #8
 800e816:	60bb      	str	r3, [r7, #8]
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 800e818:	4b98      	ldr	r3, [pc, #608]	@ (800ea7c <buildDataFrame+0x294>)
 800e81a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800e81e:	461a      	mov	r2, r3
 800e820:	f240 4302 	movw	r3, #1026	@ 0x402
 800e824:	4013      	ands	r3, r2
 800e826:	f240 4202 	movw	r2, #1026	@ 0x402
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d11c      	bne.n	800e868 <buildDataFrame+0x80>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 800e82e:	4a93      	ldr	r2, [pc, #588]	@ (800ea7c <buildDataFrame+0x294>)
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	4413      	add	r3, r2
 800e834:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e838:	2210      	movs	r2, #16
 800e83a:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 800e83c:	4b8f      	ldr	r3, [pc, #572]	@ (800ea7c <buildDataFrame+0x294>)
 800e83e:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 800e842:	b25a      	sxtb	r2, r3
 800e844:	4b8d      	ldr	r3, [pc, #564]	@ (800ea7c <buildDataFrame+0x294>)
 800e846:	f893 3139 	ldrb.w	r3, [r3, #313]	@ 0x139
 800e84a:	011b      	lsls	r3, r3, #4
 800e84c:	b25b      	sxtb	r3, r3
 800e84e:	4313      	orrs	r3, r2
 800e850:	b25a      	sxtb	r2, r3
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	3301      	adds	r3, #1
 800e856:	b2d1      	uxtb	r1, r2
 800e858:	4a88      	ldr	r2, [pc, #544]	@ (800ea7c <buildDataFrame+0x294>)
 800e85a:	4413      	add	r3, r2
 800e85c:	460a      	mov	r2, r1
 800e85e:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        end += 2;
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	3302      	adds	r3, #2
 800e866:	60bb      	str	r3, [r7, #8]
    }
#endif // !LMIC_DISABLE_PING
#if !defined(LMIC_DISABLE_MCMD_DCAP_REQ)
    if( LMIC.dutyCapAns ) {
 800e868:	4b84      	ldr	r3, [pc, #528]	@ (800ea7c <buildDataFrame+0x294>)
 800e86a:	f893 312d 	ldrb.w	r3, [r3, #301]	@ 0x12d
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00d      	beq.n	800e88e <buildDataFrame+0xa6>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 800e872:	4a82      	ldr	r2, [pc, #520]	@ (800ea7c <buildDataFrame+0x294>)
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4413      	add	r3, r2
 800e878:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e87c:	2204      	movs	r2, #4
 800e87e:	701a      	strb	r2, [r3, #0]
        end += 1;
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	3301      	adds	r3, #1
 800e884:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 800e886:	4b7d      	ldr	r3, [pc, #500]	@ (800ea7c <buildDataFrame+0x294>)
 800e888:	2200      	movs	r2, #0
 800e88a:	f883 212d 	strb.w	r2, [r3, #301]	@ 0x12d
    }
#endif // !LMIC_DISABLE_MCMD_DCAP_REQ
#if !defined(LMIC_DISABLE_MCMD_DN2P_SET)
    if( LMIC.dn2Ans ) {
 800e88e:	4b7b      	ldr	r3, [pc, #492]	@ (800ea7c <buildDataFrame+0x294>)
 800e890:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 800e894:	2b00      	cmp	r3, #0
 800e896:	d01a      	beq.n	800e8ce <buildDataFrame+0xe6>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 800e898:	4a78      	ldr	r2, [pc, #480]	@ (800ea7c <buildDataFrame+0x294>)
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	4413      	add	r3, r2
 800e89e:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e8a2:	2205      	movs	r2, #5
 800e8a4:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 800e8a6:	4b75      	ldr	r3, [pc, #468]	@ (800ea7c <buildDataFrame+0x294>)
 800e8a8:	f893 2134 	ldrb.w	r2, [r3, #308]	@ 0x134
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	3301      	adds	r3, #1
 800e8b0:	f002 0203 	and.w	r2, r2, #3
 800e8b4:	b2d1      	uxtb	r1, r2
 800e8b6:	4a71      	ldr	r2, [pc, #452]	@ (800ea7c <buildDataFrame+0x294>)
 800e8b8:	4413      	add	r3, r2
 800e8ba:	460a      	mov	r2, r1
 800e8bc:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        end += 2;
 800e8c0:	68bb      	ldr	r3, [r7, #8]
 800e8c2:	3302      	adds	r3, #2
 800e8c4:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 800e8c6:	4b6d      	ldr	r3, [pc, #436]	@ (800ea7c <buildDataFrame+0x294>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    }
#endif // !LMIC_DISABLE_MCMD_DN2P_SET
    if( LMIC.devsAns ) {  // answer to device status
 800e8ce:	4b6b      	ldr	r3, [pc, #428]	@ (800ea7c <buildDataFrame+0x294>)
 800e8d0:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d021      	beq.n	800e91c <buildDataFrame+0x134>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 800e8d8:	4a68      	ldr	r2, [pc, #416]	@ (800ea7c <buildDataFrame+0x294>)
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	4413      	add	r3, r2
 800e8de:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e8e2:	2206      	movs	r2, #6
 800e8e4:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	1c5c      	adds	r4, r3, #1
 800e8ea:	f7fd ff4e 	bl	800c78a <os_getBattLevel>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4b62      	ldr	r3, [pc, #392]	@ (800ea7c <buildDataFrame+0x294>)
 800e8f4:	4423      	add	r3, r4
 800e8f6:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        LMIC.frame[end+2] = LMIC.margin;
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	3302      	adds	r3, #2
 800e8fe:	4a5f      	ldr	r2, [pc, #380]	@ (800ea7c <buildDataFrame+0x294>)
 800e900:	f892 1128 	ldrb.w	r1, [r2, #296]	@ 0x128
 800e904:	4a5d      	ldr	r2, [pc, #372]	@ (800ea7c <buildDataFrame+0x294>)
 800e906:	4413      	add	r3, r2
 800e908:	460a      	mov	r2, r1
 800e90a:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        end += 3;
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	3303      	adds	r3, #3
 800e912:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 800e914:	4b59      	ldr	r3, [pc, #356]	@ (800ea7c <buildDataFrame+0x294>)
 800e916:	2200      	movs	r2, #0
 800e918:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 800e91c:	4b57      	ldr	r3, [pc, #348]	@ (800ea7c <buildDataFrame+0x294>)
 800e91e:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 800e922:	2b00      	cmp	r3, #0
 800e924:	d018      	beq.n	800e958 <buildDataFrame+0x170>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 800e926:	4a55      	ldr	r2, [pc, #340]	@ (800ea7c <buildDataFrame+0x294>)
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	4413      	add	r3, r2
 800e92c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e930:	2203      	movs	r2, #3
 800e932:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 800e934:	4b51      	ldr	r3, [pc, #324]	@ (800ea7c <buildDataFrame+0x294>)
 800e936:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	3301      	adds	r3, #1
 800e93e:	4611      	mov	r1, r2
 800e940:	4a4e      	ldr	r2, [pc, #312]	@ (800ea7c <buildDataFrame+0x294>)
 800e942:	4413      	add	r3, r2
 800e944:	460a      	mov	r2, r1
 800e946:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        end += 2;
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	3302      	adds	r3, #2
 800e94e:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 800e950:	4b4a      	ldr	r3, [pc, #296]	@ (800ea7c <buildDataFrame+0x294>)
 800e952:	2200      	movs	r2, #0
 800e954:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
#if !defined(LMIC_DISABLE_BEACONS)
    if( LMIC.bcninfoTries > 0 ) {
 800e958:	4b48      	ldr	r3, [pc, #288]	@ (800ea7c <buildDataFrame+0x294>)
 800e95a:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d009      	beq.n	800e976 <buildDataFrame+0x18e>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 800e962:	4a46      	ldr	r2, [pc, #280]	@ (800ea7c <buildDataFrame+0x294>)
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	4413      	add	r3, r2
 800e968:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e96c:	2212      	movs	r2, #18
 800e96e:	701a      	strb	r2, [r3, #0]
        end += 1;
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	3301      	adds	r3, #1
 800e974:	60bb      	str	r3, [r7, #8]
    }
#endif // !LMIC_DISABLE_BEACONS
    if( LMIC.adrChanged ) {
 800e976:	4b41      	ldr	r3, [pc, #260]	@ (800ea7c <buildDataFrame+0x294>)
 800e978:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00c      	beq.n	800e99a <buildDataFrame+0x1b2>
        if( LMIC.adrAckReq < 0 )
 800e980:	4b3e      	ldr	r3, [pc, #248]	@ (800ea7c <buildDataFrame+0x294>)
 800e982:	f993 3125 	ldrsb.w	r3, [r3, #293]	@ 0x125
 800e986:	2b00      	cmp	r3, #0
 800e988:	da03      	bge.n	800e992 <buildDataFrame+0x1aa>
            LMIC.adrAckReq = 0;
 800e98a:	4b3c      	ldr	r3, [pc, #240]	@ (800ea7c <buildDataFrame+0x294>)
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
        LMIC.adrChanged = 0;
 800e992:	4b3a      	ldr	r3, [pc, #232]	@ (800ea7c <buildDataFrame+0x294>)
 800e994:	2200      	movs	r2, #0
 800e996:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
#if !defined(LMIC_DISABLE_MCMD_PING_SET) && !defined(LMIC_DISABLE_PING)
    if( LMIC.pingSetAns != 0 ) {
 800e99a:	4b38      	ldr	r3, [pc, #224]	@ (800ea7c <buildDataFrame+0x294>)
 800e99c:	f893 3137 	ldrb.w	r3, [r3, #311]	@ 0x137
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d01a      	beq.n	800e9da <buildDataFrame+0x1f2>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 800e9a4:	4a35      	ldr	r2, [pc, #212]	@ (800ea7c <buildDataFrame+0x294>)
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	4413      	add	r3, r2
 800e9aa:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e9ae:	2211      	movs	r2, #17
 800e9b0:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 800e9b2:	4b32      	ldr	r3, [pc, #200]	@ (800ea7c <buildDataFrame+0x294>)
 800e9b4:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	f002 0201 	and.w	r2, r2, #1
 800e9c0:	b2d1      	uxtb	r1, r2
 800e9c2:	4a2e      	ldr	r2, [pc, #184]	@ (800ea7c <buildDataFrame+0x294>)
 800e9c4:	4413      	add	r3, r2
 800e9c6:	460a      	mov	r2, r1
 800e9c8:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        end += 2;
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	3302      	adds	r3, #2
 800e9d0:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 800e9d2:	4b2a      	ldr	r3, [pc, #168]	@ (800ea7c <buildDataFrame+0x294>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f883 2137 	strb.w	r2, [r3, #311]	@ 0x137
    }
#endif // !LMIC_DISABLE_MCMD_PING_SET && !LMIC_DISABLE_PING
#if !defined(LMIC_DISABLE_MCMD_SNCH_REQ)
    if( LMIC.snchAns ) {
 800e9da:	4b28      	ldr	r3, [pc, #160]	@ (800ea7c <buildDataFrame+0x294>)
 800e9dc:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d01a      	beq.n	800ea1a <buildDataFrame+0x232>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 800e9e4:	4a25      	ldr	r2, [pc, #148]	@ (800ea7c <buildDataFrame+0x294>)
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800e9ee:	2207      	movs	r2, #7
 800e9f0:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 800e9f2:	4b22      	ldr	r3, [pc, #136]	@ (800ea7c <buildDataFrame+0x294>)
 800e9f4:	f893 212e 	ldrb.w	r2, [r3, #302]	@ 0x12e
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	f002 0203 	and.w	r2, r2, #3
 800ea00:	b2d1      	uxtb	r1, r2
 800ea02:	4a1e      	ldr	r2, [pc, #120]	@ (800ea7c <buildDataFrame+0x294>)
 800ea04:	4413      	add	r3, r2
 800ea06:	460a      	mov	r2, r1
 800ea08:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
        end += 2;
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	3302      	adds	r3, #2
 800ea10:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 800ea12:	4b1a      	ldr	r3, [pc, #104]	@ (800ea7c <buildDataFrame+0x294>)
 800ea14:	2200      	movs	r2, #0
 800ea16:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
    }
#endif // !LMIC_DISABLE_MCMD_SNCH_REQ
    ASSERT(end <= OFF_DAT_OPTS+16);
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	2b18      	cmp	r3, #24
 800ea1e:	dd04      	ble.n	800ea2a <buildDataFrame+0x242>
 800ea20:	f240 61ab 	movw	r1, #1707	@ 0x6ab
 800ea24:	4816      	ldr	r0, [pc, #88]	@ (800ea80 <buildDataFrame+0x298>)
 800ea26:	f002 f9c7 	bl	8010db8 <hal_failed>

    uint8_t flen = end + (txdata ? 5+dlen : 4);
 800ea2a:	7bfb      	ldrb	r3, [r7, #15]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d003      	beq.n	800ea38 <buildDataFrame+0x250>
 800ea30:	79bb      	ldrb	r3, [r7, #6]
 800ea32:	3305      	adds	r3, #5
 800ea34:	b2db      	uxtb	r3, r3
 800ea36:	e000      	b.n	800ea3a <buildDataFrame+0x252>
 800ea38:	2304      	movs	r3, #4
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	b2d2      	uxtb	r2, r2
 800ea3e:	4413      	add	r3, r2
 800ea40:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	2b40      	cmp	r3, #64	@ 0x40
 800ea46:	d905      	bls.n	800ea54 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	3304      	adds	r3, #4
 800ea52:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 800ea54:	4b09      	ldr	r3, [pc, #36]	@ (800ea7c <buildDataFrame+0x294>)
 800ea56:	2240      	movs	r2, #64	@ 0x40
 800ea58:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 800ea5c:	4b07      	ldr	r3, [pc, #28]	@ (800ea7c <buildDataFrame+0x294>)
 800ea5e:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 800ea62:	4b06      	ldr	r3, [pc, #24]	@ (800ea7c <buildDataFrame+0x294>)
 800ea64:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 800ea68:	4313      	orrs	r3, r2
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	b25b      	sxtb	r3, r3
 800ea6e:	4a03      	ldr	r2, [pc, #12]	@ (800ea7c <buildDataFrame+0x294>)
 800ea70:	f992 2125 	ldrsb.w	r2, [r2, #293]	@ 0x125
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	db05      	blt.n	800ea84 <buildDataFrame+0x29c>
 800ea78:	2240      	movs	r2, #64	@ 0x40
 800ea7a:	e004      	b.n	800ea86 <buildDataFrame+0x29e>
 800ea7c:	20000d48 	.word	0x20000d48
 800ea80:	08013f3c 	.word	0x08013f3c
 800ea84:	2200      	movs	r2, #0
 800ea86:	4313      	orrs	r3, r2
 800ea88:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	b2db      	uxtb	r3, r3
 800ea8e:	3b08      	subs	r3, #8
 800ea90:	b2db      	uxtb	r3, r3
 800ea92:	b25b      	sxtb	r3, r3
 800ea94:	4313      	orrs	r3, r2
 800ea96:	b25b      	sxtb	r3, r3
 800ea98:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 800ea9a:	4b40      	ldr	r3, [pc, #256]	@ (800eb9c <buildDataFrame+0x3b4>)
 800ea9c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 800eaa0:	4a3f      	ldr	r2, [pc, #252]	@ (800eba0 <buildDataFrame+0x3b8>)
 800eaa2:	4b3e      	ldr	r3, [pc, #248]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eaa4:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4610      	mov	r0, r2
 800eaac:	f7fd fe2b 	bl	800c706 <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 800eab0:	4b3a      	ldr	r3, [pc, #232]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eab2:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d106      	bne.n	800eac8 <buildDataFrame+0x2e0>
        LMIC.seqnoUp += 1;
 800eaba:	4b38      	ldr	r3, [pc, #224]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eabc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800eac0:	3301      	adds	r3, #1
 800eac2:	4a36      	ldr	r2, [pc, #216]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eac4:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (TABLE_GET_U1(DRADJUST, LMIC.txCnt+1) << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 800eac8:	4a36      	ldr	r2, [pc, #216]	@ (800eba4 <buildDataFrame+0x3bc>)
 800eaca:	4b34      	ldr	r3, [pc, #208]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eacc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	3b01      	subs	r3, #1
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	4619      	mov	r1, r3
 800ead8:	4610      	mov	r0, r2
 800eada:	f7fd fdfd 	bl	800c6d8 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 800eade:	4b2f      	ldr	r3, [pc, #188]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124

    if( txdata ) {
 800eae6:	7bfb      	ldrb	r3, [r7, #15]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d03e      	beq.n	800eb6a <buildDataFrame+0x382>
        if( LMIC.pendTxConf ) {
 800eaec:	4b2b      	ldr	r3, [pc, #172]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eaee:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00c      	beq.n	800eb10 <buildDataFrame+0x328>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 800eaf6:	4b29      	ldr	r3, [pc, #164]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eaf8:	2280      	movs	r2, #128	@ 0x80
 800eafa:	f883 214c 	strb.w	r2, [r3, #332]	@ 0x14c
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800eafe:	4b27      	ldr	r3, [pc, #156]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb00:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d103      	bne.n	800eb10 <buildDataFrame+0x328>
 800eb08:	4b24      	ldr	r3, [pc, #144]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb0a:	2201      	movs	r2, #1
 800eb0c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 800eb10:	4b22      	ldr	r3, [pc, #136]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb12:	f893 10bc 	ldrb.w	r1, [r3, #188]	@ 0xbc
 800eb16:	4a21      	ldr	r2, [pc, #132]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800eb20:	460a      	mov	r2, r1
 800eb22:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	3301      	adds	r3, #1
 800eb28:	4a1f      	ldr	r2, [pc, #124]	@ (800eba8 <buildDataFrame+0x3c0>)
 800eb2a:	4413      	add	r3, r2
 800eb2c:	79ba      	ldrb	r2, [r7, #6]
 800eb2e:	491f      	ldr	r1, [pc, #124]	@ (800ebac <buildDataFrame+0x3c4>)
 800eb30:	4618      	mov	r0, r3
 800eb32:	f003 f8d4 	bl	8011cde <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800eb36:	4b19      	ldr	r3, [pc, #100]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb38:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <buildDataFrame+0x35c>
 800eb40:	481b      	ldr	r0, [pc, #108]	@ (800ebb0 <buildDataFrame+0x3c8>)
 800eb42:	e000      	b.n	800eb46 <buildDataFrame+0x35e>
 800eb44:	481b      	ldr	r0, [pc, #108]	@ (800ebb4 <buildDataFrame+0x3cc>)
 800eb46:	4b15      	ldr	r3, [pc, #84]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb48:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
                   LMIC.devaddr, LMIC.seqnoUp-1,
 800eb4c:	4b13      	ldr	r3, [pc, #76]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb4e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800eb52:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 800eb58:	4a13      	ldr	r2, [pc, #76]	@ (800eba8 <buildDataFrame+0x3c0>)
 800eb5a:	4413      	add	r3, r2
 800eb5c:	79ba      	ldrb	r2, [r7, #6]
 800eb5e:	9201      	str	r2, [sp, #4]
 800eb60:	9300      	str	r3, [sp, #0]
 800eb62:	2300      	movs	r3, #0
 800eb64:	4622      	mov	r2, r4
 800eb66:	f7fd ff35 	bl	800c9d4 <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 800eb6a:	4b0c      	ldr	r3, [pc, #48]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb6c:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 800eb70:	4b0a      	ldr	r3, [pc, #40]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb72:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800eb76:	1e5a      	subs	r2, r3, #1
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	3b04      	subs	r3, #4
 800eb7c:	9301      	str	r3, [sp, #4]
 800eb7e:	4b0a      	ldr	r3, [pc, #40]	@ (800eba8 <buildDataFrame+0x3c0>)
 800eb80:	9300      	str	r3, [sp, #0]
 800eb82:	2300      	movs	r3, #0
 800eb84:	480a      	ldr	r0, [pc, #40]	@ (800ebb0 <buildDataFrame+0x3c8>)
 800eb86:	f7fd fea7 	bl	800c8d8 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 800eb8a:	4a04      	ldr	r2, [pc, #16]	@ (800eb9c <buildDataFrame+0x3b4>)
 800eb8c:	79fb      	ldrb	r3, [r7, #7]
 800eb8e:	f882 314b 	strb.w	r3, [r2, #331]	@ 0x14b
}
 800eb92:	bf00      	nop
 800eb94:	3714      	adds	r7, #20
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd90      	pop	{r4, r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	20000d48 	.word	0x20000d48
 800eba0:	20000e95 	.word	0x20000e95
 800eba4:	20000e9a 	.word	0x20000e9a
 800eba8:	20000e94 	.word	0x20000e94
 800ebac:	20000e07 	.word	0x20000e07
 800ebb0:	20000e3e 	.word	0x20000e3e
 800ebb4:	20000e4e 	.word	0x20000e4e

0800ebb8 <onBcnRx>:


#if !defined(LMIC_DISABLE_BEACONS)
// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (osjob_t *job) {
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	f001 fe0d 	bl	80107e0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 800ebc6:	4823      	ldr	r0, [pc, #140]	@ (800ec54 <onBcnRx+0x9c>)
 800ebc8:	f000 feb4 	bl	800f934 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 800ebcc:	4b22      	ldr	r3, [pc, #136]	@ (800ec58 <onBcnRx+0xa0>)
 800ebce:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10c      	bne.n	800ebf0 <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 800ebd6:	4b20      	ldr	r3, [pc, #128]	@ (800ec58 <onBcnRx+0xa0>)
 800ebd8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ebdc:	f023 0303 	bic.w	r3, r3, #3
 800ebe0:	b29a      	uxth	r2, r3
 800ebe2:	4b1d      	ldr	r3, [pc, #116]	@ (800ec58 <onBcnRx+0xa0>)
 800ebe4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 800ebe8:	2001      	movs	r0, #1
 800ebea:	f7fe fdd9 	bl	800d7a0 <reportEvent>
        return;
 800ebee:	e02d      	b.n	800ec4c <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 800ebf0:	f7fe fe54 	bl	800d89c <decodeBeacon>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	dc0f      	bgt.n	800ec1a <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 800ebfa:	4b17      	ldr	r3, [pc, #92]	@ (800ec58 <onBcnRx+0xa0>)
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
        os_radio(RADIO_RXON);
 800ec02:	2003      	movs	r0, #3
 800ec04:	f001 fdec 	bl	80107e0 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 800ec08:	4b13      	ldr	r3, [pc, #76]	@ (800ec58 <onBcnRx+0xa0>)
 800ec0a:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800ec0e:	4a13      	ldr	r2, [pc, #76]	@ (800ec5c <onBcnRx+0xa4>)
 800ec10:	4619      	mov	r1, r3
 800ec12:	4810      	ldr	r0, [pc, #64]	@ (800ec54 <onBcnRx+0x9c>)
 800ec14:	f000 fed0 	bl	800f9b8 <os_setTimedCallback>
        return;
 800ec18:	e018      	b.n	800ec4c <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 800ec1a:	2101      	movs	r1, #1
 800ec1c:	200d      	movs	r0, #13
 800ec1e:	f7fe f86b 	bl	800ccf8 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 800ec22:	4b0d      	ldr	r3, [pc, #52]	@ (800ec58 <onBcnRx+0xa0>)
 800ec24:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ec28:	f023 0301 	bic.w	r3, r3, #1
 800ec2c:	b29a      	uxth	r2, r3
 800ec2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ec58 <onBcnRx+0xa0>)
 800ec30:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 800ec34:	4b08      	ldr	r3, [pc, #32]	@ (800ec58 <onBcnRx+0xa0>)
 800ec36:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ec3a:	f043 0302 	orr.w	r3, r3, #2
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	4b05      	ldr	r3, [pc, #20]	@ (800ec58 <onBcnRx+0xa0>)
 800ec42:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 800ec46:	2002      	movs	r0, #2
 800ec48:	f7fe fdaa 	bl	800d7a0 <reportEvent>
}
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	20000d5c 	.word	0x20000d5c
 800ec58:	20000d48 	.word	0x20000d48
 800ec5c:	0800ebb9 	.word	0x0800ebb9

0800ec60 <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 800ec60:	b580      	push	{r7, lr}
 800ec62:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 800ec64:	4b28      	ldr	r3, [pc, #160]	@ (800ed08 <startScan+0xa8>)
 800ec66:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d006      	beq.n	800ec7c <startScan+0x1c>
 800ec6e:	4b26      	ldr	r3, [pc, #152]	@ (800ed08 <startScan+0xa8>)
 800ec70:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ec74:	f003 0304 	and.w	r3, r3, #4
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <startScan+0x26>
 800ec7c:	f240 7109 	movw	r1, #1801	@ 0x709
 800ec80:	4822      	ldr	r0, [pc, #136]	@ (800ed0c <startScan+0xac>)
 800ec82:	f002 f899 	bl	8010db8 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 800ec86:	4b20      	ldr	r3, [pc, #128]	@ (800ed08 <startScan+0xa8>)
 800ec88:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ec8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d137      	bne.n	800ed04 <startScan+0xa4>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 800ec94:	4b1c      	ldr	r3, [pc, #112]	@ (800ed08 <startScan+0xa8>)
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
 800ec9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ed08 <startScan+0xa8>)
 800ec9e:	f893 219a 	ldrb.w	r2, [r3, #410]	@ 0x19a
 800eca2:	4b19      	ldr	r3, [pc, #100]	@ (800ed08 <startScan+0xa8>)
 800eca4:	f883 2124 	strb.w	r2, [r3, #292]	@ 0x124
 800eca8:	4b17      	ldr	r3, [pc, #92]	@ (800ed08 <startScan+0xa8>)
 800ecaa:	f893 2124 	ldrb.w	r2, [r3, #292]	@ 0x124
 800ecae:	4b16      	ldr	r3, [pc, #88]	@ (800ed08 <startScan+0xa8>)
 800ecb0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 800ecb4:	4b14      	ldr	r3, [pc, #80]	@ (800ed08 <startScan+0xa8>)
 800ecb6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ecba:	f043 0301 	orr.w	r3, r3, #1
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	4b10      	ldr	r3, [pc, #64]	@ (800ed08 <startScan+0xa8>)
 800ecc8:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 800eccc:	f7fe fc96 	bl	800d5fc <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 800ecd0:	f000 fdf4 	bl	800f8bc <os_getTime>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 800ecda:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 800ecde:	4a0a      	ldr	r2, [pc, #40]	@ (800ed08 <startScan+0xa8>)
 800ece0:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194
 800ece4:	4b08      	ldr	r3, [pc, #32]	@ (800ed08 <startScan+0xa8>)
 800ece6:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800ecea:	4a07      	ldr	r2, [pc, #28]	@ (800ed08 <startScan+0xa8>)
 800ecec:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 800ecee:	4b06      	ldr	r3, [pc, #24]	@ (800ed08 <startScan+0xa8>)
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	4a07      	ldr	r2, [pc, #28]	@ (800ed10 <startScan+0xb0>)
 800ecf4:	4619      	mov	r1, r3
 800ecf6:	4807      	ldr	r0, [pc, #28]	@ (800ed14 <startScan+0xb4>)
 800ecf8:	f000 fe5e 	bl	800f9b8 <os_setTimedCallback>
    os_radio(RADIO_RXON);
 800ecfc:	2003      	movs	r0, #3
 800ecfe:	f001 fd6f 	bl	80107e0 <os_radio>
 800ed02:	e000      	b.n	800ed06 <startScan+0xa6>
        return;
 800ed04:	bf00      	nop
}
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	20000d48 	.word	0x20000d48
 800ed0c:	08013f3c 	.word	0x08013f3c
 800ed10:	0800ebb9 	.word	0x0800ebb9
 800ed14:	20000d5c 	.word	0x20000d5c

0800ed18 <buildJoinRequest>:
// Join stuff
//
// ================================================================================

#if !defined(LMIC_DISABLE_JOIN)
static void buildJoinRequest (uint8_t ftype) {
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	4603      	mov	r3, r0
 800ed20:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    uint8_t *d = LMIC.frame;
 800ed22:	4b16      	ldr	r3, [pc, #88]	@ (800ed7c <buildJoinRequest+0x64>)
 800ed24:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	79fa      	ldrb	r2, [r7, #7]
 800ed2a:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	4618      	mov	r0, r3
 800ed32:	f7f3 f831 	bl	8001d98 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	3309      	adds	r3, #9
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7f3 f840 	bl	8001dc0 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	3311      	adds	r3, #17
 800ed44:	4a0e      	ldr	r2, [pc, #56]	@ (800ed80 <buildJoinRequest+0x68>)
 800ed46:	f8b2 20f4 	ldrh.w	r2, [r2, #244]	@ 0xf4
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7fd fcc3 	bl	800c6d8 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 800ed52:	2113      	movs	r1, #19
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f7fd fde7 	bl	800c928 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 800ed5a:	4b09      	ldr	r3, [pc, #36]	@ (800ed80 <buildJoinRequest+0x68>)
 800ed5c:	2217      	movs	r2, #23
 800ed5e:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
    LMIC.devNonce++;
 800ed62:	4b07      	ldr	r3, [pc, #28]	@ (800ed80 <buildJoinRequest+0x68>)
 800ed64:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 800ed68:	3301      	adds	r3, #1
 800ed6a:	b29a      	uxth	r2, r3
 800ed6c:	4b04      	ldr	r3, [pc, #16]	@ (800ed80 <buildJoinRequest+0x68>)
 800ed6e:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 800ed72:	bf00      	nop
 800ed74:	3710      	adds	r7, #16
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
 800ed7a:	bf00      	nop
 800ed7c:	20000e94 	.word	0x20000e94
 800ed80:	20000d48 	.word	0x20000d48

0800ed84 <startJoining>:

static void startJoining (osjob_t *osjob) {
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b082      	sub	sp, #8
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 800ed8c:	2005      	movs	r0, #5
 800ed8e:	f7fe fd07 	bl	800d7a0 <reportEvent>
}
 800ed92:	bf00      	nop
 800ed94:	3708      	adds	r7, #8
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
	...

0800ed9c <LMIC_startJoining>:

// Start join procedure if not already joined.
bool LMIC_startJoining (void) {
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 800eda0:	4b1e      	ldr	r3, [pc, #120]	@ (800ee1c <LMIC_startJoining+0x80>)
 800eda2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d135      	bne.n	800ee16 <LMIC_startJoining+0x7a>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 800edaa:	4b1c      	ldr	r3, [pc, #112]	@ (800ee1c <LMIC_startJoining+0x80>)
 800edac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800edb0:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d004      	beq.n	800edc2 <LMIC_startJoining+0x26>
 800edb8:	f240 714f 	movw	r1, #1871	@ 0x74f
 800edbc:	4818      	ldr	r0, [pc, #96]	@ (800ee20 <LMIC_startJoining+0x84>)
 800edbe:	f001 fffb 	bl	8010db8 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 800edc2:	4b16      	ldr	r3, [pc, #88]	@ (800ee1c <LMIC_startJoining+0x80>)
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 800edca:	4b14      	ldr	r3, [pc, #80]	@ (800ee1c <LMIC_startJoining+0x80>)
 800edcc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800edd0:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 800edd4:	f023 0301 	bic.w	r3, r3, #1
 800edd8:	b29a      	uxth	r2, r3
 800edda:	4b10      	ldr	r3, [pc, #64]	@ (800ee1c <LMIC_startJoining+0x80>)
 800eddc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = 0;
 800ede0:	4b0e      	ldr	r3, [pc, #56]	@ (800ee1c <LMIC_startJoining+0x80>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
 800ede8:	4b0c      	ldr	r3, [pc, #48]	@ (800ee1c <LMIC_startJoining+0x80>)
 800edea:	f893 2148 	ldrb.w	r2, [r3, #328]	@ 0x148
 800edee:	4b0b      	ldr	r3, [pc, #44]	@ (800ee1c <LMIC_startJoining+0x80>)
 800edf0:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 800edf4:	f7fe fc28 	bl	800d648 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 800edf8:	4b08      	ldr	r3, [pc, #32]	@ (800ee1c <LMIC_startJoining+0x80>)
 800edfa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800edfe:	f043 0304 	orr.w	r3, r3, #4
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	4b05      	ldr	r3, [pc, #20]	@ (800ee1c <LMIC_startJoining+0x80>)
 800ee06:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 800ee0a:	4906      	ldr	r1, [pc, #24]	@ (800ee24 <LMIC_startJoining+0x88>)
 800ee0c:	4806      	ldr	r0, [pc, #24]	@ (800ee28 <LMIC_startJoining+0x8c>)
 800ee0e:	f000 fda5 	bl	800f95c <os_setCallback>
        return 1;
 800ee12:	2301      	movs	r3, #1
 800ee14:	e000      	b.n	800ee18 <LMIC_startJoining+0x7c>
    }
    return 0; // already joined
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	20000d48 	.word	0x20000d48
 800ee20:	08013f3c 	.word	0x08013f3c
 800ee24:	0800ed85 	.word	0x0800ed85
 800ee28:	20000d5c 	.word	0x20000d5c

0800ee2c <processPingRx>:
//
//
// ================================================================================

#if !defined(LMIC_DISABLE_PING)
static void processPingRx (osjob_t *osjob) {
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 800ee34:	4b0b      	ldr	r3, [pc, #44]	@ (800ee64 <processPingRx+0x38>)
 800ee36:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00c      	beq.n	800ee58 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 800ee3e:	4b09      	ldr	r3, [pc, #36]	@ (800ee64 <processPingRx+0x38>)
 800ee40:	2204      	movs	r2, #4
 800ee42:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
        if( decodeFrame() ) {
 800ee46:	f7fe fdc1 	bl	800d9cc <decodeFrame>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d003      	beq.n	800ee58 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 800ee50:	200d      	movs	r0, #13
 800ee52:	f7fe fca5 	bl	800d7a0 <reportEvent>
            return;
 800ee56:	e001      	b.n	800ee5c <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 800ee58:	f000 fa28 	bl	800f2ac <engineUpdate>
}
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20000d48 	.word	0x20000d48

0800ee68 <processDnData>:
#endif // !LMIC_DISABLE_PING


static bool processDnData (void) {
 800ee68:	b598      	push	{r3, r4, r7, lr}
 800ee6a:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 800ee6c:	4b7a      	ldr	r3, [pc, #488]	@ (800f058 <processDnData+0x1f0>)
 800ee6e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ee72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d104      	bne.n	800ee84 <processDnData+0x1c>
 800ee7a:	f240 7177 	movw	r1, #1911	@ 0x777
 800ee7e:	4877      	ldr	r0, [pc, #476]	@ (800f05c <processDnData+0x1f4>)
 800ee80:	f001 ff9a 	bl	8010db8 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 800ee84:	4b74      	ldr	r3, [pc, #464]	@ (800f058 <processDnData+0x1f0>)
 800ee86:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	f040 80d0 	bne.w	800f030 <processDnData+0x1c8>
      norx:
 800ee90:	bf00      	nop
 800ee92:	e000      	b.n	800ee96 <processDnData+0x2e>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 800ee94:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 800ee96:	4b70      	ldr	r3, [pc, #448]	@ (800f058 <processDnData+0x1f0>)
 800ee98:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d03a      	beq.n	800ef16 <processDnData+0xae>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 800eea0:	4b6d      	ldr	r3, [pc, #436]	@ (800f058 <processDnData+0x1f0>)
 800eea2:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800eea6:	2b07      	cmp	r3, #7
 800eea8:	d830      	bhi.n	800ef0c <processDnData+0xa4>
                LMIC.txCnt += 1;
 800eeaa:	4b6b      	ldr	r3, [pc, #428]	@ (800f058 <processDnData+0x1f0>)
 800eeac:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	b2da      	uxtb	r2, r3
 800eeb4:	4b68      	ldr	r3, [pc, #416]	@ (800f058 <processDnData+0x1f0>)
 800eeb6:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, TABLE_GET_U1(DRADJUST, LMIC.txCnt)), KEEP_TXPOW);
 800eeba:	4b67      	ldr	r3, [pc, #412]	@ (800f058 <processDnData+0x1f0>)
 800eebc:	f893 40b0 	ldrb.w	r4, [r3, #176]	@ 0xb0
 800eec0:	4b65      	ldr	r3, [pc, #404]	@ (800f058 <processDnData+0x1f0>)
 800eec2:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800eec6:	4619      	mov	r1, r3
 800eec8:	4865      	ldr	r0, [pc, #404]	@ (800f060 <processDnData+0x1f8>)
 800eeca:	f7fc fcb6 	bl	800b83a <table_get_u1>
 800eece:	4603      	mov	r3, r0
 800eed0:	4619      	mov	r1, r3
 800eed2:	4620      	mov	r0, r4
 800eed4:	f7fd fb9a 	bl	800c60c <lowerDR>
 800eed8:	4603      	mov	r3, r0
 800eeda:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800eede:	4619      	mov	r1, r3
 800eee0:	2002      	movs	r0, #2
 800eee2:	f7fe f909 	bl	800d0f8 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 800eee6:	4b5c      	ldr	r3, [pc, #368]	@ (800f058 <processDnData+0x1f0>)
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	2103      	movs	r1, #3
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fe f8c1 	bl	800d074 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 800eef2:	4b59      	ldr	r3, [pc, #356]	@ (800f058 <processDnData+0x1f0>)
 800eef4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800eef8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eefc:	b29a      	uxth	r2, r3
 800eefe:	4b56      	ldr	r3, [pc, #344]	@ (800f058 <processDnData+0x1f0>)
 800ef00:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 800ef04:	f000 f9d2 	bl	800f2ac <engineUpdate>
                return 1;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e0a2      	b.n	800f052 <processDnData+0x1ea>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 800ef0c:	4b52      	ldr	r3, [pc, #328]	@ (800f058 <processDnData+0x1f0>)
 800ef0e:	2260      	movs	r2, #96	@ 0x60
 800ef10:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
 800ef14:	e003      	b.n	800ef1e <processDnData+0xb6>
            LMIC.txrxFlags = TXRX_NOPORT;
 800ef16:	4b50      	ldr	r3, [pc, #320]	@ (800f058 <processDnData+0x1f0>)
 800ef18:	2220      	movs	r2, #32
 800ef1a:	f883 2149 	strb.w	r2, [r3, #329]	@ 0x149
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 800ef1e:	4b4e      	ldr	r3, [pc, #312]	@ (800f058 <processDnData+0x1f0>)
 800ef20:	f993 3125 	ldrsb.w	r3, [r3, #293]	@ 0x125
 800ef24:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800ef28:	d009      	beq.n	800ef3e <processDnData+0xd6>
            LMIC.adrAckReq += 1;
 800ef2a:	4b4b      	ldr	r3, [pc, #300]	@ (800f058 <processDnData+0x1f0>)
 800ef2c:	f993 3125 	ldrsb.w	r3, [r3, #293]	@ 0x125
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	3301      	adds	r3, #1
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	b25a      	sxtb	r2, r3
 800ef38:	4b47      	ldr	r3, [pc, #284]	@ (800f058 <processDnData+0x1f0>)
 800ef3a:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
        LMIC.dataBeg = LMIC.dataLen = 0;
 800ef3e:	4b46      	ldr	r3, [pc, #280]	@ (800f058 <processDnData+0x1f0>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 800ef46:	4b44      	ldr	r3, [pc, #272]	@ (800f058 <processDnData+0x1f0>)
 800ef48:	f893 214b 	ldrb.w	r2, [r3, #331]	@ 0x14b
 800ef4c:	4b42      	ldr	r3, [pc, #264]	@ (800f058 <processDnData+0x1f0>)
 800ef4e:	f883 214a 	strb.w	r2, [r3, #330]	@ 0x14a
 800ef52:	e000      	b.n	800ef56 <processDnData+0xee>
    }
    goto txcomplete;
 800ef54:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 800ef56:	4b40      	ldr	r3, [pc, #256]	@ (800f058 <processDnData+0x1f0>)
 800ef58:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ef5c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	4b3d      	ldr	r3, [pc, #244]	@ (800f058 <processDnData+0x1f0>)
 800ef64:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 800ef68:	4b3b      	ldr	r3, [pc, #236]	@ (800f058 <processDnData+0x1f0>)
 800ef6a:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800ef6e:	f003 0307 	and.w	r3, r3, #7
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d012      	beq.n	800ef9c <processDnData+0x134>
 800ef76:	4b38      	ldr	r3, [pc, #224]	@ (800f058 <processDnData+0x1f0>)
 800ef78:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ef7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d00b      	beq.n	800ef9c <processDnData+0x134>
            LMIC.opmode &= ~OP_LINKDEAD;
 800ef84:	4b34      	ldr	r3, [pc, #208]	@ (800f058 <processDnData+0x1f0>)
 800ef86:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800ef8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	4b31      	ldr	r3, [pc, #196]	@ (800f058 <processDnData+0x1f0>)
 800ef92:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 800ef96:	200f      	movs	r0, #15
 800ef98:	f7fe fc02 	bl	800d7a0 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 800ef9c:	200a      	movs	r0, #10
 800ef9e:	f7fe fbff 	bl	800d7a0 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 800efa2:	4b2d      	ldr	r3, [pc, #180]	@ (800f058 <processDnData+0x1f0>)
 800efa4:	f993 3125 	ldrsb.w	r3, [r3, #293]	@ 0x125
 800efa8:	2b18      	cmp	r3, #24
 800efaa:	dd1c      	ble.n	800efe6 <processDnData+0x17e>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 800efac:	4b2a      	ldr	r3, [pc, #168]	@ (800f058 <processDnData+0x1f0>)
 800efae:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fd fafa 	bl	800c5ac <decDR>
 800efb8:	4603      	mov	r3, r0
 800efba:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800efbe:	4619      	mov	r1, r3
 800efc0:	2003      	movs	r0, #3
 800efc2:	f7fe f899 	bl	800d0f8 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 800efc6:	4b24      	ldr	r3, [pc, #144]	@ (800f058 <processDnData+0x1f0>)
 800efc8:	220c      	movs	r2, #12
 800efca:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 800efce:	4b22      	ldr	r3, [pc, #136]	@ (800f058 <processDnData+0x1f0>)
 800efd0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800efd4:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 800efd8:	b29a      	uxth	r2, r3
 800efda:	4b1f      	ldr	r3, [pc, #124]	@ (800f058 <processDnData+0x1f0>)
 800efdc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 800efe0:	200e      	movs	r0, #14
 800efe2:	f7fe fbdd 	bl	800d7a0 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 800efe6:	4b1c      	ldr	r3, [pc, #112]	@ (800f058 <processDnData+0x1f0>)
 800efe8:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800efec:	2b00      	cmp	r3, #0
 800efee:	d01d      	beq.n	800f02c <processDnData+0x1c4>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800eff0:	4b19      	ldr	r3, [pc, #100]	@ (800f058 <processDnData+0x1f0>)
 800eff2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800eff6:	f003 0302 	and.w	r3, r3, #2
 800effa:	2b00      	cmp	r3, #0
 800effc:	d007      	beq.n	800f00e <processDnData+0x1a6>
                reportEvent(EV_BEACON_FOUND);
 800effe:	2002      	movs	r0, #2
 800f000:	f7fe fbce 	bl	800d7a0 <reportEvent>
                LMIC.bcninfoTries = 0;
 800f004:	4b14      	ldr	r3, [pc, #80]	@ (800f058 <processDnData+0x1f0>)
 800f006:	2200      	movs	r2, #0
 800f008:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 800f00c:	e00e      	b.n	800f02c <processDnData+0x1c4>
            else if( --LMIC.bcninfoTries == 0 ) {
 800f00e:	4b12      	ldr	r3, [pc, #72]	@ (800f058 <processDnData+0x1f0>)
 800f010:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800f014:	3b01      	subs	r3, #1
 800f016:	b2da      	uxtb	r2, r3
 800f018:	4b0f      	ldr	r3, [pc, #60]	@ (800f058 <processDnData+0x1f0>)
 800f01a:	f883 2136 	strb.w	r2, [r3, #310]	@ 0x136
 800f01e:	4b0e      	ldr	r3, [pc, #56]	@ (800f058 <processDnData+0x1f0>)
 800f020:	f893 3136 	ldrb.w	r3, [r3, #310]	@ 0x136
 800f024:	2b00      	cmp	r3, #0
 800f026:	d101      	bne.n	800f02c <processDnData+0x1c4>
                startScan();   // NWK did not answer - try scan
 800f028:	f7ff fe1a 	bl	800ec60 <startScan>
        return 1;
 800f02c:	2301      	movs	r3, #1
 800f02e:	e010      	b.n	800f052 <processDnData+0x1ea>
    if( !decodeFrame() ) {
 800f030:	f7fe fccc 	bl	800d9cc <decodeFrame>
 800f034:	4603      	mov	r3, r0
 800f036:	f083 0301 	eor.w	r3, r3, #1
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d089      	beq.n	800ef54 <processDnData+0xec>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 800f040:	4b05      	ldr	r3, [pc, #20]	@ (800f058 <processDnData+0x1f0>)
 800f042:	f893 3149 	ldrb.w	r3, [r3, #329]	@ 0x149
 800f046:	f003 0301 	and.w	r3, r3, #1
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	f43f af22 	beq.w	800ee94 <processDnData+0x2c>
            return 0;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	bd98      	pop	{r3, r4, r7, pc}
 800f056:	bf00      	nop
 800f058:	20000d48 	.word	0x20000d48
 800f05c:	08013f3c 	.word	0x08013f3c
 800f060:	08015b1c 	.word	0x08015b1c

0800f064 <processBeacon>:


#if !defined(LMIC_DISABLE_BEACONS)
static void processBeacon (osjob_t *osjob) {
 800f064:	b590      	push	{r4, r7, lr}
 800f066:	b087      	sub	sp, #28
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 800f06c:	4b83      	ldr	r3, [pc, #524]	@ (800f27c <processBeacon+0x218>)
 800f06e:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800f072:	60fb      	str	r3, [r7, #12]
    uint8_t flags = LMIC.bcninfo.flags;
 800f074:	4b81      	ldr	r3, [pc, #516]	@ (800f27c <processBeacon+0x218>)
 800f076:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800f07a:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800f07c:	4b7f      	ldr	r3, [pc, #508]	@ (800f27c <processBeacon+0x218>)
 800f07e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 808a 	beq.w	800f19c <processBeacon+0x138>
 800f088:	f7fe fc08 	bl	800d89c <decodeBeacon>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f340 8084 	ble.w	800f19c <processBeacon+0x138>
        ev = EV_BEACON_TRACKED;
 800f094:	2304      	movs	r3, #4
 800f096:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 800f098:	7afb      	ldrb	r3, [r7, #11]
 800f09a:	f003 0303 	and.w	r3, r3, #3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d104      	bne.n	800f0ac <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	200d      	movs	r0, #13
 800f0a6:	f7fd fe27 	bl	800ccf8 <calcBcnRxWindowFromMillis>
            goto rev;
 800f0aa:	e0d5      	b.n	800f258 <processBeacon+0x1f4>
        }
        // We have a previous BEACON to calculate some drift
        int16_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	4b72      	ldr	r3, [pc, #456]	@ (800f27c <processBeacon+0x218>)
 800f0b2:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 800f0c4:	4b6d      	ldr	r3, [pc, #436]	@ (800f27c <processBeacon+0x218>)
 800f0c6:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d013      	beq.n	800f0f6 <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 800f0ce:	4b6b      	ldr	r3, [pc, #428]	@ (800f27c <processBeacon+0x218>)
 800f0d0:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800f0d4:	b29a      	uxth	r2, r3
 800f0d6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800f0da:	4968      	ldr	r1, [pc, #416]	@ (800f27c <processBeacon+0x218>)
 800f0dc:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 800f0e0:	1a59      	subs	r1, r3, r1
 800f0e2:	4b66      	ldr	r3, [pc, #408]	@ (800f27c <processBeacon+0x218>)
 800f0e4:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	fb91 f3f3 	sdiv	r3, r1, r3
 800f0ee:	b29b      	uxth	r3, r3
 800f0f0:	4413      	add	r3, r2
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 800f0f6:	4b61      	ldr	r3, [pc, #388]	@ (800f27c <processBeacon+0x218>)
 800f0f8:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800f0fc:	f003 0304 	and.w	r3, r3, #4
 800f100:	2b00      	cmp	r3, #0
 800f102:	d127      	bne.n	800f154 <processBeacon+0xf0>
            int16_t diff = LMIC.drift - drift;
 800f104:	4b5d      	ldr	r3, [pc, #372]	@ (800f27c <processBeacon+0x218>)
 800f106:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	8abb      	ldrh	r3, [r7, #20]
 800f10e:	1ad3      	subs	r3, r2, r3
 800f110:	b29b      	uxth	r3, r3
 800f112:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 800f114:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	da03      	bge.n	800f124 <processBeacon+0xc0>
 800f11c:	8a7b      	ldrh	r3, [r7, #18]
 800f11e:	425b      	negs	r3, r3
 800f120:	b29b      	uxth	r3, r3
 800f122:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 800f124:	4a55      	ldr	r2, [pc, #340]	@ (800f27c <processBeacon+0x218>)
 800f126:	8a7b      	ldrh	r3, [r7, #18]
 800f128:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 800f12c:	4b53      	ldr	r3, [pc, #332]	@ (800f27c <processBeacon+0x218>)
 800f12e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 800f132:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800f136:	429a      	cmp	r2, r3
 800f138:	dd03      	ble.n	800f142 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 800f13a:	4a50      	ldr	r2, [pc, #320]	@ (800f27c <processBeacon+0x218>)
 800f13c:	8a7b      	ldrh	r3, [r7, #18]
 800f13e:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 800f142:	4b4e      	ldr	r3, [pc, #312]	@ (800f27c <processBeacon+0x218>)
 800f144:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800f148:	f023 0308 	bic.w	r3, r3, #8
 800f14c:	b2da      	uxtb	r2, r3
 800f14e:	4b4b      	ldr	r3, [pc, #300]	@ (800f27c <processBeacon+0x218>)
 800f150:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
        }
        LMIC.drift = drift;
 800f154:	4a49      	ldr	r2, [pc, #292]	@ (800f27c <processBeacon+0x218>)
 800f156:	8abb      	ldrh	r3, [r7, #20]
 800f158:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 800f15c:	4b47      	ldr	r3, [pc, #284]	@ (800f27c <processBeacon+0x218>)
 800f15e:	2200      	movs	r2, #0
 800f160:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 800f164:	4b45      	ldr	r3, [pc, #276]	@ (800f27c <processBeacon+0x218>)
 800f166:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800f16a:	4b44      	ldr	r3, [pc, #272]	@ (800f27c <processBeacon+0x218>)
 800f16c:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 800f170:	4b42      	ldr	r3, [pc, #264]	@ (800f27c <processBeacon+0x218>)
 800f172:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800f176:	f023 0304 	bic.w	r3, r3, #4
 800f17a:	b2da      	uxtb	r2, r3
 800f17c:	4b3f      	ldr	r3, [pc, #252]	@ (800f27c <processBeacon+0x218>)
 800f17e:	f883 219a 	strb.w	r2, [r3, #410]	@ 0x19a
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 800f182:	4b3e      	ldr	r3, [pc, #248]	@ (800f27c <processBeacon+0x218>)
 800f184:	f893 319a 	ldrb.w	r3, [r3, #410]	@ 0x19a
 800f188:	f003 0303 	and.w	r3, r3, #3
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d14f      	bne.n	800f230 <processBeacon+0x1cc>
 800f190:	f240 71da 	movw	r1, #2010	@ 0x7da
 800f194:	483a      	ldr	r0, [pc, #232]	@ (800f280 <processBeacon+0x21c>)
 800f196:	f001 fe0f 	bl	8010db8 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800f19a:	e049      	b.n	800f230 <processBeacon+0x1cc>
    } else {
        ev = EV_BEACON_MISSED;
 800f19c:	2303      	movs	r3, #3
 800f19e:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 800f1a0:	4b36      	ldr	r3, [pc, #216]	@ (800f27c <processBeacon+0x218>)
 800f1a2:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800f1a6:	4a35      	ldr	r2, [pc, #212]	@ (800f27c <processBeacon+0x218>)
 800f1a8:	f9b2 20b4 	ldrsh.w	r2, [r2, #180]	@ 0xb4
 800f1ac:	1a9b      	subs	r3, r3, r2
 800f1ae:	f503 137a 	add.w	r3, r3, #4096000	@ 0x3e8000
 800f1b2:	4a32      	ldr	r2, [pc, #200]	@ (800f27c <processBeacon+0x218>)
 800f1b4:	f8c2 3194 	str.w	r3, [r2, #404]	@ 0x194
        LMIC.bcninfo.time   += BCN_INTV_sec;
 800f1b8:	4b30      	ldr	r3, [pc, #192]	@ (800f27c <processBeacon+0x218>)
 800f1ba:	f8d3 319c 	ldr.w	r3, [r3, #412]	@ 0x19c
 800f1be:	3380      	adds	r3, #128	@ 0x80
 800f1c0:	4a2e      	ldr	r2, [pc, #184]	@ (800f27c <processBeacon+0x218>)
 800f1c2:	f8c2 319c 	str.w	r3, [r2, #412]	@ 0x19c
        LMIC.missedBcns++;
 800f1c6:	4b2d      	ldr	r3, [pc, #180]	@ (800f27c <processBeacon+0x218>)
 800f1c8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800f1cc:	3301      	adds	r3, #1
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	4b2a      	ldr	r3, [pc, #168]	@ (800f27c <processBeacon+0x218>)
 800f1d2:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 800f1d6:	4b29      	ldr	r3, [pc, #164]	@ (800f27c <processBeacon+0x218>)
 800f1d8:	f8d3 3194 	ldr.w	r3, [r3, #404]	@ 0x194
 800f1dc:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800f1e0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f1e4:	2104      	movs	r1, #4
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7fd ff44 	bl	800d074 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 800f1ec:	4b23      	ldr	r3, [pc, #140]	@ (800f27c <processBeacon+0x218>)
 800f1ee:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 800f1f2:	2b14      	cmp	r3, #20
 800f1f4:	d908      	bls.n	800f208 <processBeacon+0x1a4>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 800f1f6:	4b21      	ldr	r3, [pc, #132]	@ (800f27c <processBeacon+0x218>)
 800f1f8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f1fc:	f043 0320 	orr.w	r3, r3, #32
 800f200:	b29a      	uxth	r2, r3
 800f202:	4b1e      	ldr	r3, [pc, #120]	@ (800f27c <processBeacon+0x218>)
 800f204:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 800f208:	4b1c      	ldr	r3, [pc, #112]	@ (800f27c <processBeacon+0x218>)
 800f20a:	f893 318d 	ldrb.w	r3, [r3, #397]	@ 0x18d
 800f20e:	2b64      	cmp	r3, #100	@ 0x64
 800f210:	d90f      	bls.n	800f232 <processBeacon+0x1ce>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 800f212:	4b1a      	ldr	r3, [pc, #104]	@ (800f27c <processBeacon+0x218>)
 800f214:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f218:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 800f21c:	f023 0302 	bic.w	r3, r3, #2
 800f220:	b29a      	uxth	r2, r3
 800f222:	4b16      	ldr	r3, [pc, #88]	@ (800f27c <processBeacon+0x218>)
 800f224:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 800f228:	200b      	movs	r0, #11
 800f22a:	f7fe fab9 	bl	800d7a0 <reportEvent>
            return;
 800f22e:	e021      	b.n	800f274 <processBeacon+0x210>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 800f230:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 800f232:	4b12      	ldr	r3, [pc, #72]	@ (800f27c <processBeacon+0x218>)
 800f234:	f8d3 4194 	ldr.w	r4, [r3, #404]	@ 0x194
 800f238:	2103      	movs	r1, #3
 800f23a:	2000      	movs	r0, #0
 800f23c:	f7fd fd04 	bl	800cc48 <calcRxWindow>
 800f240:	4603      	mov	r3, r0
 800f242:	1ae3      	subs	r3, r4, r3
 800f244:	f503 137a 	add.w	r3, r3, #4096000	@ 0x3e8000
 800f248:	4a0c      	ldr	r2, [pc, #48]	@ (800f27c <processBeacon+0x218>)
 800f24a:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcnRxsyms = LMIC.rxsyms;
 800f24e:	4b0b      	ldr	r3, [pc, #44]	@ (800f27c <processBeacon+0x218>)
 800f250:	7c1a      	ldrb	r2, [r3, #16]
 800f252:	4b0a      	ldr	r3, [pc, #40]	@ (800f27c <processBeacon+0x218>)
 800f254:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
  rev:
#if LMIC_US915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 800f258:	4b08      	ldr	r3, [pc, #32]	@ (800f27c <processBeacon+0x218>)
 800f25a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f25e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f262:	2b00      	cmp	r3, #0
 800f264:	d002      	beq.n	800f26c <processBeacon+0x208>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 800f266:	4807      	ldr	r0, [pc, #28]	@ (800f284 <processBeacon+0x220>)
 800f268:	f7fd fdd0 	bl	800ce0c <rxschedInit>
#endif // !LMIC_DISABLE_PING
    reportEvent(ev);
 800f26c:	7dfb      	ldrb	r3, [r7, #23]
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fe fa96 	bl	800d7a0 <reportEvent>
}
 800f274:	371c      	adds	r7, #28
 800f276:	46bd      	mov	sp, r7
 800f278:	bd90      	pop	{r4, r7, pc}
 800f27a:	bf00      	nop
 800f27c:	20000d48 	.word	0x20000d48
 800f280:	08013f3c 	.word	0x08013f3c
 800f284:	20000e80 	.word	0x20000e80

0800f288 <startRxPing>:
}
#endif // !LMIC_DISABLE_BEACONS


#if !defined(LMIC_DISABLE_PING)
static void startRxPing (osjob_t *osjob) {
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 800f290:	4b04      	ldr	r3, [pc, #16]	@ (800f2a4 <startRxPing+0x1c>)
 800f292:	4a05      	ldr	r2, [pc, #20]	@ (800f2a8 <startRxPing+0x20>)
 800f294:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 800f296:	2002      	movs	r0, #2
 800f298:	f001 faa2 	bl	80107e0 <os_radio>
}
 800f29c:	bf00      	nop
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	20000d48 	.word	0x20000d48
 800f2a8:	0800ee2d 	.word	0x0800ee2d

0800f2ac <engineUpdate>:
#endif // !LMIC_DISABLE_PING


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
#if LMIC_DEBUG_LEVEL > 0
    lmic_printf("%lu: engineUpdate, opmode=0x%x\n", os_getTime(), LMIC.opmode);
 800f2b2:	f000 fb03 	bl	800f8bc <os_getTime>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	4a93      	ldr	r2, [pc, #588]	@ (800f508 <engineUpdate+0x25c>)
 800f2ba:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	@ 0xac
 800f2be:	4619      	mov	r1, r3
 800f2c0:	4892      	ldr	r0, [pc, #584]	@ (800f50c <engineUpdate+0x260>)
 800f2c2:	f001 fab9 	bl	8010838 <printf>
#endif
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 )
 800f2c6:	4b90      	ldr	r3, [pc, #576]	@ (800f508 <engineUpdate+0x25c>)
 800f2c8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f2cc:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f040 8185 	bne.w	800f5e0 <engineUpdate+0x334>
        return;

#if !defined(LMIC_DISABLE_JOIN)
    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 800f2d6:	4b8c      	ldr	r3, [pc, #560]	@ (800f508 <engineUpdate+0x25c>)
 800f2d8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d109      	bne.n	800f2f4 <engineUpdate+0x48>
 800f2e0:	4b89      	ldr	r3, [pc, #548]	@ (800f508 <engineUpdate+0x25c>)
 800f2e2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f2e6:	f003 0304 	and.w	r3, r3, #4
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d102      	bne.n	800f2f4 <engineUpdate+0x48>
        LMIC_startJoining();
 800f2ee:	f7ff fd55 	bl	800ed9c <LMIC_startJoining>
        return;
 800f2f2:	e178      	b.n	800f5e6 <engineUpdate+0x33a>
    }
#endif // !LMIC_DISABLE_JOIN

    ostime_t now    = os_getTime();
 800f2f4:	f000 fae2 	bl	800f8bc <os_getTime>
 800f2f8:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 800f2fe:	2300      	movs	r3, #0
 800f300:	613b      	str	r3, [r7, #16]

#if !defined(LMIC_DISABLE_BEACONS)
    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 800f302:	4b81      	ldr	r3, [pc, #516]	@ (800f508 <engineUpdate+0x25c>)
 800f304:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f308:	f003 0302 	and.w	r3, r3, #2
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d011      	beq.n	800f334 <engineUpdate+0x88>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 800f310:	4b7d      	ldr	r3, [pc, #500]	@ (800f508 <engineUpdate+0x25c>)
 800f312:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800f316:	68ba      	ldr	r2, [r7, #8]
 800f318:	1ad3      	subs	r3, r2, r3
 800f31a:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 800f31e:	d004      	beq.n	800f32a <engineUpdate+0x7e>
 800f320:	f640 011e 	movw	r1, #2078	@ 0x81e
 800f324:	487a      	ldr	r0, [pc, #488]	@ (800f510 <engineUpdate+0x264>)
 800f326:	f001 fd47 	bl	8010db8 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 800f32a:	4b77      	ldr	r3, [pc, #476]	@ (800f508 <engineUpdate+0x25c>)
 800f32c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800f330:	3b40      	subs	r3, #64	@ 0x40
 800f332:	617b      	str	r3, [r7, #20]
    }
#endif // !LMIC_DISABLE_BEACONS

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 800f334:	4b74      	ldr	r3, [pc, #464]	@ (800f508 <engineUpdate+0x25c>)
 800f336:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f33a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800f33e:	2b00      	cmp	r3, #0
 800f340:	f000 80f4 	beq.w	800f52c <engineUpdate+0x280>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bool jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 800f344:	4b70      	ldr	r3, [pc, #448]	@ (800f508 <engineUpdate+0x25c>)
 800f346:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f34a:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bf14      	ite	ne
 800f352:	2301      	movne	r3, #1
 800f354:	2300      	moveq	r3, #0
 800f356:	71fb      	strb	r3, [r7, #7]
                lmic_printf("%lu: Uplink join pending\n", os_getTime());
            else
                lmic_printf("%lu: Uplink data pending\n", os_getTime());
        #endif
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 800f358:	4b6b      	ldr	r3, [pc, #428]	@ (800f508 <engineUpdate+0x25c>)
 800f35a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f35e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f362:	2b00      	cmp	r3, #0
 800f364:	d012      	beq.n	800f38c <engineUpdate+0xe0>
            txbeg = LMIC.txend = nextTx(now);
 800f366:	68b8      	ldr	r0, [r7, #8]
 800f368:	f7fe f8ae 	bl	800d4c8 <nextTx>
 800f36c:	4603      	mov	r3, r0
 800f36e:	4a66      	ldr	r2, [pc, #408]	@ (800f508 <engineUpdate+0x25c>)
 800f370:	6013      	str	r3, [r2, #0]
 800f372:	4b65      	ldr	r3, [pc, #404]	@ (800f508 <engineUpdate+0x25c>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 800f378:	4b63      	ldr	r3, [pc, #396]	@ (800f508 <engineUpdate+0x25c>)
 800f37a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f37e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f382:	b29a      	uxth	r2, r3
 800f384:	4b60      	ldr	r3, [pc, #384]	@ (800f508 <engineUpdate+0x25c>)
 800f386:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 800f38a:	e002      	b.n	800f392 <engineUpdate+0xe6>
            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Airtime available at %lu (channel duty limit)\n", os_getTime(), txbeg);
            #endif
        } else {
            txbeg = LMIC.txend;
 800f38c:	4b5e      	ldr	r3, [pc, #376]	@ (800f508 <engineUpdate+0x25c>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	613b      	str	r3, [r7, #16]
            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Airtime available at %lu (previously determined)\n", os_getTime(), txbeg);
            #endif
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (ostimediff_t)(txbeg - LMIC.globalDutyAvail) < 0 ) {
 800f392:	4b5d      	ldr	r3, [pc, #372]	@ (800f508 <engineUpdate+0x25c>)
 800f394:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d106      	bne.n	800f3aa <engineUpdate+0xfe>
 800f39c:	4b5a      	ldr	r3, [pc, #360]	@ (800f508 <engineUpdate+0x25c>)
 800f39e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f3a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d00a      	beq.n	800f3c0 <engineUpdate+0x114>
 800f3aa:	4b57      	ldr	r3, [pc, #348]	@ (800f508 <engineUpdate+0x25c>)
 800f3ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f3b0:	693a      	ldr	r2, [r7, #16]
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	da03      	bge.n	800f3c0 <engineUpdate+0x114>
            txbeg = LMIC.globalDutyAvail;
 800f3b8:	4b53      	ldr	r3, [pc, #332]	@ (800f508 <engineUpdate+0x25c>)
 800f3ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f3be:	613b      	str	r3, [r7, #16]
            #endif
        }
#if !defined(LMIC_DISABLE_BEACONS)
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 800f3c0:	4b51      	ldr	r3, [pc, #324]	@ (800f508 <engineUpdate+0x25c>)
 800f3c2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f3c6:	f003 0302 	and.w	r3, r3, #2
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d017      	beq.n	800f3fe <engineUpdate+0x152>
            (ostimediff_t)(txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime) > 0 ) {
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d001      	beq.n	800f3d8 <engineUpdate+0x12c>
 800f3d4:	4a4f      	ldr	r2, [pc, #316]	@ (800f514 <engineUpdate+0x268>)
 800f3d6:	e000      	b.n	800f3da <engineUpdate+0x12e>
 800f3d8:	4a4f      	ldr	r2, [pc, #316]	@ (800f518 <engineUpdate+0x26c>)
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	441a      	add	r2, r3
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	dd0b      	ble.n	800f3fe <engineUpdate+0x152>
                lmic_printf("%lu: Awaiting beacon before uplink\n", os_getTime());
            #endif

            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 800f3ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800f3f0:	2110      	movs	r1, #16
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fd fe3e 	bl	800d074 <txDelay>
            txbeg = 0;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	613b      	str	r3, [r7, #16]
            goto checkrx;
 800f3fc:	e09e      	b.n	800f53c <engineUpdate+0x290>
        }
#endif // !LMIC_DISABLE_BEACONS
        // Earliest possible time vs overhead to setup radio
        if( (ostimediff_t)(txbeg - (now + TX_RAMPUP)) < 0 ) {
 800f3fe:	693a      	ldr	r2, [r7, #16]
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	3b40      	subs	r3, #64	@ 0x40
 800f406:	2b00      	cmp	r3, #0
 800f408:	da70      	bge.n	800f4ec <engineUpdate+0x240>
            #if LMIC_DEBUG_LEVEL > 1
                lmic_printf("%lu: Ready for uplink\n", os_getTime());
            #endif
            // We could send right now!
            txbeg = now;
 800f40a:	68bb      	ldr	r3, [r7, #8]
 800f40c:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 800f40e:	4b3e      	ldr	r3, [pc, #248]	@ (800f508 <engineUpdate+0x25c>)
 800f410:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 800f414:	73fb      	strb	r3, [r7, #15]
#if !defined(LMIC_DISABLE_JOIN)
            if( jacc ) {
 800f416:	79fb      	ldrb	r3, [r7, #7]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01d      	beq.n	800f458 <engineUpdate+0x1ac>
                uint8_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 800f41c:	4b3a      	ldr	r3, [pc, #232]	@ (800f508 <engineUpdate+0x25c>)
 800f41e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f422:	f003 0320 	and.w	r3, r3, #32
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00c      	beq.n	800f444 <engineUpdate+0x198>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 800f42a:	4b37      	ldr	r3, [pc, #220]	@ (800f508 <engineUpdate+0x25c>)
 800f42c:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 800f430:	7bfb      	ldrb	r3, [r7, #15]
 800f432:	4611      	mov	r1, r2
 800f434:	4618      	mov	r0, r3
 800f436:	f7fd f8e9 	bl	800c60c <lowerDR>
 800f43a:	4603      	mov	r3, r0
 800f43c:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 800f43e:	23c0      	movs	r3, #192	@ 0xc0
 800f440:	73bb      	strb	r3, [r7, #14]
 800f442:	e001      	b.n	800f448 <engineUpdate+0x19c>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 800f444:	2300      	movs	r3, #0
 800f446:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 800f448:	7bbb      	ldrb	r3, [r7, #14]
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7ff fc64 	bl	800ed18 <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 800f450:	4b2d      	ldr	r3, [pc, #180]	@ (800f508 <engineUpdate+0x25c>)
 800f452:	4a32      	ldr	r2, [pc, #200]	@ (800f51c <engineUpdate+0x270>)
 800f454:	61da      	str	r2, [r3, #28]
 800f456:	e01d      	b.n	800f494 <engineUpdate+0x1e8>
            } else
#endif // !LMIC_DISABLE_JOIN
            {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 800f458:	4b2b      	ldr	r3, [pc, #172]	@ (800f508 <engineUpdate+0x25c>)
 800f45a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800f45e:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 800f462:	d907      	bls.n	800f474 <engineUpdate+0x1c8>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn,
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 800f464:	bf00      	nop
 800f466:	e000      	b.n	800f46a <engineUpdate+0x1be>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 800f468:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 800f46a:	492d      	ldr	r1, [pc, #180]	@ (800f520 <engineUpdate+0x274>)
 800f46c:	482d      	ldr	r0, [pc, #180]	@ (800f524 <engineUpdate+0x278>)
 800f46e:	f000 fa75 	bl	800f95c <os_setCallback>
                    return;
 800f472:	e0b8      	b.n	800f5e6 <engineUpdate+0x33a>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 800f474:	4b24      	ldr	r3, [pc, #144]	@ (800f508 <engineUpdate+0x25c>)
 800f476:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d105      	bne.n	800f48a <engineUpdate+0x1de>
 800f47e:	4b22      	ldr	r3, [pc, #136]	@ (800f508 <engineUpdate+0x25c>)
 800f480:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f488:	d0ee      	beq.n	800f468 <engineUpdate+0x1bc>
                }
                buildDataFrame();
 800f48a:	f7ff f9ad 	bl	800e7e8 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 800f48e:	4b1e      	ldr	r3, [pc, #120]	@ (800f508 <engineUpdate+0x25c>)
 800f490:	4a25      	ldr	r2, [pc, #148]	@ (800f528 <engineUpdate+0x27c>)
 800f492:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 800f494:	7bfb      	ldrb	r3, [r7, #15]
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd f862 	bl	800c560 <updr2rps>
 800f49c:	4603      	mov	r3, r0
 800f49e:	461a      	mov	r2, r3
 800f4a0:	4b19      	ldr	r3, [pc, #100]	@ (800f508 <engineUpdate+0x25c>)
 800f4a2:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	f7fc fff3 	bl	800c494 <setCr>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	4b15      	ldr	r3, [pc, #84]	@ (800f508 <engineUpdate+0x25c>)
 800f4b4:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 800f4b6:	4a14      	ldr	r2, [pc, #80]	@ (800f508 <engineUpdate+0x25c>)
 800f4b8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ba:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 800f4bc:	4b12      	ldr	r3, [pc, #72]	@ (800f508 <engineUpdate+0x25c>)
 800f4be:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f4c2:	b21b      	sxth	r3, r3
 800f4c4:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 800f4c8:	b21b      	sxth	r3, r3
 800f4ca:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 800f4ce:	b21b      	sxth	r3, r3
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f508 <engineUpdate+0x25c>)
 800f4d4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 800f4d8:	6938      	ldr	r0, [r7, #16]
 800f4da:	f7fd ffab 	bl	800d434 <updateTx>
            reportEvent(EV_TXSTART);
 800f4de:	2011      	movs	r0, #17
 800f4e0:	f7fe f95e 	bl	800d7a0 <reportEvent>
            os_radio(RADIO_TX);
 800f4e4:	2001      	movs	r0, #1
 800f4e6:	f001 f97b 	bl	80107e0 <os_radio>
            return;
 800f4ea:	e07c      	b.n	800f5e6 <engineUpdate+0x33a>
        }
        #if LMIC_DEBUG_LEVEL > 1
            lmic_printf("%lu: Uplink delayed until %lu\n", os_getTime(), txbeg);
        #endif
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800f4ec:	4b06      	ldr	r3, [pc, #24]	@ (800f508 <engineUpdate+0x25c>)
 800f4ee:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f4f2:	f003 0302 	and.w	r3, r3, #2
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d069      	beq.n	800f5ce <engineUpdate+0x322>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d11d      	bne.n	800f53c <engineUpdate+0x290>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	3301      	adds	r3, #1
 800f504:	613b      	str	r3, [r7, #16]
 800f506:	e019      	b.n	800f53c <engineUpdate+0x290>
 800f508:	20000d48 	.word	0x20000d48
 800f50c:	08013fb4 	.word	0x08013fb4
 800f510:	08013f3c 	.word	0x08013f3c
 800f514:	00046500 	.word	0x00046500
 800f518:	0002ee00 	.word	0x0002ee00
 800f51c:	0800e6c1 	.word	0x0800e6c1
 800f520:	0800d7bf 	.word	0x0800d7bf
 800f524:	20000d5c 	.word	0x20000d5c
 800f528:	0800e7b9 	.word	0x0800e7b9
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800f52c:	4b2f      	ldr	r3, [pc, #188]	@ (800f5ec <engineUpdate+0x340>)
 800f52e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f532:	f003 0302 	and.w	r3, r3, #2
 800f536:	2b00      	cmp	r3, #0
 800f538:	d054      	beq.n	800f5e4 <engineUpdate+0x338>
            return;
    }

#if !defined(LMIC_DISABLE_BEACONS)
    // Are we pingable?
  checkrx:
 800f53a:	bf00      	nop
#if !defined(LMIC_DISABLE_PING)
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 800f53c:	4b2b      	ldr	r3, [pc, #172]	@ (800f5ec <engineUpdate+0x340>)
 800f53e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f542:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f546:	2b00      	cmp	r3, #0
 800f548:	d02e      	beq.n	800f5a8 <engineUpdate+0x2fc>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	3340      	adds	r3, #64	@ 0x40
 800f54e:	4619      	mov	r1, r3
 800f550:	4827      	ldr	r0, [pc, #156]	@ (800f5f0 <engineUpdate+0x344>)
 800f552:	f7fd fd01 	bl	800cf58 <rxschedNext>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d025      	beq.n	800f5a8 <engineUpdate+0x2fc>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 800f55c:	4b23      	ldr	r3, [pc, #140]	@ (800f5ec <engineUpdate+0x340>)
 800f55e:	f893 213b 	ldrb.w	r2, [r3, #315]	@ 0x13b
 800f562:	4b22      	ldr	r3, [pc, #136]	@ (800f5ec <engineUpdate+0x340>)
 800f564:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 800f566:	4b21      	ldr	r3, [pc, #132]	@ (800f5ec <engineUpdate+0x340>)
 800f568:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800f56c:	4a1f      	ldr	r2, [pc, #124]	@ (800f5ec <engineUpdate+0x340>)
 800f56e:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 800f570:	4b1e      	ldr	r3, [pc, #120]	@ (800f5ec <engineUpdate+0x340>)
 800f572:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800f576:	4a1d      	ldr	r2, [pc, #116]	@ (800f5ec <engineUpdate+0x340>)
 800f578:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 800f57a:	4b1c      	ldr	r3, [pc, #112]	@ (800f5ec <engineUpdate+0x340>)
 800f57c:	f893 3138 	ldrb.w	r3, [r3, #312]	@ 0x138
 800f580:	4618      	mov	r0, r3
 800f582:	f7fc ffff 	bl	800c584 <dndr2rps>
 800f586:	4603      	mov	r3, r0
 800f588:	461a      	mov	r2, r3
 800f58a:	4b18      	ldr	r3, [pc, #96]	@ (800f5ec <engineUpdate+0x340>)
 800f58c:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 800f58e:	4b17      	ldr	r3, [pc, #92]	@ (800f5ec <engineUpdate+0x340>)
 800f590:	2200      	movs	r2, #0
 800f592:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 800f596:	4b15      	ldr	r3, [pc, #84]	@ (800f5ec <engineUpdate+0x340>)
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	3b40      	subs	r3, #64	@ 0x40
 800f59c:	4a15      	ldr	r2, [pc, #84]	@ (800f5f4 <engineUpdate+0x348>)
 800f59e:	4619      	mov	r1, r3
 800f5a0:	4815      	ldr	r0, [pc, #84]	@ (800f5f8 <engineUpdate+0x34c>)
 800f5a2:	f000 fa09 	bl	800f9b8 <os_setTimedCallback>
            return;
 800f5a6:	e01e      	b.n	800f5e6 <engineUpdate+0x33a>
#endif // !LMIC_DISABLE_PING

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
        goto txdelay;

    setBcnRxParams();
 800f5a8:	f7fe f828 	bl	800d5fc <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 800f5ac:	4b0f      	ldr	r3, [pc, #60]	@ (800f5ec <engineUpdate+0x340>)
 800f5ae:	f893 218d 	ldrb.w	r2, [r3, #397]	@ 0x18d
 800f5b2:	4b0e      	ldr	r3, [pc, #56]	@ (800f5ec <engineUpdate+0x340>)
 800f5b4:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f5ec <engineUpdate+0x340>)
 800f5b8:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800f5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800f5ec <engineUpdate+0x340>)
 800f5be:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 800f5c0:	4b0a      	ldr	r3, [pc, #40]	@ (800f5ec <engineUpdate+0x340>)
 800f5c2:	4a0e      	ldr	r2, [pc, #56]	@ (800f5fc <engineUpdate+0x350>)
 800f5c4:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 800f5c6:	2002      	movs	r0, #2
 800f5c8:	f001 f90a 	bl	80107e0 <os_radio>
        return;
 800f5cc:	e00b      	b.n	800f5e6 <engineUpdate+0x33a>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 800f5ce:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	3b40      	subs	r3, #64	@ 0x40
 800f5d4:	4a0a      	ldr	r2, [pc, #40]	@ (800f600 <engineUpdate+0x354>)
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	4807      	ldr	r0, [pc, #28]	@ (800f5f8 <engineUpdate+0x34c>)
 800f5da:	f000 f9ed 	bl	800f9b8 <os_setTimedCallback>
 800f5de:	e002      	b.n	800f5e6 <engineUpdate+0x33a>
        return;
 800f5e0:	bf00      	nop
 800f5e2:	e000      	b.n	800f5e6 <engineUpdate+0x33a>
            return;
 800f5e4:	bf00      	nop
}
 800f5e6:	3718      	adds	r7, #24
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	20000d48 	.word	0x20000d48
 800f5f0:	20000e80 	.word	0x20000e80
 800f5f4:	0800f289 	.word	0x0800f289
 800f5f8:	20000d5c 	.word	0x20000d5c
 800f5fc:	0800f065 	.word	0x0800f065
 800f600:	0800d78d 	.word	0x0800d78d

0800f604 <LMIC_setDrTxpow>:
    LMIC.adrEnabled = enabled ? FCT_ADREN : 0;
}


//  Should we have/need an ext. API like this?
void LMIC_setDrTxpow (dr_t dr, int8_t txpow) {
 800f604:	b580      	push	{r7, lr}
 800f606:	b082      	sub	sp, #8
 800f608:	af00      	add	r7, sp, #0
 800f60a:	4603      	mov	r3, r0
 800f60c:	460a      	mov	r2, r1
 800f60e:	71fb      	strb	r3, [r7, #7]
 800f610:	4613      	mov	r3, r2
 800f612:	71bb      	strb	r3, [r7, #6]
    setDrTxpow(DRCHG_SET, dr, txpow);
 800f614:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	4619      	mov	r1, r3
 800f61c:	2000      	movs	r0, #0
 800f61e:	f7fd fd6b 	bl	800d0f8 <setDrTxpow>
}
 800f622:	bf00      	nop
 800f624:	3708      	adds	r7, #8
 800f626:	46bd      	mov	sp, r7
 800f628:	bd80      	pop	{r7, pc}
	...

0800f62c <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 800f62c:	b598      	push	{r3, r4, r7, lr}
 800f62e:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 800f630:	2000      	movs	r0, #0
 800f632:	f001 f8d5 	bl	80107e0 <os_radio>
    os_clearCallback(&LMIC.osjob);
 800f636:	4821      	ldr	r0, [pc, #132]	@ (800f6bc <LMIC_reset+0x90>)
 800f638:	f000 f97c 	bl	800f934 <os_clearCallback>

    os_clearMem((uint8_t*)&LMIC,SIZEOFEXPR(LMIC));
 800f63c:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 800f640:	2100      	movs	r1, #0
 800f642:	481f      	ldr	r0, [pc, #124]	@ (800f6c0 <LMIC_reset+0x94>)
 800f644:	f002 fa8e 	bl	8011b64 <memset>
    LMIC.devaddr      =  0;
 800f648:	4b1d      	ldr	r3, [pc, #116]	@ (800f6c0 <LMIC_reset+0x94>)
 800f64a:	2200      	movs	r2, #0
 800f64c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    LMIC.devNonce     =  os_getRndU2();
 800f650:	f000 ffb2 	bl	80105b8 <radio_rand1>
 800f654:	4603      	mov	r3, r0
 800f656:	021b      	lsls	r3, r3, #8
 800f658:	b21c      	sxth	r4, r3
 800f65a:	f000 ffad 	bl	80105b8 <radio_rand1>
 800f65e:	4603      	mov	r3, r0
 800f660:	b21b      	sxth	r3, r3
 800f662:	4323      	orrs	r3, r4
 800f664:	b21b      	sxth	r3, r3
 800f666:	b29a      	uxth	r2, r3
 800f668:	4b15      	ldr	r3, [pc, #84]	@ (800f6c0 <LMIC_reset+0x94>)
 800f66a:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
    LMIC.opmode       =  OP_NONE;
 800f66e:	4b14      	ldr	r3, [pc, #80]	@ (800f6c0 <LMIC_reset+0x94>)
 800f670:	2200      	movs	r2, #0
 800f672:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 800f676:	4b12      	ldr	r3, [pc, #72]	@ (800f6c0 <LMIC_reset+0x94>)
 800f678:	2200      	movs	r2, #0
 800f67a:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 800f67e:	4b10      	ldr	r3, [pc, #64]	@ (800f6c0 <LMIC_reset+0x94>)
 800f680:	2280      	movs	r2, #128	@ 0x80
 800f682:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 800f686:	4b0e      	ldr	r3, [pc, #56]	@ (800f6c0 <LMIC_reset+0x94>)
 800f688:	2200      	movs	r2, #0
 800f68a:	f883 212f 	strb.w	r2, [r3, #303]	@ 0x12f
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 800f68e:	4b0c      	ldr	r3, [pc, #48]	@ (800f6c0 <LMIC_reset+0x94>)
 800f690:	4a0c      	ldr	r2, [pc, #48]	@ (800f6c4 <LMIC_reset+0x98>)
 800f692:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    LMIC.rxDelay      =  DELAY_DNW1;
 800f696:	4b0a      	ldr	r3, [pc, #40]	@ (800f6c0 <LMIC_reset+0x94>)
 800f698:	2201      	movs	r2, #1
 800f69a:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
#if !defined(LMIC_DISABLE_PING)
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 800f69e:	4b08      	ldr	r3, [pc, #32]	@ (800f6c0 <LMIC_reset+0x94>)
 800f6a0:	4a08      	ldr	r2, [pc, #32]	@ (800f6c4 <LMIC_reset+0x98>)
 800f6a2:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
    LMIC.ping.dr      =  DR_PING;   // ditto
 800f6a6:	4b06      	ldr	r3, [pc, #24]	@ (800f6c0 <LMIC_reset+0x94>)
 800f6a8:	2203      	movs	r2, #3
 800f6aa:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    LMIC.ping.intvExp =  0xFF;
 800f6ae:	4b04      	ldr	r3, [pc, #16]	@ (800f6c0 <LMIC_reset+0x94>)
 800f6b0:	22ff      	movs	r2, #255	@ 0xff
 800f6b2:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
#if !defined(LMIC_DISABLE_PING)
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
#endif // !LMIC_DISABLE_PING
}
 800f6b6:	bf00      	nop
 800f6b8:	bd98      	pop	{r3, r4, r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20000d5c 	.word	0x20000d5c
 800f6c0:	20000d48 	.word	0x20000d48
 800f6c4:	36fab500 	.word	0x36fab500

0800f6c8 <LMIC_init>:


void LMIC_init (void) {
 800f6c8:	b480      	push	{r7}
 800f6ca:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 800f6cc:	4b04      	ldr	r3, [pc, #16]	@ (800f6e0 <LMIC_init+0x18>)
 800f6ce:	2240      	movs	r2, #64	@ 0x40
 800f6d0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 800f6d4:	bf00      	nop
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	20000d48 	.word	0x20000d48

0800f6e4 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 800f6e8:	4b0b      	ldr	r3, [pc, #44]	@ (800f718 <LMIC_setTxData+0x34>)
 800f6ea:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f6ee:	f043 0308 	orr.w	r3, r3, #8
 800f6f2:	b29a      	uxth	r2, r3
 800f6f4:	4b08      	ldr	r3, [pc, #32]	@ (800f718 <LMIC_setTxData+0x34>)
 800f6f6:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 800f6fa:	4b07      	ldr	r3, [pc, #28]	@ (800f718 <LMIC_setTxData+0x34>)
 800f6fc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f700:	f003 0304 	and.w	r3, r3, #4
 800f704:	2b00      	cmp	r3, #0
 800f706:	d103      	bne.n	800f710 <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 800f708:	4b03      	ldr	r3, [pc, #12]	@ (800f718 <LMIC_setTxData+0x34>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    engineUpdate();
 800f710:	f7ff fdcc 	bl	800f2ac <engineUpdate>
}
 800f714:	bf00      	nop
 800f716:	bd80      	pop	{r7, pc}
 800f718:	20000d48 	.word	0x20000d48

0800f71c <LMIC_setTxData2>:


//
int LMIC_setTxData2 (uint8_t port, uint8_t *data, uint8_t dlen, uint8_t confirmed) {
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6039      	str	r1, [r7, #0]
 800f724:	4611      	mov	r1, r2
 800f726:	461a      	mov	r2, r3
 800f728:	4603      	mov	r3, r0
 800f72a:	71fb      	strb	r3, [r7, #7]
 800f72c:	460b      	mov	r3, r1
 800f72e:	71bb      	strb	r3, [r7, #6]
 800f730:	4613      	mov	r3, r2
 800f732:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 800f734:	79bb      	ldrb	r3, [r7, #6]
 800f736:	2b34      	cmp	r3, #52	@ 0x34
 800f738:	d902      	bls.n	800f740 <LMIC_setTxData2+0x24>
        return -2;
 800f73a:	f06f 0301 	mvn.w	r3, #1
 800f73e:	e017      	b.n	800f770 <LMIC_setTxData2+0x54>
    if( data != (uint8_t*)0)
 800f740:	683b      	ldr	r3, [r7, #0]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d005      	beq.n	800f752 <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 800f746:	79bb      	ldrb	r3, [r7, #6]
 800f748:	461a      	mov	r2, r3
 800f74a:	6839      	ldr	r1, [r7, #0]
 800f74c:	480a      	ldr	r0, [pc, #40]	@ (800f778 <LMIC_setTxData2+0x5c>)
 800f74e:	f002 fac6 	bl	8011cde <memcpy>
    LMIC.pendTxConf = confirmed;
 800f752:	4a0a      	ldr	r2, [pc, #40]	@ (800f77c <LMIC_setTxData2+0x60>)
 800f754:	797b      	ldrb	r3, [r7, #5]
 800f756:	f882 30bd 	strb.w	r3, [r2, #189]	@ 0xbd
    LMIC.pendTxPort = port;
 800f75a:	4a08      	ldr	r2, [pc, #32]	@ (800f77c <LMIC_setTxData2+0x60>)
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
    LMIC.pendTxLen  = dlen;
 800f762:	4a06      	ldr	r2, [pc, #24]	@ (800f77c <LMIC_setTxData2+0x60>)
 800f764:	79bb      	ldrb	r3, [r7, #6]
 800f766:	f882 30be 	strb.w	r3, [r2, #190]	@ 0xbe
    LMIC_setTxData();
 800f76a:	f7ff ffbb 	bl	800f6e4 <LMIC_setTxData>
    return 0;
 800f76e:	2300      	movs	r3, #0
}
 800f770:	4618      	mov	r0, r3
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}
 800f778:	20000e07 	.word	0x20000e07
 800f77c:	20000d48 	.word	0x20000d48

0800f780 <LMIC_setSession>:
//!    to ensure that different devices use different numbers with high probability.
//! \param nwkKey  the 16 byte network session key used for message integrity.
//!     If NULL the caller has copied the key into `LMIC.nwkKey` before.
//! \param artKey  the 16 byte application router session key used for message confidentiality.
//!     If NULL the caller has copied the key into `LMIC.artKey` before.
void LMIC_setSession (uint32_t netid, devaddr_t devaddr, uint8_t *nwkKey, uint8_t *artKey) {
 800f780:	b590      	push	{r4, r7, lr}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	603b      	str	r3, [r7, #0]
    LMIC.netid = netid;
 800f78e:	4a21      	ldr	r2, [pc, #132]	@ (800f814 <LMIC_setSession+0x94>)
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    LMIC.devaddr = devaddr;
 800f796:	4a1f      	ldr	r2, [pc, #124]	@ (800f814 <LMIC_setSession+0x94>)
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    if( nwkKey != (uint8_t*)0)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d00a      	beq.n	800f7ba <LMIC_setSession+0x3a>
        os_copyMem(LMIC.nwkKey, nwkKey, 16);
 800f7a4:	4b1b      	ldr	r3, [pc, #108]	@ (800f814 <LMIC_setSession+0x94>)
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	33f6      	adds	r3, #246	@ 0xf6
 800f7aa:	6814      	ldr	r4, [r2, #0]
 800f7ac:	6850      	ldr	r0, [r2, #4]
 800f7ae:	6891      	ldr	r1, [r2, #8]
 800f7b0:	68d2      	ldr	r2, [r2, #12]
 800f7b2:	601c      	str	r4, [r3, #0]
 800f7b4:	6058      	str	r0, [r3, #4]
 800f7b6:	6099      	str	r1, [r3, #8]
 800f7b8:	60da      	str	r2, [r3, #12]
    if( artKey != (uint8_t*)0)
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00b      	beq.n	800f7d8 <LMIC_setSession+0x58>
        os_copyMem(LMIC.artKey, artKey, 16);
 800f7c0:	4b14      	ldr	r3, [pc, #80]	@ (800f814 <LMIC_setSession+0x94>)
 800f7c2:	683a      	ldr	r2, [r7, #0]
 800f7c4:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 800f7c8:	6814      	ldr	r4, [r2, #0]
 800f7ca:	6850      	ldr	r0, [r2, #4]
 800f7cc:	6891      	ldr	r1, [r2, #8]
 800f7ce:	68d2      	ldr	r2, [r2, #12]
 800f7d0:	601c      	str	r4, [r3, #0]
 800f7d2:	6058      	str	r0, [r3, #4]
 800f7d4:	6099      	str	r1, [r3, #8]
 800f7d6:	60da      	str	r2, [r3, #12]

#if defined(LMIC_EU868)
    initDefaultChannels(0);
 800f7d8:	2000      	movs	r0, #0
 800f7da:	f7fd fcbb 	bl	800d154 <initDefaultChannels>
#endif

    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI);
 800f7de:	4b0d      	ldr	r3, [pc, #52]	@ (800f814 <LMIC_setSession+0x94>)
 800f7e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f7e4:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 800f7e8:	f023 0302 	bic.w	r3, r3, #2
 800f7ec:	b29a      	uxth	r2, r3
 800f7ee:	4b09      	ldr	r3, [pc, #36]	@ (800f814 <LMIC_setSession+0x94>)
 800f7f0:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |= OP_NEXTCHNL;
 800f7f4:	4b07      	ldr	r3, [pc, #28]	@ (800f814 <LMIC_setSession+0x94>)
 800f7f6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800f7fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	4b04      	ldr	r3, [pc, #16]	@ (800f814 <LMIC_setSession+0x94>)
 800f802:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    stateJustJoined();
 800f806:	f7fd ffe9 	bl	800d7dc <stateJustJoined>
    DO_DEVDB(LMIC.devaddr, devaddr);
    DO_DEVDB(LMIC.nwkKey,  nwkkey);
    DO_DEVDB(LMIC.artKey,  artkey);
    DO_DEVDB(LMIC.seqnoUp, seqnoUp);
    DO_DEVDB(LMIC.seqnoDn, seqnoDn);
}
 800f80a:	bf00      	nop
 800f80c:	3714      	adds	r7, #20
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd90      	pop	{r4, r7, pc}
 800f812:	bf00      	nop
 800f814:	20000d48 	.word	0x20000d48

0800f818 <LMIC_setLinkCheckMode>:
// connectivity with a span of UP frames. If this no such prove is coming
// then the datarate is lowered and a LINK_DEAD event is generated.
// This mode can be disabled and no connectivity prove (ADRACKREQ) is requested
// nor is the datarate changed.
// This must be called only if a session is established (e.g. after EV_JOINED)
void LMIC_setLinkCheckMode (bool enabled) {
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	4603      	mov	r3, r0
 800f820:	71fb      	strb	r3, [r7, #7]
    LMIC.adrChanged = 0;
 800f822:	4b0a      	ldr	r3, [pc, #40]	@ (800f84c <LMIC_setLinkCheckMode+0x34>)
 800f824:	2200      	movs	r2, #0
 800f826:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    LMIC.adrAckReq = enabled ? LINK_CHECK_INIT : LINK_CHECK_OFF;
 800f82a:	79fb      	ldrb	r3, [r7, #7]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d002      	beq.n	800f836 <LMIC_setLinkCheckMode+0x1e>
 800f830:	f06f 020b 	mvn.w	r2, #11
 800f834:	e001      	b.n	800f83a <LMIC_setLinkCheckMode+0x22>
 800f836:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800f83a:	4b04      	ldr	r3, [pc, #16]	@ (800f84c <LMIC_setLinkCheckMode+0x34>)
 800f83c:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
}
 800f840:	bf00      	nop
 800f842:	370c      	adds	r7, #12
 800f844:	46bd      	mov	sp, r7
 800f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84a:	4770      	bx	lr
 800f84c:	20000d48 	.word	0x20000d48

0800f850 <LMIC_setClockError>:

// Sets the max clock error to compensate for (defaults to 0, which
// allows for +/- 640 at SF7BW250). MAX_CLOCK_ERROR represents +/-100%,
// so e.g. for a +/-1% error you would pass MAX_CLOCK_ERROR * 1 / 100.
void LMIC_setClockError(uint16_t error) {
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	4603      	mov	r3, r0
 800f858:	80fb      	strh	r3, [r7, #6]
    LMIC.clockError = error;
 800f85a:	4a05      	ldr	r2, [pc, #20]	@ (800f870 <LMIC_setClockError+0x20>)
 800f85c:	88fb      	ldrh	r3, [r7, #6]
 800f85e:	f8a2 30ba 	strh.w	r3, [r2, #186]	@ 0xba
}
 800f862:	bf00      	nop
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	20000d48 	.word	0x20000d48

0800f874 <os_jobIsTimed>:
};
TYPEDEF_xref2osjob_t;

// determine whether a job is timed or immediate. os_setTimedCallback()
// must treat incoming == 0 as being 1 instead.
static inline int os_jobIsTimed(xref2osjob_t job) {
 800f874:	b480      	push	{r7}
 800f876:	b083      	sub	sp, #12
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
    return (job->deadline != 0);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	bf14      	ite	ne
 800f884:	2301      	movne	r3, #1
 800f886:	2300      	moveq	r3, #0
 800f888:	b2db      	uxtb	r3, r3
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	370c      	adds	r7, #12
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
	...

0800f898 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 800f898:	b580      	push	{r7, lr}
 800f89a:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 800f89c:	2208      	movs	r2, #8
 800f89e:	2100      	movs	r1, #0
 800f8a0:	4805      	ldr	r0, [pc, #20]	@ (800f8b8 <os_init+0x20>)
 800f8a2:	f002 f95f 	bl	8011b64 <memset>
    hal_init();
 800f8a6:	f001 fa6f 	bl	8010d88 <hal_init>
    radio_init();
 800f8aa:	f000 fdc9 	bl	8010440 <radio_init>
    LMIC_init();
 800f8ae:	f7ff ff0b 	bl	800f6c8 <LMIC_init>
}
 800f8b2:	bf00      	nop
 800f8b4:	bd80      	pop	{r7, pc}
 800f8b6:	bf00      	nop
 800f8b8:	20000ef8 	.word	0x20000ef8

0800f8bc <os_getTime>:

ostime_t os_getTime () {
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	af00      	add	r7, sp, #0
    return hal_ticks();
 800f8c0:	f001 f976 	bl	8010bb0 <hal_ticks>
 800f8c4:	4603      	mov	r3, r0
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	bd80      	pop	{r7, pc}

0800f8ca <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 800f8ca:	b480      	push	{r7}
 800f8cc:	b083      	sub	sp, #12
 800f8ce:	af00      	add	r7, sp, #0
 800f8d0:	6078      	str	r0, [r7, #4]
 800f8d2:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 800f8d4:	e00d      	b.n	800f8f2 <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	683a      	ldr	r2, [r7, #0]
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d105      	bne.n	800f8ec <unlinkjob+0x22>
            *pnext = job->next;
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	681a      	ldr	r2, [r3, #0]
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	601a      	str	r2, [r3, #0]
            return 1;
 800f8e8:	2301      	movs	r3, #1
 800f8ea:	e007      	b.n	800f8fc <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	607b      	str	r3, [r7, #4]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d1ed      	bne.n	800f8d6 <unlinkjob+0xc>
        }
    }
    return 0;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <getJobQueue>:
static osjob_t** getJobQueue(osjob_t* job) {
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
    return os_jobIsTimed(job) ? &OS.scheduledjobs : &OS.runnablejobs;
 800f910:	6878      	ldr	r0, [r7, #4]
 800f912:	f7ff ffaf 	bl	800f874 <os_jobIsTimed>
 800f916:	4603      	mov	r3, r0
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d001      	beq.n	800f920 <getJobQueue+0x18>
 800f91c:	4b03      	ldr	r3, [pc, #12]	@ (800f92c <getJobQueue+0x24>)
 800f91e:	e000      	b.n	800f922 <getJobQueue+0x1a>
 800f920:	4b03      	ldr	r3, [pc, #12]	@ (800f930 <getJobQueue+0x28>)
}
 800f922:	4618      	mov	r0, r3
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	20000ef8 	.word	0x20000ef8
 800f930:	20000efc 	.word	0x20000efc

0800f934 <os_clearCallback>:


// clear scheduled job
void os_clearCallback (osjob_t* job) {
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 800f93c:	f001 f9f6 	bl	8010d2c <hal_disableIRQs>
    unlinkjob(getJobQueue(job), job);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff ffe1 	bl	800f908 <getJobQueue>
 800f946:	4603      	mov	r3, r0
 800f948:	6879      	ldr	r1, [r7, #4]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7ff ffbd 	bl	800f8ca <unlinkjob>
    //uint8_t res = unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
    hal_enableIRQs();
 800f950:	f001 f9fc 	bl	8010d4c <hal_enableIRQs>

}
 800f954:	bf00      	nop
 800f956:	3708      	adds	r7, #8
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 800f966:	f001 f9e1 	bl	8010d2c <hal_disableIRQs>
    // remove if job was already queued

    unlinkjob(getJobQueue(job), job);//unlinkjob(&OS.runnablejobs, job);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f7ff ffcc 	bl	800f908 <getJobQueue>
 800f970:	4603      	mov	r3, r0
 800f972:	6879      	ldr	r1, [r7, #4]
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff ffa8 	bl	800f8ca <unlinkjob>
    // fill-in job
    job->next = NULL;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	601a      	str	r2, [r3, #0]
    job->deadline = 0;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	605a      	str	r2, [r3, #4]
    job->func = cb;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	609a      	str	r2, [r3, #8]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 800f98c:	4b09      	ldr	r3, [pc, #36]	@ (800f9b4 <os_setCallback+0x58>)
 800f98e:	60fb      	str	r3, [r7, #12]
 800f990:	e002      	b.n	800f998 <os_setCallback+0x3c>
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d1f8      	bne.n	800f992 <os_setCallback+0x36>
    *pnext = job;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	687a      	ldr	r2, [r7, #4]
 800f9a4:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 800f9a6:	f001 f9d1 	bl	8010d4c <hal_enableIRQs>
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p ASAP\n", os_getTime(), job, cb);
    #endif
}
 800f9aa:	bf00      	nop
 800f9ac:	3710      	adds	r7, #16
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20000efc 	.word	0x20000efc

0800f9b8 <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b086      	sub	sp, #24
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	60f8      	str	r0, [r7, #12]
 800f9c0:	60b9      	str	r1, [r7, #8]
 800f9c2:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    if (time == 0)
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d101      	bne.n	800f9ce <os_setTimedCallback+0x16>
            time = 1;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	60bb      	str	r3, [r7, #8]
    hal_disableIRQs();
 800f9ce:	f001 f9ad 	bl	8010d2c <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(getJobQueue(job), job);
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f7ff ff98 	bl	800f908 <getJobQueue>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	68f9      	ldr	r1, [r7, #12]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7ff ff74 	bl	800f8ca <unlinkjob>
    // fill-in job
    job->next = NULL;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	601a      	str	r2, [r3, #0]
    job->deadline = time;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	68ba      	ldr	r2, [r7, #8]
 800f9ec:	605a      	str	r2, [r3, #4]
    job->func = cb;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	609a      	str	r2, [r3, #8]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 800f9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800fa30 <os_setTimedCallback+0x78>)
 800f9f6:	617b      	str	r3, [r7, #20]
 800f9f8:	e00d      	b.n	800fa16 <os_setTimedCallback+0x5e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	685b      	ldr	r3, [r3, #4]
 800fa00:	68ba      	ldr	r2, [r7, #8]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d004      	beq.n	800fa10 <os_setTimedCallback+0x58>
            // enqueue before next element and stop
            job->next = *pnext;
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	601a      	str	r2, [r3, #0]
            break;
 800fa0e:	e006      	b.n	800fa1e <os_setTimedCallback+0x66>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	617b      	str	r3, [r7, #20]
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1ed      	bne.n	800f9fa <os_setTimedCallback+0x42>
        }
    }
    *pnext = job;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 800fa24:	f001 f992 	bl	8010d4c <hal_enableIRQs>
    #if LMIC_DEBUG_LEVEL > 1
        lmic_printf("%lu: Scheduled job %p, cb %p at %lu\n", os_getTime(), job, cb, time);
    #endif
}
 800fa28:	bf00      	nop
 800fa2a:	3718      	adds	r7, #24
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}
 800fa30:	20000ef8 	.word	0x20000ef8

0800fa34 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 800fa34:	b580      	push	{r7, lr}
 800fa36:	af00      	add	r7, sp, #0
    while(1) {
        os_runloop_once();
 800fa38:	f000 f802 	bl	800fa40 <os_runloop_once>
 800fa3c:	e7fc      	b.n	800fa38 <os_runloop+0x4>
	...

0800fa40 <os_runloop_once>:
    }
}

void os_runloop_once() {
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
    osjob_t* j = NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	607b      	str	r3, [r7, #4]
    hal_disableIRQs();
 800fa4a:	f001 f96f 	bl	8010d2c <hal_disableIRQs>
    // check for runnable jobs
    if(OS.runnablejobs) {
 800fa4e:	4b18      	ldr	r3, [pc, #96]	@ (800fab0 <os_runloop_once+0x70>)
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d007      	beq.n	800fa66 <os_runloop_once+0x26>
        j = OS.runnablejobs;
 800fa56:	4b16      	ldr	r3, [pc, #88]	@ (800fab0 <os_runloop_once+0x70>)
 800fa58:	685b      	ldr	r3, [r3, #4]
 800fa5a:	607b      	str	r3, [r7, #4]
        OS.runnablejobs = j->next;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a13      	ldr	r2, [pc, #76]	@ (800fab0 <os_runloop_once+0x70>)
 800fa62:	6053      	str	r3, [r2, #4]
 800fa64:	e016      	b.n	800fa94 <os_runloop_once+0x54>
    } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 800fa66:	4b12      	ldr	r3, [pc, #72]	@ (800fab0 <os_runloop_once+0x70>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d010      	beq.n	800fa90 <os_runloop_once+0x50>
 800fa6e:	4b10      	ldr	r3, [pc, #64]	@ (800fab0 <os_runloop_once+0x70>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	4618      	mov	r0, r3
 800fa76:	f001 f8f9 	bl	8010c6c <hal_checkTimer>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d007      	beq.n	800fa90 <os_runloop_once+0x50>
        j = OS.scheduledjobs;
 800fa80:	4b0b      	ldr	r3, [pc, #44]	@ (800fab0 <os_runloop_once+0x70>)
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	607b      	str	r3, [r7, #4]
        OS.scheduledjobs = j->next;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a09      	ldr	r2, [pc, #36]	@ (800fab0 <os_runloop_once+0x70>)
 800fa8c:	6013      	str	r3, [r2, #0]
 800fa8e:	e001      	b.n	800fa94 <os_runloop_once+0x54>
    } else { // nothing pending
       hal_sleep(); // wake by irq (timer already restarted)
 800fa90:	f001 f970 	bl	8010d74 <hal_sleep>
    }
    hal_enableIRQs();
 800fa94:	f001 f95a 	bl	8010d4c <hal_enableIRQs>
    if(j) { // run job callback
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d003      	beq.n	800faa6 <os_runloop_once+0x66>
        j->func(j);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	6878      	ldr	r0, [r7, #4]
 800faa4:	4798      	blx	r3
    }
}
 800faa6:	bf00      	nop
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}
 800faae:	bf00      	nop
 800fab0:	20000ef8 	.word	0x20000ef8

0800fab4 <writeReg>:
#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif


static void writeReg (uint8_t addr, uint8_t data ) {
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	4603      	mov	r3, r0
 800fabc:	460a      	mov	r2, r1
 800fabe:	71fb      	strb	r3, [r7, #7]
 800fac0:	4613      	mov	r3, r2
 800fac2:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 800fac4:	2000      	movs	r0, #0
 800fac6:	f000 ffd7 	bl	8010a78 <hal_pin_nss>
    SPIWrite8bit(addr | 0x80);
 800faca:	79fb      	ldrb	r3, [r7, #7]
 800facc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	4618      	mov	r0, r3
 800fad4:	f001 f83c 	bl	8010b50 <SPIWrite8bit>
    SPIWrite8bit(data);
 800fad8:	79bb      	ldrb	r3, [r7, #6]
 800fada:	4618      	mov	r0, r3
 800fadc:	f001 f838 	bl	8010b50 <SPIWrite8bit>
    hal_pin_nss(1);
 800fae0:	2001      	movs	r0, #1
 800fae2:	f000 ffc9 	bl	8010a78 <hal_pin_nss>
}
 800fae6:	bf00      	nop
 800fae8:	3708      	adds	r7, #8
 800faea:	46bd      	mov	sp, r7
 800faec:	bd80      	pop	{r7, pc}

0800faee <readReg>:

static uint8_t readReg (uint8_t addr) {
 800faee:	b580      	push	{r7, lr}
 800faf0:	b084      	sub	sp, #16
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	4603      	mov	r3, r0
 800faf6:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 800faf8:	2000      	movs	r0, #0
 800fafa:	f000 ffbd 	bl	8010a78 <hal_pin_nss>
    SPIWrite8bit(addr & 0x7F);
 800fafe:	79fb      	ldrb	r3, [r7, #7]
 800fb00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	4618      	mov	r0, r3
 800fb08:	f001 f822 	bl	8010b50 <SPIWrite8bit>
    uint8_t val = SPIRead8bit(0x00);
 800fb0c:	2000      	movs	r0, #0
 800fb0e:	f001 f833 	bl	8010b78 <SPIRead8bit>
 800fb12:	4603      	mov	r3, r0
 800fb14:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 800fb16:	2001      	movs	r0, #1
 800fb18:	f000 ffae 	bl	8010a78 <hal_pin_nss>
    return val;
 800fb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <writeBuf>:

static void writeBuf (uint8_t addr, uint8_t *buf, uint8_t len) {
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b084      	sub	sp, #16
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	6039      	str	r1, [r7, #0]
 800fb30:	71fb      	strb	r3, [r7, #7]
 800fb32:	4613      	mov	r3, r2
 800fb34:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 800fb36:	2000      	movs	r0, #0
 800fb38:	f000 ff9e 	bl	8010a78 <hal_pin_nss>
    SPIWrite8bit(addr | 0x80);
 800fb3c:	79fb      	ldrb	r3, [r7, #7]
 800fb3e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	4618      	mov	r0, r3
 800fb46:	f001 f803 	bl	8010b50 <SPIWrite8bit>
    for (uint8_t i=0; i<len; i++) {
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	73fb      	strb	r3, [r7, #15]
 800fb4e:	e009      	b.n	800fb64 <writeBuf+0x3e>
    	SPIWrite8bit(buf[i]);
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	4413      	add	r3, r2
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	4618      	mov	r0, r3
 800fb5a:	f000 fff9 	bl	8010b50 <SPIWrite8bit>
    for (uint8_t i=0; i<len; i++) {
 800fb5e:	7bfb      	ldrb	r3, [r7, #15]
 800fb60:	3301      	adds	r3, #1
 800fb62:	73fb      	strb	r3, [r7, #15]
 800fb64:	7bfa      	ldrb	r2, [r7, #15]
 800fb66:	79bb      	ldrb	r3, [r7, #6]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d3f1      	bcc.n	800fb50 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 800fb6c:	2001      	movs	r0, #1
 800fb6e:	f000 ff83 	bl	8010a78 <hal_pin_nss>
}
 800fb72:	bf00      	nop
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <readBuf>:

static void readBuf (uint8_t addr, uint8_t *buf, uint8_t len) {
 800fb7a:	b590      	push	{r4, r7, lr}
 800fb7c:	b085      	sub	sp, #20
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	4603      	mov	r3, r0
 800fb82:	6039      	str	r1, [r7, #0]
 800fb84:	71fb      	strb	r3, [r7, #7]
 800fb86:	4613      	mov	r3, r2
 800fb88:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	f000 ff74 	bl	8010a78 <hal_pin_nss>
    SPIWrite8bit(addr & 0x7F);
 800fb90:	79fb      	ldrb	r3, [r7, #7]
 800fb92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f000 ffd9 	bl	8010b50 <SPIWrite8bit>
    for (uint8_t i=0; i<len; i++) {
 800fb9e:	2300      	movs	r3, #0
 800fba0:	73fb      	strb	r3, [r7, #15]
 800fba2:	e00a      	b.n	800fbba <readBuf+0x40>
        buf[i] = SPIRead8bit(0x00);
 800fba4:	7bfb      	ldrb	r3, [r7, #15]
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	18d4      	adds	r4, r2, r3
 800fbaa:	2000      	movs	r0, #0
 800fbac:	f000 ffe4 	bl	8010b78 <SPIRead8bit>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<len; i++) {
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	73fb      	strb	r3, [r7, #15]
 800fbba:	7bfa      	ldrb	r2, [r7, #15]
 800fbbc:	79bb      	ldrb	r3, [r7, #6]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d3f0      	bcc.n	800fba4 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 800fbc2:	2001      	movs	r0, #1
 800fbc4:	f000 ff58 	bl	8010a78 <hal_pin_nss>
}
 800fbc8:	bf00      	nop
 800fbca:	3714      	adds	r7, #20
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd90      	pop	{r4, r7, pc}

0800fbd0 <opmode>:

static void opmode (uint8_t mode) {
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 800fbda:	2001      	movs	r0, #1
 800fbdc:	f7ff ff87 	bl	800faee <readReg>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	b25b      	sxtb	r3, r3
 800fbe4:	f023 0307 	bic.w	r3, r3, #7
 800fbe8:	b25a      	sxtb	r2, r3
 800fbea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fbee:	4313      	orrs	r3, r2
 800fbf0:	b25b      	sxtb	r3, r3
 800fbf2:	b2db      	uxtb	r3, r3
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	2001      	movs	r0, #1
 800fbf8:	f7ff ff5c 	bl	800fab4 <writeReg>
}
 800fbfc:	bf00      	nop
 800fbfe:	3708      	adds	r7, #8
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <opmodeLora>:

static void opmodeLora() {
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
    uint8_t u = OPMODE_LORA;
 800fc0a:	2380      	movs	r3, #128	@ 0x80
 800fc0c:	71fb      	strb	r3, [r7, #7]
#ifdef LMIC_SX1276
    u |= 0x8;   // TBD: sx1276 high freq
 800fc0e:	79fb      	ldrb	r3, [r7, #7]
 800fc10:	f043 0308 	orr.w	r3, r3, #8
 800fc14:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 800fc16:	79fb      	ldrb	r3, [r7, #7]
 800fc18:	4619      	mov	r1, r3
 800fc1a:	2001      	movs	r0, #1
 800fc1c:	f7ff ff4a 	bl	800fab4 <writeReg>
}
 800fc20:	bf00      	nop
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}

0800fc28 <opmodeFSK>:

static void opmodeFSK() {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b082      	sub	sp, #8
 800fc2c:	af00      	add	r7, sp, #0
    uint8_t u = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	71fb      	strb	r3, [r7, #7]
#ifdef LMIC_SX1276
    u |= 0x8;   // TBD: sx1276 high freq
 800fc32:	79fb      	ldrb	r3, [r7, #7]
 800fc34:	f043 0308 	orr.w	r3, r3, #8
 800fc38:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 800fc3a:	79fb      	ldrb	r3, [r7, #7]
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	2001      	movs	r0, #1
 800fc40:	f7ff ff38 	bl	800fab4 <writeReg>
}
 800fc44:	bf00      	nop
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 800fc52:	4b56      	ldr	r3, [pc, #344]	@ (800fdac <configLoraModem+0x160>)
 800fc54:	89db      	ldrh	r3, [r3, #14]
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fc fbe8 	bl	800c42c <getSf>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	713b      	strb	r3, [r7, #4]

#ifdef LMIC_SX1276
        uint8_t mc1 = 0, mc2 = 0, mc3 = 0;
 800fc60:	2300      	movs	r3, #0
 800fc62:	71fb      	strb	r3, [r7, #7]
 800fc64:	2300      	movs	r3, #0
 800fc66:	71bb      	strb	r3, [r7, #6]
 800fc68:	2300      	movs	r3, #0
 800fc6a:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 800fc6c:	4b4f      	ldr	r3, [pc, #316]	@ (800fdac <configLoraModem+0x160>)
 800fc6e:	89db      	ldrh	r3, [r3, #14]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7fc fbeb 	bl	800c44c <getBw>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b02      	cmp	r3, #2
 800fc7a:	d010      	beq.n	800fc9e <configLoraModem+0x52>
 800fc7c:	2b02      	cmp	r3, #2
 800fc7e:	dc13      	bgt.n	800fca8 <configLoraModem+0x5c>
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d002      	beq.n	800fc8a <configLoraModem+0x3e>
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d005      	beq.n	800fc94 <configLoraModem+0x48>
 800fc88:	e00e      	b.n	800fca8 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800fc90:	71fb      	strb	r3, [r7, #7]
 800fc92:	e00e      	b.n	800fcb2 <configLoraModem+0x66>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 800fc94:	79fb      	ldrb	r3, [r7, #7]
 800fc96:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fc9a:	71fb      	strb	r3, [r7, #7]
 800fc9c:	e009      	b.n	800fcb2 <configLoraModem+0x66>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 800fca4:	71fb      	strb	r3, [r7, #7]
 800fca6:	e004      	b.n	800fcb2 <configLoraModem+0x66>
        default:
            ASSERT(0);
 800fca8:	f240 1159 	movw	r1, #345	@ 0x159
 800fcac:	4840      	ldr	r0, [pc, #256]	@ (800fdb0 <configLoraModem+0x164>)
 800fcae:	f001 f883 	bl	8010db8 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 800fcb2:	4b3e      	ldr	r3, [pc, #248]	@ (800fdac <configLoraModem+0x160>)
 800fcb4:	89db      	ldrh	r3, [r3, #14]
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f7fc fbda 	bl	800c470 <getCr>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b03      	cmp	r3, #3
 800fcc0:	d81e      	bhi.n	800fd00 <configLoraModem+0xb4>
 800fcc2:	a201      	add	r2, pc, #4	@ (adr r2, 800fcc8 <configLoraModem+0x7c>)
 800fcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc8:	0800fcd9 	.word	0x0800fcd9
 800fccc:	0800fce3 	.word	0x0800fce3
 800fcd0:	0800fced 	.word	0x0800fced
 800fcd4:	0800fcf7 	.word	0x0800fcf7
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 800fcd8:	79fb      	ldrb	r3, [r7, #7]
 800fcda:	f043 0302 	orr.w	r3, r3, #2
 800fcde:	71fb      	strb	r3, [r7, #7]
 800fce0:	e013      	b.n	800fd0a <configLoraModem+0xbe>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 800fce2:	79fb      	ldrb	r3, [r7, #7]
 800fce4:	f043 0304 	orr.w	r3, r3, #4
 800fce8:	71fb      	strb	r3, [r7, #7]
 800fcea:	e00e      	b.n	800fd0a <configLoraModem+0xbe>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 800fcec:	79fb      	ldrb	r3, [r7, #7]
 800fcee:	f043 0306 	orr.w	r3, r3, #6
 800fcf2:	71fb      	strb	r3, [r7, #7]
 800fcf4:	e009      	b.n	800fd0a <configLoraModem+0xbe>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 800fcf6:	79fb      	ldrb	r3, [r7, #7]
 800fcf8:	f043 0308 	orr.w	r3, r3, #8
 800fcfc:	71fb      	strb	r3, [r7, #7]
 800fcfe:	e004      	b.n	800fd0a <configLoraModem+0xbe>
        default:
            ASSERT(0);
 800fd00:	f240 1161 	movw	r1, #353	@ 0x161
 800fd04:	482a      	ldr	r0, [pc, #168]	@ (800fdb0 <configLoraModem+0x164>)
 800fd06:	f001 f857 	bl	8010db8 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 800fd0a:	4b28      	ldr	r3, [pc, #160]	@ (800fdac <configLoraModem+0x160>)
 800fd0c:	89db      	ldrh	r3, [r3, #14]
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fc fc00 	bl	800c514 <getIh>
 800fd14:	4603      	mov	r3, r0
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00e      	beq.n	800fd38 <configLoraModem+0xec>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	f043 0301 	orr.w	r3, r3, #1
 800fd20:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 800fd22:	4b22      	ldr	r3, [pc, #136]	@ (800fdac <configLoraModem+0x160>)
 800fd24:	89db      	ldrh	r3, [r3, #14]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7fc fbf4 	bl	800c514 <getIh>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	b2db      	uxtb	r3, r3
 800fd30:	4619      	mov	r1, r3
 800fd32:	2022      	movs	r0, #34	@ 0x22
 800fd34:	f7ff febe 	bl	800fab4 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 800fd38:	79fb      	ldrb	r3, [r7, #7]
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	201d      	movs	r0, #29
 800fd3e:	f7ff feb9 	bl	800fab4 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 800fd42:	793b      	ldrb	r3, [r7, #4]
 800fd44:	3b01      	subs	r3, #1
 800fd46:	b2db      	uxtb	r3, r3
 800fd48:	011b      	lsls	r3, r3, #4
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	3370      	adds	r3, #112	@ 0x70
 800fd4e:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 800fd50:	4b16      	ldr	r3, [pc, #88]	@ (800fdac <configLoraModem+0x160>)
 800fd52:	89db      	ldrh	r3, [r3, #14]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fc fbb6 	bl	800c4c6 <getNocrc>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d103      	bne.n	800fd68 <configLoraModem+0x11c>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 800fd60:	79bb      	ldrb	r3, [r7, #6]
 800fd62:	f043 0304 	orr.w	r3, r3, #4
 800fd66:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 800fd68:	79bb      	ldrb	r3, [r7, #6]
 800fd6a:	4619      	mov	r1, r3
 800fd6c:	201e      	movs	r0, #30
 800fd6e:	f7ff fea1 	bl	800fab4 <writeReg>

        mc3 = SX1276_MC3_AGCAUTO;
 800fd72:	2304      	movs	r3, #4
 800fd74:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 800fd76:	793b      	ldrb	r3, [r7, #4]
 800fd78:	2b05      	cmp	r3, #5
 800fd7a:	d002      	beq.n	800fd82 <configLoraModem+0x136>
 800fd7c:	793b      	ldrb	r3, [r7, #4]
 800fd7e:	2b06      	cmp	r3, #6
 800fd80:	d10b      	bne.n	800fd9a <configLoraModem+0x14e>
 800fd82:	4b0a      	ldr	r3, [pc, #40]	@ (800fdac <configLoraModem+0x160>)
 800fd84:	89db      	ldrh	r3, [r3, #14]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f7fc fb60 	bl	800c44c <getBw>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d103      	bne.n	800fd9a <configLoraModem+0x14e>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 800fd92:	797b      	ldrb	r3, [r7, #5]
 800fd94:	f043 0308 	orr.w	r3, r3, #8
 800fd98:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 800fd9a:	797b      	ldrb	r3, [r7, #5]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	2026      	movs	r0, #38	@ 0x26
 800fda0:	f7ff fe88 	bl	800fab4 <writeReg>
#endif

#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif /* LMIC_SX1272 */
}
 800fda4:	bf00      	nop
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	20000d48 	.word	0x20000d48
 800fdb0:	08013fd4 	.word	0x08013fd4

0800fdb4 <configChannel>:

static void configChannel () {
 800fdb4:	b5b0      	push	{r4, r5, r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    uint64_t frf = ((uint64_t)LMIC.freq << 19) / 32000000;
 800fdba:	4c1b      	ldr	r4, [pc, #108]	@ (800fe28 <configChannel+0x74>)
 800fdbc:	68a4      	ldr	r4, [r4, #8]
 800fdbe:	2500      	movs	r5, #0
 800fdc0:	4622      	mov	r2, r4
 800fdc2:	462b      	mov	r3, r5
 800fdc4:	0b51      	lsrs	r1, r2, #13
 800fdc6:	04d0      	lsls	r0, r2, #19
 800fdc8:	4a18      	ldr	r2, [pc, #96]	@ (800fe2c <configChannel+0x78>)
 800fdca:	f04f 0300 	mov.w	r3, #0
 800fdce:	f7f0 ff63 	bl	8000c98 <__aeabi_uldivmod>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (uint8_t)(frf>>16));
 800fdda:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fdde:	f04f 0200 	mov.w	r2, #0
 800fde2:	f04f 0300 	mov.w	r3, #0
 800fde6:	0c02      	lsrs	r2, r0, #16
 800fde8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800fdec:	0c0b      	lsrs	r3, r1, #16
 800fdee:	b2d3      	uxtb	r3, r2
 800fdf0:	4619      	mov	r1, r3
 800fdf2:	2006      	movs	r0, #6
 800fdf4:	f7ff fe5e 	bl	800fab4 <writeReg>
    writeReg(RegFrfMid, (uint8_t)(frf>> 8));
 800fdf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fdfc:	f04f 0200 	mov.w	r2, #0
 800fe00:	f04f 0300 	mov.w	r3, #0
 800fe04:	0a02      	lsrs	r2, r0, #8
 800fe06:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800fe0a:	0a0b      	lsrs	r3, r1, #8
 800fe0c:	b2d3      	uxtb	r3, r2
 800fe0e:	4619      	mov	r1, r3
 800fe10:	2007      	movs	r0, #7
 800fe12:	f7ff fe4f 	bl	800fab4 <writeReg>
    writeReg(RegFrfLsb, (uint8_t)(frf>> 0));
 800fe16:	783b      	ldrb	r3, [r7, #0]
 800fe18:	4619      	mov	r1, r3
 800fe1a:	2008      	movs	r0, #8
 800fe1c:	f7ff fe4a 	bl	800fab4 <writeReg>
}
 800fe20:	bf00      	nop
 800fe22:	3708      	adds	r7, #8
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bdb0      	pop	{r4, r5, r7, pc}
 800fe28:	20000d48 	.word	0x20000d48
 800fe2c:	01e84800 	.word	0x01e84800

0800fe30 <configPower>:



static void configPower () {
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
#ifdef LMIC_SX1276
    // no boost used for now
    int8_t pw = (int8_t)LMIC.txpow;
 800fe36:	4b15      	ldr	r3, [pc, #84]	@ (800fe8c <configPower+0x5c>)
 800fe38:	7c9b      	ldrb	r3, [r3, #18]
 800fe3a:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 800fe3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe40:	2b10      	cmp	r3, #16
 800fe42:	dd02      	ble.n	800fe4a <configPower+0x1a>
        pw = 15;
 800fe44:	230f      	movs	r3, #15
 800fe46:	71fb      	strb	r3, [r7, #7]
 800fe48:	e005      	b.n	800fe56 <configPower+0x26>
    } else if(pw < 2) {
 800fe4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	dc01      	bgt.n	800fe56 <configPower+0x26>
        pw = 2;
 800fe52:	2302      	movs	r3, #2
 800fe54:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (uint8_t)(0x80|(pw&0xf)));
 800fe56:	79fb      	ldrb	r3, [r7, #7]
 800fe58:	f003 030f 	and.w	r3, r3, #15
 800fe5c:	b25b      	sxtb	r3, r3
 800fe5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fe62:	b25b      	sxtb	r3, r3
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	4619      	mov	r1, r3
 800fe68:	2009      	movs	r0, #9
 800fe6a:	f7ff fe23 	bl	800fab4 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 800fe6e:	205a      	movs	r0, #90	@ 0x5a
 800fe70:	f7ff fe3d 	bl	800faee <readReg>
 800fe74:	4603      	mov	r3, r0
 800fe76:	f043 0304 	orr.w	r3, r3, #4
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	205a      	movs	r0, #90	@ 0x5a
 800fe80:	f7ff fe18 	bl	800fab4 <writeReg>
    }
    writeReg(RegPaConfig, (uint8_t)(0x80|(pw-2)));
#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif /* LMIC_SX1272 */
}
 800fe84:	bf00      	nop
 800fe86:	3708      	adds	r7, #8
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	bd80      	pop	{r7, pc}
 800fe8c:	20000d48 	.word	0x20000d48

0800fe90 <txfsk>:

static void txfsk () {
 800fe90:	b580      	push	{r7, lr}
 800fe92:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 800fe94:	2110      	movs	r1, #16
 800fe96:	2001      	movs	r0, #1
 800fe98:	f7ff fe0c 	bl	800fab4 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 800fe9c:	2001      	movs	r0, #1
 800fe9e:	f7ff fe26 	bl	800faee <readReg>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b10      	cmp	r3, #16
 800fea6:	d004      	beq.n	800feb2 <txfsk+0x22>
 800fea8:	f240 11c5 	movw	r1, #453	@ 0x1c5
 800feac:	482e      	ldr	r0, [pc, #184]	@ (800ff68 <txfsk+0xd8>)
 800feae:	f000 ff83 	bl	8010db8 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 800feb2:	2001      	movs	r0, #1
 800feb4:	f7ff fe8c 	bl	800fbd0 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 800feb8:	2102      	movs	r1, #2
 800feba:	2002      	movs	r0, #2
 800febc:	f7ff fdfa 	bl	800fab4 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 800fec0:	2180      	movs	r1, #128	@ 0x80
 800fec2:	2003      	movs	r0, #3
 800fec4:	f7ff fdf6 	bl	800fab4 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 800fec8:	2101      	movs	r1, #1
 800feca:	2004      	movs	r0, #4
 800fecc:	f7ff fdf2 	bl	800fab4 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 800fed0:	2199      	movs	r1, #153	@ 0x99
 800fed2:	2005      	movs	r0, #5
 800fed4:	f7ff fdee 	bl	800fab4 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 800fed8:	2100      	movs	r1, #0
 800feda:	2025      	movs	r0, #37	@ 0x25
 800fedc:	f7ff fdea 	bl	800fab4 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 800fee0:	2105      	movs	r1, #5
 800fee2:	2026      	movs	r0, #38	@ 0x26
 800fee4:	f7ff fde6 	bl	800fab4 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 800fee8:	2112      	movs	r1, #18
 800feea:	2027      	movs	r0, #39	@ 0x27
 800feec:	f7ff fde2 	bl	800fab4 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 800fef0:	21d0      	movs	r1, #208	@ 0xd0
 800fef2:	2030      	movs	r0, #48	@ 0x30
 800fef4:	f7ff fdde 	bl	800fab4 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 800fef8:	2140      	movs	r1, #64	@ 0x40
 800fefa:	2031      	movs	r0, #49	@ 0x31
 800fefc:	f7ff fdda 	bl	800fab4 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 800ff00:	21c1      	movs	r1, #193	@ 0xc1
 800ff02:	2028      	movs	r0, #40	@ 0x28
 800ff04:	f7ff fdd6 	bl	800fab4 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 800ff08:	2194      	movs	r1, #148	@ 0x94
 800ff0a:	2029      	movs	r0, #41	@ 0x29
 800ff0c:	f7ff fdd2 	bl	800fab4 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 800ff10:	21c1      	movs	r1, #193	@ 0xc1
 800ff12:	202a      	movs	r0, #42	@ 0x2a
 800ff14:	f7ff fdce 	bl	800fab4 <writeReg>
    // configure frequency
    configChannel();
 800ff18:	f7ff ff4c 	bl	800fdb4 <configChannel>
    // configure output power
    configPower();
 800ff1c:	f7ff ff88 	bl	800fe30 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 800ff20:	2134      	movs	r1, #52	@ 0x34
 800ff22:	2040      	movs	r0, #64	@ 0x40
 800ff24:	f7ff fdc6 	bl	800fab4 <writeReg>

    // initialize the payload size and address pointers
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 800ff28:	4b10      	ldr	r3, [pc, #64]	@ (800ff6c <txfsk+0xdc>)
 800ff2a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800ff2e:	3301      	adds	r3, #1
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	4619      	mov	r1, r3
 800ff34:	2032      	movs	r0, #50	@ 0x32
 800ff36:	f7ff fdbd 	bl	800fab4 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 800ff3a:	4b0c      	ldr	r3, [pc, #48]	@ (800ff6c <txfsk+0xdc>)
 800ff3c:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800ff40:	4619      	mov	r1, r3
 800ff42:	2000      	movs	r0, #0
 800ff44:	f7ff fdb6 	bl	800fab4 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800ff48:	4b08      	ldr	r3, [pc, #32]	@ (800ff6c <txfsk+0xdc>)
 800ff4a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 800ff4e:	461a      	mov	r2, r3
 800ff50:	4907      	ldr	r1, [pc, #28]	@ (800ff70 <txfsk+0xe0>)
 800ff52:	2000      	movs	r0, #0
 800ff54:	f7ff fde7 	bl	800fb26 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 800ff58:	2001      	movs	r0, #1
 800ff5a:	f000 fd82 	bl	8010a62 <hal_pin_rxtx>

    // now we actually start the transmission
    opmode(OPMODE_TX);
 800ff5e:	2003      	movs	r0, #3
 800ff60:	f7ff fe36 	bl	800fbd0 <opmode>
}
 800ff64:	bf00      	nop
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	08013fd4 	.word	0x08013fd4
 800ff6c:	20000d48 	.word	0x20000d48
 800ff70:	20000e94 	.word	0x20000e94

0800ff74 <txlora>:

static void txlora () {
 800ff74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff78:	b089      	sub	sp, #36	@ 0x24
 800ff7a:	af04      	add	r7, sp, #16
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 800ff7c:	f7ff fe42 	bl	800fc04 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 800ff80:	2001      	movs	r0, #1
 800ff82:	f7ff fdb4 	bl	800faee <readReg>
 800ff86:	4603      	mov	r3, r0
 800ff88:	b25b      	sxtb	r3, r3
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	db04      	blt.n	800ff98 <txlora+0x24>
 800ff8e:	f240 11f1 	movw	r1, #497	@ 0x1f1
 800ff92:	484d      	ldr	r0, [pc, #308]	@ (80100c8 <txlora+0x154>)
 800ff94:	f000 ff10 	bl	8010db8 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 800ff98:	2001      	movs	r0, #1
 800ff9a:	f7ff fe19 	bl	800fbd0 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 800ff9e:	f7ff fe55 	bl	800fc4c <configLoraModem>
    // configure frequency
    configChannel();
 800ffa2:	f7ff ff07 	bl	800fdb4 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 800ffa6:	200a      	movs	r0, #10
 800ffa8:	f7ff fda1 	bl	800faee <readReg>
 800ffac:	4603      	mov	r3, r0
 800ffae:	b25b      	sxtb	r3, r3
 800ffb0:	f023 030f 	bic.w	r3, r3, #15
 800ffb4:	b25b      	sxtb	r3, r3
 800ffb6:	f043 0308 	orr.w	r3, r3, #8
 800ffba:	b25b      	sxtb	r3, r3
 800ffbc:	b2db      	uxtb	r3, r3
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	200a      	movs	r0, #10
 800ffc2:	f7ff fd77 	bl	800fab4 <writeReg>
    configPower();
 800ffc6:	f7ff ff33 	bl	800fe30 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 800ffca:	2134      	movs	r1, #52	@ 0x34
 800ffcc:	2039      	movs	r0, #57	@ 0x39
 800ffce:	f7ff fd71 	bl	800fab4 <writeReg>

    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 800ffd2:	21f0      	movs	r1, #240	@ 0xf0
 800ffd4:	2040      	movs	r0, #64	@ 0x40
 800ffd6:	f7ff fd6d 	bl	800fab4 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 800ffda:	21ff      	movs	r1, #255	@ 0xff
 800ffdc:	2012      	movs	r0, #18
 800ffde:	f7ff fd69 	bl	800fab4 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 800ffe2:	21f7      	movs	r1, #247	@ 0xf7
 800ffe4:	2011      	movs	r0, #17
 800ffe6:	f7ff fd65 	bl	800fab4 <writeReg>

    // initialize the payload size and address pointers
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 800ffea:	2100      	movs	r1, #0
 800ffec:	200e      	movs	r0, #14
 800ffee:	f7ff fd61 	bl	800fab4 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 800fff2:	2100      	movs	r1, #0
 800fff4:	200d      	movs	r0, #13
 800fff6:	f7ff fd5d 	bl	800fab4 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 800fffa:	4b34      	ldr	r3, [pc, #208]	@ (80100cc <txlora+0x158>)
 800fffc:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8010000:	4619      	mov	r1, r3
 8010002:	2022      	movs	r0, #34	@ 0x22
 8010004:	f7ff fd56 	bl	800fab4 <writeReg>

    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8010008:	4b30      	ldr	r3, [pc, #192]	@ (80100cc <txlora+0x158>)
 801000a:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 801000e:	461a      	mov	r2, r3
 8010010:	492f      	ldr	r1, [pc, #188]	@ (80100d0 <txlora+0x15c>)
 8010012:	2000      	movs	r0, #0
 8010014:	f7ff fd87 	bl	800fb26 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8010018:	2001      	movs	r0, #1
 801001a:	f000 fd22 	bl	8010a62 <hal_pin_rxtx>

    // now we actually start the transmission
    opmode(OPMODE_TX);
 801001e:	2003      	movs	r0, #3
 8010020:	f7ff fdd6 	bl	800fbd0 <opmode>

#if LMIC_DEBUG_LEVEL > 0
    uint8_t sf = getSf(LMIC.rps) + 6; // 1 == SF7
 8010024:	4b29      	ldr	r3, [pc, #164]	@ (80100cc <txlora+0x158>)
 8010026:	89db      	ldrh	r3, [r3, #14]
 8010028:	4618      	mov	r0, r3
 801002a:	f7fc f9ff 	bl	800c42c <getSf>
 801002e:	4603      	mov	r3, r0
 8010030:	3306      	adds	r3, #6
 8010032:	73fb      	strb	r3, [r7, #15]
    uint8_t bw = getBw(LMIC.rps);
 8010034:	4b25      	ldr	r3, [pc, #148]	@ (80100cc <txlora+0x158>)
 8010036:	89db      	ldrh	r3, [r3, #14]
 8010038:	4618      	mov	r0, r3
 801003a:	f7fc fa07 	bl	800c44c <getBw>
 801003e:	4603      	mov	r3, r0
 8010040:	73bb      	strb	r3, [r7, #14]
    uint8_t cr = getCr(LMIC.rps);
 8010042:	4b22      	ldr	r3, [pc, #136]	@ (80100cc <txlora+0x158>)
 8010044:	89db      	ldrh	r3, [r3, #14]
 8010046:	4618      	mov	r0, r3
 8010048:	f7fc fa12 	bl	800c470 <getCr>
 801004c:	4603      	mov	r3, r0
 801004e:	737b      	strb	r3, [r7, #13]
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8010050:	f7ff fc34 	bl	800f8bc <os_getTime>
 8010054:	4680      	mov	r8, r0
 8010056:	4b1d      	ldr	r3, [pc, #116]	@ (80100cc <txlora+0x158>)
 8010058:	689b      	ldr	r3, [r3, #8]
 801005a:	607b      	str	r3, [r7, #4]
           os_getTime(), LMIC.freq, LMIC.dataLen, sf,
 801005c:	4b1b      	ldr	r3, [pc, #108]	@ (80100cc <txlora+0x158>)
 801005e:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8010062:	4699      	mov	r9, r3
 8010064:	7bfe      	ldrb	r6, [r7, #15]
 8010066:	7bbb      	ldrb	r3, [r7, #14]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d007      	beq.n	801007c <txlora+0x108>
           bw == BW125 ? 125 : (bw == BW250 ? 250 : 500),
 801006c:	7bbb      	ldrb	r3, [r7, #14]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d101      	bne.n	8010076 <txlora+0x102>
 8010072:	25fa      	movs	r5, #250	@ 0xfa
 8010074:	e003      	b.n	801007e <txlora+0x10a>
 8010076:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801007a:	e000      	b.n	801007e <txlora+0x10a>
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 801007c:	257d      	movs	r5, #125	@ 0x7d
 801007e:	7b7b      	ldrb	r3, [r7, #13]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d00b      	beq.n	801009c <txlora+0x128>
           cr == CR_4_5 ? 5 : (cr == CR_4_6 ? 6 : (cr == CR_4_7 ? 7 : 8)),
 8010084:	7b7b      	ldrb	r3, [r7, #13]
 8010086:	2b01      	cmp	r3, #1
 8010088:	d006      	beq.n	8010098 <txlora+0x124>
 801008a:	7b7b      	ldrb	r3, [r7, #13]
 801008c:	2b02      	cmp	r3, #2
 801008e:	d101      	bne.n	8010094 <txlora+0x120>
 8010090:	2407      	movs	r4, #7
 8010092:	e004      	b.n	801009e <txlora+0x12a>
 8010094:	2408      	movs	r4, #8
 8010096:	e002      	b.n	801009e <txlora+0x12a>
 8010098:	2406      	movs	r4, #6
 801009a:	e000      	b.n	801009e <txlora+0x12a>
    lmic_printf("%lu: TXMODE, freq=%lu, len=%d, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 801009c:	2405      	movs	r4, #5
 801009e:	4b0b      	ldr	r3, [pc, #44]	@ (80100cc <txlora+0x158>)
 80100a0:	89db      	ldrh	r3, [r3, #14]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fc fa36 	bl	800c514 <getIh>
 80100a8:	4603      	mov	r3, r0
 80100aa:	9303      	str	r3, [sp, #12]
 80100ac:	9402      	str	r4, [sp, #8]
 80100ae:	9501      	str	r5, [sp, #4]
 80100b0:	9600      	str	r6, [sp, #0]
 80100b2:	464b      	mov	r3, r9
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	4641      	mov	r1, r8
 80100b8:	4806      	ldr	r0, [pc, #24]	@ (80100d4 <txlora+0x160>)
 80100ba:	f000 fbbd 	bl	8010838 <printf>
           getIh(LMIC.rps)
   );
#endif
}
 80100be:	bf00      	nop
 80100c0:	3714      	adds	r7, #20
 80100c2:	46bd      	mov	sp, r7
 80100c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100c8:	08013fd4 	.word	0x08013fd4
 80100cc:	20000d48 	.word	0x20000d48
 80100d0:	20000e94 	.word	0x20000e94
 80100d4:	08013fe4 	.word	0x08013fe4

080100d8 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 80100d8:	b580      	push	{r7, lr}
 80100da:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 80100dc:	2001      	movs	r0, #1
 80100de:	f7ff fd06 	bl	800faee <readReg>
 80100e2:	4603      	mov	r3, r0
 80100e4:	f003 0307 	and.w	r3, r3, #7
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d004      	beq.n	80100f6 <starttx+0x1e>
 80100ec:	f240 2123 	movw	r1, #547	@ 0x223
 80100f0:	4808      	ldr	r0, [pc, #32]	@ (8010114 <starttx+0x3c>)
 80100f2:	f000 fe61 	bl	8010db8 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 80100f6:	4b08      	ldr	r3, [pc, #32]	@ (8010118 <starttx+0x40>)
 80100f8:	89db      	ldrh	r3, [r3, #14]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fc f996 	bl	800c42c <getSf>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	d102      	bne.n	801010c <starttx+0x34>
        txfsk();
 8010106:	f7ff fec3 	bl	800fe90 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 801010a:	e001      	b.n	8010110 <starttx+0x38>
        txlora();
 801010c:	f7ff ff32 	bl	800ff74 <txlora>
}
 8010110:	bf00      	nop
 8010112:	bd80      	pop	{r7, pc}
 8010114:	08013fd4 	.word	0x08013fd4
 8010118:	20000d48 	.word	0x20000d48

0801011c <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (uint8_t rxmode) {
 801011c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010120:	b08a      	sub	sp, #40	@ 0x28
 8010122:	af04      	add	r7, sp, #16
 8010124:	4603      	mov	r3, r0
 8010126:	73fb      	strb	r3, [r7, #15]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8010128:	f7ff fd6c 	bl	800fc04 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 801012c:	2001      	movs	r0, #1
 801012e:	f7ff fcde 	bl	800faee <readReg>
 8010132:	4603      	mov	r3, r0
 8010134:	b25b      	sxtb	r3, r3
 8010136:	2b00      	cmp	r3, #0
 8010138:	db04      	blt.n	8010144 <rxlora+0x28>
 801013a:	f240 2139 	movw	r1, #569	@ 0x239
 801013e:	4866      	ldr	r0, [pc, #408]	@ (80102d8 <rxlora+0x1bc>)
 8010140:	f000 fe3a 	bl	8010db8 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8010144:	2001      	movs	r0, #1
 8010146:	f7ff fd43 	bl	800fbd0 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 801014a:	7bfb      	ldrb	r3, [r7, #15]
 801014c:	2b02      	cmp	r3, #2
 801014e:	d108      	bne.n	8010162 <rxlora+0x46>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8010150:	210a      	movs	r1, #10
 8010152:	201d      	movs	r0, #29
 8010154:	f7ff fcae 	bl	800fab4 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8010158:	2170      	movs	r1, #112	@ 0x70
 801015a:	201e      	movs	r0, #30
 801015c:	f7ff fcaa 	bl	800fab4 <writeReg>
 8010160:	e003      	b.n	801016a <rxlora+0x4e>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8010162:	f7ff fd73 	bl	800fc4c <configLoraModem>
        // configure frequency
        configChannel();
 8010166:	f7ff fe25 	bl	800fdb4 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN);
 801016a:	2121      	movs	r1, #33	@ 0x21
 801016c:	200c      	movs	r0, #12
 801016e:	f7ff fca1 	bl	800fab4 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8010172:	2140      	movs	r1, #64	@ 0x40
 8010174:	2023      	movs	r0, #35	@ 0x23
 8010176:	f7ff fc9d 	bl	800fab4 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 801017a:	4b58      	ldr	r3, [pc, #352]	@ (80102dc <rxlora+0x1c0>)
 801017c:	f893 31ac 	ldrb.w	r3, [r3, #428]	@ 0x1ac
 8010180:	2b00      	cmp	r3, #0
 8010182:	d00b      	beq.n	801019c <rxlora+0x80>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8010184:	2033      	movs	r0, #51	@ 0x33
 8010186:	f7ff fcb2 	bl	800faee <readReg>
 801018a:	4603      	mov	r3, r0
 801018c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010190:	b2db      	uxtb	r3, r3
 8010192:	4619      	mov	r1, r3
 8010194:	2033      	movs	r0, #51	@ 0x33
 8010196:	f7ff fc8d 	bl	800fab4 <writeReg>
 801019a:	e00a      	b.n	80101b2 <rxlora+0x96>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 801019c:	2033      	movs	r0, #51	@ 0x33
 801019e:	f7ff fca6 	bl	800faee <readReg>
 80101a2:	4603      	mov	r3, r0
 80101a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	4619      	mov	r1, r3
 80101ac:	2033      	movs	r0, #51	@ 0x33
 80101ae:	f7ff fc81 	bl	800fab4 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 80101b2:	4b4a      	ldr	r3, [pc, #296]	@ (80102dc <rxlora+0x1c0>)
 80101b4:	7c1b      	ldrb	r3, [r3, #16]
 80101b6:	4619      	mov	r1, r3
 80101b8:	201f      	movs	r0, #31
 80101ba:	f7ff fc7b 	bl	800fab4 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 80101be:	2134      	movs	r1, #52	@ 0x34
 80101c0:	2039      	movs	r0, #57	@ 0x39
 80101c2:	f7ff fc77 	bl	800fab4 <writeReg>

    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 80101c6:	21c0      	movs	r1, #192	@ 0xc0
 80101c8:	2040      	movs	r0, #64	@ 0x40
 80101ca:	f7ff fc73 	bl	800fab4 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 80101ce:	21ff      	movs	r1, #255	@ 0xff
 80101d0:	2012      	movs	r0, #18
 80101d2:	f7ff fc6f 	bl	800fab4 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~TABLE_GET_U1(rxlorairqmask, rxmode));
 80101d6:	7bfb      	ldrb	r3, [r7, #15]
 80101d8:	4619      	mov	r1, r3
 80101da:	4841      	ldr	r0, [pc, #260]	@ (80102e0 <rxlora+0x1c4>)
 80101dc:	f7fb fb2d 	bl	800b83a <table_get_u1>
 80101e0:	4603      	mov	r3, r0
 80101e2:	43db      	mvns	r3, r3
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	4619      	mov	r1, r3
 80101e8:	2011      	movs	r0, #17
 80101ea:	f7ff fc63 	bl	800fab4 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 80101ee:	2000      	movs	r0, #0
 80101f0:	f000 fc37 	bl	8010a62 <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d108      	bne.n	801020c <rxlora+0xf0>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 80101fa:	4b38      	ldr	r3, [pc, #224]	@ (80102dc <rxlora+0x1c0>)
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	4618      	mov	r0, r3
 8010200:	f000 fd23 	bl	8010c4a <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8010204:	2006      	movs	r0, #6
 8010206:	f7ff fce3 	bl	800fbd0 <opmode>
 801020a:	e002      	b.n	8010212 <rxlora+0xf6>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX);
 801020c:	2005      	movs	r0, #5
 801020e:	f7ff fcdf 	bl	800fbd0 <opmode>
    }

#if LMIC_DEBUG_LEVEL > 0
    if (rxmode == RXMODE_RSSI) {
 8010212:	7bfb      	ldrb	r3, [r7, #15]
 8010214:	2b02      	cmp	r3, #2
 8010216:	d103      	bne.n	8010220 <rxlora+0x104>
        lmic_printf("RXMODE_RSSI\n");
 8010218:	4832      	ldr	r0, [pc, #200]	@ (80102e4 <rxlora+0x1c8>)
 801021a:	f001 fb51 	bl	80118c0 <puts>
               cr == CR_4_5 ? 5 : (cr == CR_4_6 ? 6 : (cr == CR_4_7 ? 7 : 8)),
               getIh(LMIC.rps)
       );
    }
#endif
}
 801021e:	e055      	b.n	80102cc <rxlora+0x1b0>
        uint8_t sf = getSf(LMIC.rps) + 6; // 1 == SF7
 8010220:	4b2e      	ldr	r3, [pc, #184]	@ (80102dc <rxlora+0x1c0>)
 8010222:	89db      	ldrh	r3, [r3, #14]
 8010224:	4618      	mov	r0, r3
 8010226:	f7fc f901 	bl	800c42c <getSf>
 801022a:	4603      	mov	r3, r0
 801022c:	3306      	adds	r3, #6
 801022e:	75fb      	strb	r3, [r7, #23]
        uint8_t bw = getBw(LMIC.rps);
 8010230:	4b2a      	ldr	r3, [pc, #168]	@ (80102dc <rxlora+0x1c0>)
 8010232:	89db      	ldrh	r3, [r3, #14]
 8010234:	4618      	mov	r0, r3
 8010236:	f7fc f909 	bl	800c44c <getBw>
 801023a:	4603      	mov	r3, r0
 801023c:	75bb      	strb	r3, [r7, #22]
        uint8_t cr = getCr(LMIC.rps);
 801023e:	4b27      	ldr	r3, [pc, #156]	@ (80102dc <rxlora+0x1c0>)
 8010240:	89db      	ldrh	r3, [r3, #14]
 8010242:	4618      	mov	r0, r3
 8010244:	f7fc f914 	bl	800c470 <getCr>
 8010248:	4603      	mov	r3, r0
 801024a:	757b      	strb	r3, [r7, #21]
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 801024c:	f7ff fb36 	bl	800f8bc <os_getTime>
 8010250:	4680      	mov	r8, r0
 8010252:	7bfb      	ldrb	r3, [r7, #15]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d006      	beq.n	8010266 <rxlora+0x14a>
               rxmode == RXMODE_SINGLE ? "RXMODE_SINGLE" : (rxmode == RXMODE_SCAN ? "RXMODE_SCAN" : "UNKNOWN_RX"),
 8010258:	7bfb      	ldrb	r3, [r7, #15]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d101      	bne.n	8010262 <rxlora+0x146>
 801025e:	4e22      	ldr	r6, [pc, #136]	@ (80102e8 <rxlora+0x1cc>)
 8010260:	e002      	b.n	8010268 <rxlora+0x14c>
 8010262:	4e22      	ldr	r6, [pc, #136]	@ (80102ec <rxlora+0x1d0>)
 8010264:	e000      	b.n	8010268 <rxlora+0x14c>
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8010266:	4e22      	ldr	r6, [pc, #136]	@ (80102f0 <rxlora+0x1d4>)
 8010268:	4b1c      	ldr	r3, [pc, #112]	@ (80102dc <rxlora+0x1c0>)
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	60bb      	str	r3, [r7, #8]
 801026e:	7dfb      	ldrb	r3, [r7, #23]
 8010270:	607b      	str	r3, [r7, #4]
 8010272:	7dbb      	ldrb	r3, [r7, #22]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d007      	beq.n	8010288 <rxlora+0x16c>
               bw == BW125 ? 125 : (bw == BW250 ? 250 : 500),
 8010278:	7dbb      	ldrb	r3, [r7, #22]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d101      	bne.n	8010282 <rxlora+0x166>
 801027e:	25fa      	movs	r5, #250	@ 0xfa
 8010280:	e003      	b.n	801028a <rxlora+0x16e>
 8010282:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8010286:	e000      	b.n	801028a <rxlora+0x16e>
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 8010288:	257d      	movs	r5, #125	@ 0x7d
 801028a:	7d7b      	ldrb	r3, [r7, #21]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d00b      	beq.n	80102a8 <rxlora+0x18c>
               cr == CR_4_5 ? 5 : (cr == CR_4_6 ? 6 : (cr == CR_4_7 ? 7 : 8)),
 8010290:	7d7b      	ldrb	r3, [r7, #21]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d006      	beq.n	80102a4 <rxlora+0x188>
 8010296:	7d7b      	ldrb	r3, [r7, #21]
 8010298:	2b02      	cmp	r3, #2
 801029a:	d101      	bne.n	80102a0 <rxlora+0x184>
 801029c:	2407      	movs	r4, #7
 801029e:	e004      	b.n	80102aa <rxlora+0x18e>
 80102a0:	2408      	movs	r4, #8
 80102a2:	e002      	b.n	80102aa <rxlora+0x18e>
 80102a4:	2406      	movs	r4, #6
 80102a6:	e000      	b.n	80102aa <rxlora+0x18e>
        lmic_printf("%lu: %s, freq=%lu, SF=%d, BW=%d, CR=4/%d, IH=%d\n",
 80102a8:	2405      	movs	r4, #5
 80102aa:	4b0c      	ldr	r3, [pc, #48]	@ (80102dc <rxlora+0x1c0>)
 80102ac:	89db      	ldrh	r3, [r3, #14]
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fc f930 	bl	800c514 <getIh>
 80102b4:	4603      	mov	r3, r0
 80102b6:	9303      	str	r3, [sp, #12]
 80102b8:	9402      	str	r4, [sp, #8]
 80102ba:	9501      	str	r5, [sp, #4]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	68bb      	ldr	r3, [r7, #8]
 80102c2:	4632      	mov	r2, r6
 80102c4:	4641      	mov	r1, r8
 80102c6:	480b      	ldr	r0, [pc, #44]	@ (80102f4 <rxlora+0x1d8>)
 80102c8:	f000 fab6 	bl	8010838 <printf>
}
 80102cc:	bf00      	nop
 80102ce:	3718      	adds	r7, #24
 80102d0:	46bd      	mov	sp, r7
 80102d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102d6:	bf00      	nop
 80102d8:	08013fd4 	.word	0x08013fd4
 80102dc:	20000d48 	.word	0x20000d48
 80102e0:	08015b60 	.word	0x08015b60
 80102e4:	08014024 	.word	0x08014024
 80102e8:	08014030 	.word	0x08014030
 80102ec:	0801403c 	.word	0x0801403c
 80102f0:	08014048 	.word	0x08014048
 80102f4:	08014058 	.word	0x08014058

080102f8 <rxfsk>:

static void rxfsk (uint8_t rxmode) {
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b082      	sub	sp, #8
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	4603      	mov	r3, r0
 8010300:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 8010302:	79fb      	ldrb	r3, [r7, #7]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d004      	beq.n	8010312 <rxfsk+0x1a>
 8010308:	f240 217f 	movw	r1, #639	@ 0x27f
 801030c:	4834      	ldr	r0, [pc, #208]	@ (80103e0 <rxfsk+0xe8>)
 801030e:	f000 fd53 	bl	8010db8 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8010312:	f7ff fc89 	bl	800fc28 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8010316:	2001      	movs	r0, #1
 8010318:	f7ff fbe9 	bl	800faee <readReg>
 801031c:	4603      	mov	r3, r0
 801031e:	b25b      	sxtb	r3, r3
 8010320:	2b00      	cmp	r3, #0
 8010322:	da04      	bge.n	801032e <rxfsk+0x36>
 8010324:	f240 2183 	movw	r1, #643	@ 0x283
 8010328:	482d      	ldr	r0, [pc, #180]	@ (80103e0 <rxfsk+0xe8>)
 801032a:	f000 fd45 	bl	8010db8 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 801032e:	2001      	movs	r0, #1
 8010330:	f7ff fc4e 	bl	800fbd0 <opmode>
    // configure frequency
    configChannel();
 8010334:	f7ff fd3e 	bl	800fdb4 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8010338:	2121      	movs	r1, #33	@ 0x21
 801033a:	200c      	movs	r0, #12
 801033c:	f7ff fbba 	bl	800fab4 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8010340:	211e      	movs	r1, #30
 8010342:	200d      	movs	r0, #13
 8010344:	f7ff fbb6 	bl	800fab4 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8010348:	210b      	movs	r1, #11
 801034a:	2012      	movs	r0, #18
 801034c:	f7ff fbb2 	bl	800fab4 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8010350:	2112      	movs	r1, #18
 8010352:	2013      	movs	r0, #19
 8010354:	f7ff fbae 	bl	800fab4 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8010358:	21aa      	movs	r1, #170	@ 0xaa
 801035a:	201f      	movs	r0, #31
 801035c:	f7ff fbaa 	bl	800fab4 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8010360:	2112      	movs	r1, #18
 8010362:	2027      	movs	r0, #39	@ 0x27
 8010364:	f7ff fba6 	bl	800fab4 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8010368:	21d8      	movs	r1, #216	@ 0xd8
 801036a:	2030      	movs	r0, #48	@ 0x30
 801036c:	f7ff fba2 	bl	800fab4 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8010370:	2140      	movs	r1, #64	@ 0x40
 8010372:	2031      	movs	r0, #49	@ 0x31
 8010374:	f7ff fb9e 	bl	800fab4 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8010378:	21c1      	movs	r1, #193	@ 0xc1
 801037a:	2028      	movs	r0, #40	@ 0x28
 801037c:	f7ff fb9a 	bl	800fab4 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8010380:	2194      	movs	r1, #148	@ 0x94
 8010382:	2029      	movs	r0, #41	@ 0x29
 8010384:	f7ff fb96 	bl	800fab4 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8010388:	21c1      	movs	r1, #193	@ 0xc1
 801038a:	202a      	movs	r0, #42	@ 0x2a
 801038c:	f7ff fb92 	bl	800fab4 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8010390:	21ff      	movs	r1, #255	@ 0xff
 8010392:	2021      	movs	r0, #33	@ 0x21
 8010394:	f7ff fb8e 	bl	800fab4 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8010398:	2102      	movs	r1, #2
 801039a:	2002      	movs	r0, #2
 801039c:	f7ff fb8a 	bl	800fab4 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 80103a0:	2180      	movs	r1, #128	@ 0x80
 80103a2:	2003      	movs	r0, #3
 80103a4:	f7ff fb86 	bl	800fab4 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 80103a8:	2101      	movs	r1, #1
 80103aa:	2004      	movs	r0, #4
 80103ac:	f7ff fb82 	bl	800fab4 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 80103b0:	2199      	movs	r1, #153	@ 0x99
 80103b2:	2005      	movs	r0, #5
 80103b4:	f7ff fb7e 	bl	800fab4 <writeReg>

    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 80103b8:	2138      	movs	r1, #56	@ 0x38
 80103ba:	2040      	movs	r0, #64	@ 0x40
 80103bc:	f7ff fb7a 	bl	800fab4 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 80103c0:	2000      	movs	r0, #0
 80103c2:	f000 fb4e 	bl	8010a62 <hal_pin_rxtx>

    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 80103c6:	4b07      	ldr	r3, [pc, #28]	@ (80103e4 <rxfsk+0xec>)
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	4618      	mov	r0, r3
 80103cc:	f000 fc3d 	bl	8010c4a <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 80103d0:	2005      	movs	r0, #5
 80103d2:	f7ff fbfd 	bl	800fbd0 <opmode>
}
 80103d6:	bf00      	nop
 80103d8:	3708      	adds	r7, #8
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
 80103de:	bf00      	nop
 80103e0:	08013fd4 	.word	0x08013fd4
 80103e4:	20000d48 	.word	0x20000d48

080103e8 <startrx>:

static void startrx (uint8_t rxmode) {
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4603      	mov	r3, r0
 80103f0:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 80103f2:	2001      	movs	r0, #1
 80103f4:	f7ff fb7b 	bl	800faee <readReg>
 80103f8:	4603      	mov	r3, r0
 80103fa:	f003 0307 	and.w	r3, r3, #7
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d004      	beq.n	801040c <startrx+0x24>
 8010402:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8010406:	480c      	ldr	r0, [pc, #48]	@ (8010438 <startrx+0x50>)
 8010408:	f000 fcd6 	bl	8010db8 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 801040c:	4b0b      	ldr	r3, [pc, #44]	@ (801043c <startrx+0x54>)
 801040e:	89db      	ldrh	r3, [r3, #14]
 8010410:	4618      	mov	r0, r3
 8010412:	f7fc f80b 	bl	800c42c <getSf>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d104      	bne.n	8010426 <startrx+0x3e>
        rxfsk(rxmode);
 801041c:	79fb      	ldrb	r3, [r7, #7]
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff ff6a 	bl	80102f8 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 8010424:	e003      	b.n	801042e <startrx+0x46>
        rxlora(rxmode);
 8010426:	79fb      	ldrb	r3, [r7, #7]
 8010428:	4618      	mov	r0, r3
 801042a:	f7ff fe77 	bl	801011c <rxlora>
}
 801042e:	bf00      	nop
 8010430:	3708      	adds	r7, #8
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	08013fd4 	.word	0x08013fd4
 801043c:	20000d48 	.word	0x20000d48

08010440 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 8010440:	b590      	push	{r4, r7, lr}
 8010442:	b087      	sub	sp, #28
 8010444:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8010446:	f000 fc71 	bl	8010d2c <hal_disableIRQs>

    // manually reset radio
#ifdef LMIC_SX1276
    hal_pin_rst(0); // drive RST pin low
 801044a:	2000      	movs	r0, #0
 801044c:	f000 fb26 	bl	8010a9c <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 8010450:	f7ff fa34 	bl	800f8bc <os_getTime>
 8010454:	4603      	mov	r3, r0
 8010456:	3320      	adds	r3, #32
 8010458:	4618      	mov	r0, r3
 801045a:	f000 fbf6 	bl	8010c4a <hal_waitUntil>
    hal_pin_rst(1); // configure RST pin floating!
 801045e:	2001      	movs	r0, #1
 8010460:	f000 fb1c 	bl	8010a9c <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 8010464:	f7ff fa2a 	bl	800f8bc <os_getTime>
 8010468:	4603      	mov	r3, r0
 801046a:	33a0      	adds	r3, #160	@ 0xa0
 801046c:	4618      	mov	r0, r3
 801046e:	f000 fbec 	bl	8010c4a <hal_waitUntil>
    opmode(OPMODE_SLEEP);
 8010472:	2000      	movs	r0, #0
 8010474:	f7ff fbac 	bl	800fbd0 <opmode>

    // some sanity checks, e.g., read version number
    uint8_t v = readReg(RegVersion);
 8010478:	2042      	movs	r0, #66	@ 0x42
 801047a:	f7ff fb38 	bl	800faee <readReg>
 801047e:	4603      	mov	r3, r0
 8010480:	73fb      	strb	r3, [r7, #15]
#ifdef LMIC_SX1276
    ASSERT(v == 0x12 );
 8010482:	7bfb      	ldrb	r3, [r7, #15]
 8010484:	2b12      	cmp	r3, #18
 8010486:	d004      	beq.n	8010492 <radio_init+0x52>
 8010488:	f240 21cd 	movw	r1, #717	@ 0x2cd
 801048c:	4847      	ldr	r0, [pc, #284]	@ (80105ac <radio_init+0x16c>)
 801048e:	f000 fc93 	bl	8010db8 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing LMIC_SX1272/LMIC_SX1276
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 8010492:	2002      	movs	r0, #2
 8010494:	f7ff fe42 	bl	801011c <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 8010498:	bf00      	nop
 801049a:	2001      	movs	r0, #1
 801049c:	f7ff fb27 	bl	800faee <readReg>
 80104a0:	4603      	mov	r3, r0
 80104a2:	f003 0307 	and.w	r3, r3, #7
 80104a6:	2b05      	cmp	r3, #5
 80104a8:	d1f7      	bne.n	801049a <radio_init+0x5a>
    for(int i=1; i<16; i++) {
 80104aa:	2301      	movs	r3, #1
 80104ac:	617b      	str	r3, [r7, #20]
 80104ae:	e02c      	b.n	801050a <radio_init+0xca>
        for(int j=0; j<8; j++) {
 80104b0:	2300      	movs	r3, #0
 80104b2:	613b      	str	r3, [r7, #16]
 80104b4:	e023      	b.n	80104fe <radio_init+0xbe>
            uint8_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 80104b6:	bf00      	nop
 80104b8:	202c      	movs	r0, #44	@ 0x2c
 80104ba:	f7ff fb18 	bl	800faee <readReg>
 80104be:	4603      	mov	r3, r0
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	71fb      	strb	r3, [r7, #7]
 80104c6:	79fc      	ldrb	r4, [r7, #7]
 80104c8:	202c      	movs	r0, #44	@ 0x2c
 80104ca:	f7ff fb10 	bl	800faee <readReg>
 80104ce:	4603      	mov	r3, r0
 80104d0:	f003 0301 	and.w	r3, r3, #1
 80104d4:	429c      	cmp	r4, r3
 80104d6:	d0ef      	beq.n	80104b8 <radio_init+0x78>
            randbuf[i] = (randbuf[i] << 1) | b;
 80104d8:	4a35      	ldr	r2, [pc, #212]	@ (80105b0 <radio_init+0x170>)
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	4413      	add	r3, r2
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	005b      	lsls	r3, r3, #1
 80104e2:	b25a      	sxtb	r2, r3
 80104e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e8:	4313      	orrs	r3, r2
 80104ea:	b25b      	sxtb	r3, r3
 80104ec:	b2d9      	uxtb	r1, r3
 80104ee:	4a30      	ldr	r2, [pc, #192]	@ (80105b0 <radio_init+0x170>)
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	4413      	add	r3, r2
 80104f4:	460a      	mov	r2, r1
 80104f6:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	3301      	adds	r3, #1
 80104fc:	613b      	str	r3, [r7, #16]
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	2b07      	cmp	r3, #7
 8010502:	ddd8      	ble.n	80104b6 <radio_init+0x76>
    for(int i=1; i<16; i++) {
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	3301      	adds	r3, #1
 8010508:	617b      	str	r3, [r7, #20]
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	2b0f      	cmp	r3, #15
 801050e:	ddcf      	ble.n	80104b0 <radio_init+0x70>
        }
    }
    randbuf[0] = 16; // set initial index
 8010510:	4b27      	ldr	r3, [pc, #156]	@ (80105b0 <radio_init+0x170>)
 8010512:	2210      	movs	r2, #16
 8010514:	701a      	strb	r2, [r3, #0]

#ifdef CFG_sx1276mb1_board
    // chain calibration
    writeReg(RegPaConfig, 0);
 8010516:	2100      	movs	r1, #0
 8010518:	2009      	movs	r0, #9
 801051a:	f7ff facb 	bl	800fab4 <writeReg>

    // Launch Rx chain calibration for LF band
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
 801051e:	203b      	movs	r0, #59	@ 0x3b
 8010520:	f7ff fae5 	bl	800faee <readReg>
 8010524:	4603      	mov	r3, r0
 8010526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801052a:	b2db      	uxtb	r3, r3
 801052c:	4619      	mov	r1, r3
 801052e:	203b      	movs	r0, #59	@ 0x3b
 8010530:	f7ff fac0 	bl	800fab4 <writeReg>
    while((readReg(FSKRegImageCal)&RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING){ ; }
 8010534:	bf00      	nop
 8010536:	203b      	movs	r0, #59	@ 0x3b
 8010538:	f7ff fad9 	bl	800faee <readReg>
 801053c:	4603      	mov	r3, r0
 801053e:	f003 0320 	and.w	r3, r3, #32
 8010542:	2b20      	cmp	r3, #32
 8010544:	d0f7      	beq.n	8010536 <radio_init+0xf6>

    // Sets a Frequency in HF band
    uint32_t frf = 903000000;
 8010546:	4b1b      	ldr	r3, [pc, #108]	@ (80105b4 <radio_init+0x174>)
 8010548:	60bb      	str	r3, [r7, #8]
    writeReg(RegFrfMsb, (uint8_t)(frf>>16));
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	0c1b      	lsrs	r3, r3, #16
 801054e:	b2db      	uxtb	r3, r3
 8010550:	4619      	mov	r1, r3
 8010552:	2006      	movs	r0, #6
 8010554:	f7ff faae 	bl	800fab4 <writeReg>
    writeReg(RegFrfMid, (uint8_t)(frf>> 8));
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	0a1b      	lsrs	r3, r3, #8
 801055c:	b2db      	uxtb	r3, r3
 801055e:	4619      	mov	r1, r3
 8010560:	2007      	movs	r0, #7
 8010562:	f7ff faa7 	bl	800fab4 <writeReg>
    writeReg(RegFrfLsb, (uint8_t)(frf>> 0));
 8010566:	68bb      	ldr	r3, [r7, #8]
 8010568:	b2db      	uxtb	r3, r3
 801056a:	4619      	mov	r1, r3
 801056c:	2008      	movs	r0, #8
 801056e:	f7ff faa1 	bl	800fab4 <writeReg>

    // Launch Rx chain calibration for HF band
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
 8010572:	203b      	movs	r0, #59	@ 0x3b
 8010574:	f7ff fabb 	bl	800faee <readReg>
 8010578:	4603      	mov	r3, r0
 801057a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801057e:	b2db      	uxtb	r3, r3
 8010580:	4619      	mov	r1, r3
 8010582:	203b      	movs	r0, #59	@ 0x3b
 8010584:	f7ff fa96 	bl	800fab4 <writeReg>
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
 8010588:	bf00      	nop
 801058a:	203b      	movs	r0, #59	@ 0x3b
 801058c:	f7ff faaf 	bl	800faee <readReg>
 8010590:	4603      	mov	r3, r0
 8010592:	f003 0320 	and.w	r3, r3, #32
 8010596:	2b20      	cmp	r3, #32
 8010598:	d0f7      	beq.n	801058a <radio_init+0x14a>
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 801059a:	2000      	movs	r0, #0
 801059c:	f7ff fb18 	bl	800fbd0 <opmode>

    hal_enableIRQs();
 80105a0:	f000 fbd4 	bl	8010d4c <hal_enableIRQs>
}
 80105a4:	bf00      	nop
 80105a6:	371c      	adds	r7, #28
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd90      	pop	{r4, r7, pc}
 80105ac:	08013fd4 	.word	0x08013fd4
 80105b0:	20000f00 	.word	0x20000f00
 80105b4:	35d2afc0 	.word	0x35d2afc0

080105b8 <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
uint8_t radio_rand1 () {
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b082      	sub	sp, #8
 80105bc:	af00      	add	r7, sp, #0
    uint8_t i = randbuf[0];
 80105be:	4b12      	ldr	r3, [pc, #72]	@ (8010608 <radio_rand1+0x50>)
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 80105c4:	79fb      	ldrb	r3, [r7, #7]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d104      	bne.n	80105d4 <radio_rand1+0x1c>
 80105ca:	f240 21fb 	movw	r1, #763	@ 0x2fb
 80105ce:	480f      	ldr	r0, [pc, #60]	@ (801060c <radio_rand1+0x54>)
 80105d0:	f000 fbf2 	bl	8010db8 <hal_failed>
    if( i==16 ) {
 80105d4:	79fb      	ldrb	r3, [r7, #7]
 80105d6:	2b10      	cmp	r3, #16
 80105d8:	d106      	bne.n	80105e8 <radio_rand1+0x30>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 80105da:	2210      	movs	r2, #16
 80105dc:	490a      	ldr	r1, [pc, #40]	@ (8010608 <radio_rand1+0x50>)
 80105de:	2000      	movs	r0, #0
 80105e0:	f7fb f9fe 	bl	800b9e0 <os_aes>
        i = 0;
 80105e4:	2300      	movs	r3, #0
 80105e6:	71fb      	strb	r3, [r7, #7]
    }
    uint8_t v = randbuf[i++];
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	1c5a      	adds	r2, r3, #1
 80105ec:	71fa      	strb	r2, [r7, #7]
 80105ee:	461a      	mov	r2, r3
 80105f0:	4b05      	ldr	r3, [pc, #20]	@ (8010608 <radio_rand1+0x50>)
 80105f2:	5c9b      	ldrb	r3, [r3, r2]
 80105f4:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80105f6:	4a04      	ldr	r2, [pc, #16]	@ (8010608 <radio_rand1+0x50>)
 80105f8:	79fb      	ldrb	r3, [r7, #7]
 80105fa:	7013      	strb	r3, [r2, #0]
    return v;
 80105fc:	79bb      	ldrb	r3, [r7, #6]
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	20000f00 	.word	0x20000f00
 801060c:	08013fd4 	.word	0x08013fd4

08010610 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (uint8_t dio) {
 8010610:	b580      	push	{r7, lr}
 8010612:	b084      	sub	sp, #16
 8010614:	af00      	add	r7, sp, #0
 8010616:	4603      	mov	r3, r0
 8010618:	71fb      	strb	r3, [r7, #7]
    uint8_t s = readReg(RegOpMode);
    uint8_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#endif
    ostime_t now = os_getTime();
 801061a:	f7ff f94f 	bl	800f8bc <os_getTime>
 801061e:	60f8      	str	r0, [r7, #12]
    volatile uint8_t mode = readReg(RegOpMode);
 8010620:	2001      	movs	r0, #1
 8010622:	f7ff fa64 	bl	800faee <readReg>
 8010626:	4603      	mov	r3, r0
 8010628:	723b      	strb	r3, [r7, #8]
    if( ( mode & OPMODE_LORA) != 0) { // LORA modem
 801062a:	7a3b      	ldrb	r3, [r7, #8]
 801062c:	b2db      	uxtb	r3, r3
 801062e:	b25b      	sxtb	r3, r3
 8010630:	2b00      	cmp	r3, #0
 8010632:	da7b      	bge.n	801072c <radio_irq_handler+0x11c>
        uint8_t flags = readReg(LORARegIrqFlags);
 8010634:	2012      	movs	r0, #18
 8010636:	f7ff fa5a 	bl	800faee <readReg>
 801063a:	4603      	mov	r3, r0
 801063c:	727b      	strb	r3, [r7, #9]
        lmic_printf("%lu: irq: dio: 0x%x flags: 0x%x\n", now, dio, flags);
 801063e:	79fa      	ldrb	r2, [r7, #7]
 8010640:	7a7b      	ldrb	r3, [r7, #9]
 8010642:	68f9      	ldr	r1, [r7, #12]
 8010644:	4860      	ldr	r0, [pc, #384]	@ (80107c8 <radio_irq_handler+0x1b8>)
 8010646:	f000 f8f7 	bl	8010838 <printf>
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 801064a:	7a7b      	ldrb	r3, [r7, #9]
 801064c:	f003 0308 	and.w	r3, r3, #8
 8010650:	2b00      	cmp	r3, #0
 8010652:	d004      	beq.n	801065e <radio_irq_handler+0x4e>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	3b01      	subs	r3, #1
 8010658:	4a5c      	ldr	r2, [pc, #368]	@ (80107cc <radio_irq_handler+0x1bc>)
 801065a:	6013      	str	r3, [r2, #0]
 801065c:	e05d      	b.n	801071a <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 801065e:	7a7b      	ldrb	r3, [r7, #9]
 8010660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010664:	2b00      	cmp	r3, #0
 8010666:	d050      	beq.n	801070a <radio_irq_handler+0xfa>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 8010668:	4b58      	ldr	r3, [pc, #352]	@ (80107cc <radio_irq_handler+0x1bc>)
 801066a:	89db      	ldrh	r3, [r3, #14]
 801066c:	4618      	mov	r0, r3
 801066e:	f7fb feed 	bl	800c44c <getBw>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d10e      	bne.n	8010696 <radio_irq_handler+0x86>
                now -= TABLE_GET_U2(LORA_RXDONE_FIXUP, getSf(LMIC.rps));
 8010678:	4b54      	ldr	r3, [pc, #336]	@ (80107cc <radio_irq_handler+0x1bc>)
 801067a:	89db      	ldrh	r3, [r3, #14]
 801067c:	4618      	mov	r0, r3
 801067e:	f7fb fed5 	bl	800c42c <getSf>
 8010682:	4603      	mov	r3, r0
 8010684:	4619      	mov	r1, r3
 8010686:	4852      	ldr	r0, [pc, #328]	@ (80107d0 <radio_irq_handler+0x1c0>)
 8010688:	f7fb f8f6 	bl	800b878 <table_get_u2>
 801068c:	4603      	mov	r3, r0
 801068e:	461a      	mov	r2, r3
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	1a9b      	subs	r3, r3, r2
 8010694:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 8010696:	4a4d      	ldr	r2, [pc, #308]	@ (80107cc <radio_irq_handler+0x1bc>)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 801069c:	201d      	movs	r0, #29
 801069e:	f7ff fa26 	bl	800faee <readReg>
 80106a2:	4603      	mov	r3, r0
 80106a4:	f003 0304 	and.w	r3, r3, #4
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d005      	beq.n	80106b8 <radio_irq_handler+0xa8>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 80106ac:	2022      	movs	r0, #34	@ 0x22
 80106ae:	f7ff fa1e 	bl	800faee <readReg>
 80106b2:	4603      	mov	r3, r0
 80106b4:	461a      	mov	r2, r3
 80106b6:	e004      	b.n	80106c2 <radio_irq_handler+0xb2>
 80106b8:	2013      	movs	r0, #19
 80106ba:	f7ff fa18 	bl	800faee <readReg>
 80106be:	4603      	mov	r3, r0
 80106c0:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 80106c2:	4b42      	ldr	r3, [pc, #264]	@ (80107cc <radio_irq_handler+0x1bc>)
 80106c4:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr));
 80106c8:	2010      	movs	r0, #16
 80106ca:	f7ff fa10 	bl	800faee <readReg>
 80106ce:	4603      	mov	r3, r0
 80106d0:	4619      	mov	r1, r3
 80106d2:	200d      	movs	r0, #13
 80106d4:	f7ff f9ee 	bl	800fab4 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 80106d8:	4b3c      	ldr	r3, [pc, #240]	@ (80107cc <radio_irq_handler+0x1bc>)
 80106da:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 80106de:	461a      	mov	r2, r3
 80106e0:	493c      	ldr	r1, [pc, #240]	@ (80107d4 <radio_irq_handler+0x1c4>)
 80106e2:	2000      	movs	r0, #0
 80106e4:	f7ff fa49 	bl	800fb7a <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 80106e8:	2019      	movs	r0, #25
 80106ea:	f7ff fa00 	bl	800faee <readReg>
 80106ee:	4603      	mov	r3, r0
 80106f0:	b25a      	sxtb	r2, r3
 80106f2:	4b36      	ldr	r3, [pc, #216]	@ (80107cc <radio_irq_handler+0x1bc>)
 80106f4:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 80106f6:	201a      	movs	r0, #26
 80106f8:	f7ff f9f9 	bl	800faee <readReg>
 80106fc:	4603      	mov	r3, r0
 80106fe:	3b3d      	subs	r3, #61	@ 0x3d
 8010700:	b2db      	uxtb	r3, r3
 8010702:	b25a      	sxtb	r2, r3
 8010704:	4b31      	ldr	r3, [pc, #196]	@ (80107cc <radio_irq_handler+0x1bc>)
 8010706:	731a      	strb	r2, [r3, #12]
 8010708:	e007      	b.n	801071a <radio_irq_handler+0x10a>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 801070a:	f997 3009 	ldrsb.w	r3, [r7, #9]
 801070e:	2b00      	cmp	r3, #0
 8010710:	da03      	bge.n	801071a <radio_irq_handler+0x10a>
            // indicate timeout
            LMIC.dataLen = 0;
 8010712:	4b2e      	ldr	r3, [pc, #184]	@ (80107cc <radio_irq_handler+0x1bc>)
 8010714:	2200      	movs	r2, #0
 8010716:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 801071a:	21ff      	movs	r1, #255	@ 0xff
 801071c:	2011      	movs	r0, #17
 801071e:	f7ff f9c9 	bl	800fab4 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 8010722:	21ff      	movs	r1, #255	@ 0xff
 8010724:	2012      	movs	r0, #18
 8010726:	f7ff f9c5 	bl	800fab4 <writeReg>
 801072a:	e040      	b.n	80107ae <radio_irq_handler+0x19e>
    } else { // FSK modem
        uint8_t flags1 = readReg(FSKRegIrqFlags1);
 801072c:	203e      	movs	r0, #62	@ 0x3e
 801072e:	f7ff f9de 	bl	800faee <readReg>
 8010732:	4603      	mov	r3, r0
 8010734:	72fb      	strb	r3, [r7, #11]
        uint8_t flags2 = readReg(FSKRegIrqFlags2);
 8010736:	203f      	movs	r0, #63	@ 0x3f
 8010738:	f7ff f9d9 	bl	800faee <readReg>
 801073c:	4603      	mov	r3, r0
 801073e:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 8010740:	7abb      	ldrb	r3, [r7, #10]
 8010742:	f003 0308 	and.w	r3, r3, #8
 8010746:	2b00      	cmp	r3, #0
 8010748:	d003      	beq.n	8010752 <radio_irq_handler+0x142>
            // save exact tx time
            LMIC.txend = now;
 801074a:	4a20      	ldr	r2, [pc, #128]	@ (80107cc <radio_irq_handler+0x1bc>)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6013      	str	r3, [r2, #0]
 8010750:	e02d      	b.n	80107ae <radio_irq_handler+0x19e>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 8010752:	7abb      	ldrb	r3, [r7, #10]
 8010754:	f003 0304 	and.w	r3, r3, #4
 8010758:	2b00      	cmp	r3, #0
 801075a:	d019      	beq.n	8010790 <radio_irq_handler+0x180>
            // save exact rx time
            LMIC.rxtime = now;
 801075c:	4a1b      	ldr	r2, [pc, #108]	@ (80107cc <radio_irq_handler+0x1bc>)
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 8010762:	2032      	movs	r0, #50	@ 0x32
 8010764:	f7ff f9c3 	bl	800faee <readReg>
 8010768:	4603      	mov	r3, r0
 801076a:	461a      	mov	r2, r3
 801076c:	4b17      	ldr	r3, [pc, #92]	@ (80107cc <radio_irq_handler+0x1bc>)
 801076e:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8010772:	4b16      	ldr	r3, [pc, #88]	@ (80107cc <radio_irq_handler+0x1bc>)
 8010774:	f893 314b 	ldrb.w	r3, [r3, #331]	@ 0x14b
 8010778:	461a      	mov	r2, r3
 801077a:	4916      	ldr	r1, [pc, #88]	@ (80107d4 <radio_irq_handler+0x1c4>)
 801077c:	2000      	movs	r0, #0
 801077e:	f7ff f9fc 	bl	800fb7a <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8010782:	4b12      	ldr	r3, [pc, #72]	@ (80107cc <radio_irq_handler+0x1bc>)
 8010784:	2200      	movs	r2, #0
 8010786:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 8010788:	4b10      	ldr	r3, [pc, #64]	@ (80107cc <radio_irq_handler+0x1bc>)
 801078a:	2200      	movs	r2, #0
 801078c:	731a      	strb	r2, [r3, #12]
 801078e:	e00e      	b.n	80107ae <radio_irq_handler+0x19e>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8010790:	7afb      	ldrb	r3, [r7, #11]
 8010792:	f003 0304 	and.w	r3, r3, #4
 8010796:	2b00      	cmp	r3, #0
 8010798:	d004      	beq.n	80107a4 <radio_irq_handler+0x194>
            // indicate timeout
            LMIC.dataLen = 0;
 801079a:	4b0c      	ldr	r3, [pc, #48]	@ (80107cc <radio_irq_handler+0x1bc>)
 801079c:	2200      	movs	r2, #0
 801079e:	f883 214b 	strb.w	r2, [r3, #331]	@ 0x14b
 80107a2:	e004      	b.n	80107ae <radio_irq_handler+0x19e>
        } else {
            ASSERT(0);
 80107a4:	f240 3157 	movw	r1, #855	@ 0x357
 80107a8:	480b      	ldr	r0, [pc, #44]	@ (80107d8 <radio_irq_handler+0x1c8>)
 80107aa:	f000 fb05 	bl	8010db8 <hal_failed>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 80107ae:	2000      	movs	r0, #0
 80107b0:	f7ff fa0e 	bl	800fbd0 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 80107b4:	4b05      	ldr	r3, [pc, #20]	@ (80107cc <radio_irq_handler+0x1bc>)
 80107b6:	69db      	ldr	r3, [r3, #28]
 80107b8:	4619      	mov	r1, r3
 80107ba:	4808      	ldr	r0, [pc, #32]	@ (80107dc <radio_irq_handler+0x1cc>)
 80107bc:	f7ff f8ce 	bl	800f95c <os_setCallback>
}
 80107c0:	bf00      	nop
 80107c2:	3710      	adds	r7, #16
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	0801408c 	.word	0x0801408c
 80107cc:	20000d48 	.word	0x20000d48
 80107d0:	08015b64 	.word	0x08015b64
 80107d4:	20000e94 	.word	0x20000e94
 80107d8:	08013fd4 	.word	0x08013fd4
 80107dc:	20000d5c 	.word	0x20000d5c

080107e0 <os_radio>:

void os_radio (uint8_t mode) {
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	4603      	mov	r3, r0
 80107e8:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 80107ea:	f000 fa9f 	bl	8010d2c <hal_disableIRQs>
    switch (mode) {
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	2b03      	cmp	r3, #3
 80107f2:	d81a      	bhi.n	801082a <os_radio+0x4a>
 80107f4:	a201      	add	r2, pc, #4	@ (adr r2, 80107fc <os_radio+0x1c>)
 80107f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107fa:	bf00      	nop
 80107fc:	0801080d 	.word	0x0801080d
 8010800:	08010815 	.word	0x08010815
 8010804:	0801081b 	.word	0x0801081b
 8010808:	08010823 	.word	0x08010823
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 801080c:	2000      	movs	r0, #0
 801080e:	f7ff f9df 	bl	800fbd0 <opmode>
        break;
 8010812:	e00a      	b.n	801082a <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8010814:	f7ff fc60 	bl	80100d8 <starttx>
        break;
 8010818:	e007      	b.n	801082a <os_radio+0x4a>

      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 801081a:	2000      	movs	r0, #0
 801081c:	f7ff fde4 	bl	80103e8 <startrx>
        break;
 8010820:	e003      	b.n	801082a <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 8010822:	2001      	movs	r0, #1
 8010824:	f7ff fde0 	bl	80103e8 <startrx>
        break;
 8010828:	bf00      	nop
    }
    hal_enableIRQs();
 801082a:	f000 fa8f 	bl	8010d4c <hal_enableIRQs>
}
 801082e:	bf00      	nop
 8010830:	3708      	adds	r7, #8
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop

08010838 <printf>:
#define USART_TX_PORT   GPIOC
#define USART_TX_PIN    4
#define GPIO_AF_USART1  0x07

int printf(const char *format, ...)
{
 8010838:	b40f      	push	{r0, r1, r2, r3}
 801083a:	b580      	push	{r7, lr}
 801083c:	b09a      	sub	sp, #104	@ 0x68
 801083e:	af00      	add	r7, sp, #0
  char buf[100];
  va_list ap;
  va_start(ap, format);
 8010840:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8010844:	603b      	str	r3, [r7, #0]
  vsnprintf(buf, sizeof(buf), format, ap);
 8010846:	1d38      	adds	r0, r7, #4
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801084c:	2164      	movs	r1, #100	@ 0x64
 801084e:	f001 f8cd 	bl	80119ec <vsniprintf>
  HAL_UART_Transmit(&huart2, (const uint8_t *) buf, strlen(buf), 5);
 8010852:	1d3b      	adds	r3, r7, #4
 8010854:	4618      	mov	r0, r3
 8010856:	f7ef fd13 	bl	8000280 <strlen>
 801085a:	4603      	mov	r3, r0
 801085c:	b29a      	uxth	r2, r3
 801085e:	1d39      	adds	r1, r7, #4
 8010860:	2305      	movs	r3, #5
 8010862:	4805      	ldr	r0, [pc, #20]	@ (8010878 <printf+0x40>)
 8010864:	f7fa f820 	bl	800a8a8 <HAL_UART_Transmit>
  va_end(ap);
  return 0;
 8010868:	2300      	movs	r3, #0
}
 801086a:	4618      	mov	r0, r3
 801086c:	3768      	adds	r7, #104	@ 0x68
 801086e:	46bd      	mov	sp, r7
 8010870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010874:	b004      	add	sp, #16
 8010876:	4770      	bx	lr
 8010878:	200006e0 	.word	0x200006e0

0801087c <debug_init>:

void debug_init () {
 801087c:	b580      	push	{r7, lr}
 801087e:	af00      	add	r7, sp, #0
    USART1->BRR = 277; // 115200
    USART1->CR1 = USART_CR1_UE | USART_CR1_TE; // usart+transmitter enable
*/

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8010880:	4802      	ldr	r0, [pc, #8]	@ (801088c <debug_init+0x10>)
 8010882:	f000 f83d 	bl	8010900 <debug_str>
}
 8010886:	bf00      	nop
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	080140b0 	.word	0x080140b0

08010890 <debug_char>:

void debug_led (int val) {
    hw_set_pin(LED_PORT, LED_PIN, val);
}

void debug_char (char c) {
 8010890:	b580      	push	{r7, lr}
 8010892:	b082      	sub	sp, #8
 8010894:	af00      	add	r7, sp, #0
 8010896:	4603      	mov	r3, r0
 8010898:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (const uint8_t *) &c, 1, 0);
 801089a:	1df9      	adds	r1, r7, #7
 801089c:	2300      	movs	r3, #0
 801089e:	2201      	movs	r2, #1
 80108a0:	4803      	ldr	r0, [pc, #12]	@ (80108b0 <debug_char+0x20>)
 80108a2:	f7fa f801 	bl	800a8a8 <HAL_UART_Transmit>
}
 80108a6:	bf00      	nop
 80108a8:	3708      	adds	r7, #8
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	200006e0 	.word	0x200006e0

080108b4 <debug_int>:
    for(int8_t n=24; n>=0; n-=8) {
        debug_hex(v>>n);
    }
}

void debug_int (int32_t v) {
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b08a      	sub	sp, #40	@ 0x28
 80108b8:	af02      	add	r7, sp, #8
 80108ba:	6078      	str	r0, [r7, #4]
    char buf[10], *p = buf;
 80108bc:	f107 030c 	add.w	r3, r7, #12
 80108c0:	61fb      	str	r3, [r7, #28]
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
 80108c2:	f107 000c 	add.w	r0, r7, #12
 80108c6:	2300      	movs	r3, #0
 80108c8:	9301      	str	r3, [sp, #4]
 80108ca:	2300      	movs	r3, #0
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	230a      	movs	r3, #10
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	210a      	movs	r1, #10
 80108d4:	f000 f828 	bl	8010928 <debug_fmt>
 80108d8:	61b8      	str	r0, [r7, #24]
    while(n--)
 80108da:	e006      	b.n	80108ea <debug_int+0x36>
        debug_char(*p++);
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	61fa      	str	r2, [r7, #28]
 80108e2:	781b      	ldrb	r3, [r3, #0]
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7ff ffd3 	bl	8010890 <debug_char>
    while(n--)
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	1e5a      	subs	r2, r3, #1
 80108ee:	61ba      	str	r2, [r7, #24]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1f3      	bne.n	80108dc <debug_int+0x28>
}
 80108f4:	bf00      	nop
 80108f6:	bf00      	nop
 80108f8:	3720      	adds	r7, #32
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
	...

08010900 <debug_str>:

void debug_str (const char* str) {
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (const uint8_t *) str, strlen(str), 5);
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7ef fcb9 	bl	8000280 <strlen>
 801090e:	4603      	mov	r3, r0
 8010910:	b29a      	uxth	r2, r3
 8010912:	2305      	movs	r3, #5
 8010914:	6879      	ldr	r1, [r7, #4]
 8010916:	4803      	ldr	r0, [pc, #12]	@ (8010924 <debug_str+0x24>)
 8010918:	f7f9 ffc6 	bl	800a8a8 <HAL_UART_Transmit>

}
 801091c:	bf00      	nop
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	200006e0 	.word	0x200006e0

08010928 <debug_fmt>:
    debug_int(val);
    debug_char('\r');
    debug_char('\n');
}

int debug_fmt (char* buf, int max, int32_t val, int base, int width, char pad) {
 8010928:	b480      	push	{r7}
 801092a:	b093      	sub	sp, #76	@ 0x4c
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	60b9      	str	r1, [r7, #8]
 8010932:	607a      	str	r2, [r7, #4]
 8010934:	603b      	str	r3, [r7, #0]
    char num[33], *p = num, *b = buf;
 8010936:	f107 0314 	add.w	r3, r7, #20
 801093a:	647b      	str	r3, [r7, #68]	@ 0x44
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	643b      	str	r3, [r7, #64]	@ 0x40
    uint32_t m, v;
    // special handling of negative decimals
    v = (base == 10 && val < 0) ? -val : val;
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	2b0a      	cmp	r3, #10
 8010944:	d105      	bne.n	8010952 <debug_fmt+0x2a>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2b00      	cmp	r3, #0
 801094a:	da02      	bge.n	8010952 <debug_fmt+0x2a>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	425b      	negs	r3, r3
 8010950:	e000      	b.n	8010954 <debug_fmt+0x2c>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	63fb      	str	r3, [r7, #60]	@ 0x3c
    // generate digits backwards
    do {
        *p++ = ((m=v%base) <= 9) ? m+'0' : m+'A'-10;
 8010956:	683a      	ldr	r2, [r7, #0]
 8010958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801095a:	fbb3 f1f2 	udiv	r1, r3, r2
 801095e:	fb01 f202 	mul.w	r2, r1, r2
 8010962:	1a9b      	subs	r3, r3, r2
 8010964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010968:	2b09      	cmp	r3, #9
 801096a:	d804      	bhi.n	8010976 <debug_fmt+0x4e>
 801096c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801096e:	b2db      	uxtb	r3, r3
 8010970:	3330      	adds	r3, #48	@ 0x30
 8010972:	b2da      	uxtb	r2, r3
 8010974:	e003      	b.n	801097e <debug_fmt+0x56>
 8010976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010978:	b2db      	uxtb	r3, r3
 801097a:	3337      	adds	r3, #55	@ 0x37
 801097c:	b2da      	uxtb	r2, r3
 801097e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010980:	1c59      	adds	r1, r3, #1
 8010982:	6479      	str	r1, [r7, #68]	@ 0x44
 8010984:	701a      	strb	r2, [r3, #0]
    } while( v /= base );
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801098a:	fbb2 f3f3 	udiv	r3, r2, r3
 801098e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1df      	bne.n	8010956 <debug_fmt+0x2e>
    // prefix negative decimals with '-'
    if(base == 10 && val < 0) {
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	2b0a      	cmp	r3, #10
 801099a:	d10e      	bne.n	80109ba <debug_fmt+0x92>
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	da0b      	bge.n	80109ba <debug_fmt+0x92>
        *p++ = '-';
 80109a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109a4:	1c5a      	adds	r2, r3, #1
 80109a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80109a8:	222d      	movs	r2, #45	@ 0x2d
 80109aa:	701a      	strb	r2, [r3, #0]
    }
    // add leading zeroes or spaces
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 80109ac:	e005      	b.n	80109ba <debug_fmt+0x92>
        *b++ = pad;
 80109ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109b0:	1c5a      	adds	r2, r3, #1
 80109b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80109b4:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 80109b8:	701a      	strb	r2, [r3, #0]
    while( b-buf < max-1 && b-buf < width-(p-num) ) {
 80109ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	1ad2      	subs	r2, r2, r3
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	3b01      	subs	r3, #1
 80109c4:	429a      	cmp	r2, r3
 80109c6:	da0a      	bge.n	80109de <debug_fmt+0xb6>
 80109c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	1ad2      	subs	r2, r2, r3
 80109ce:	f107 0314 	add.w	r3, r7, #20
 80109d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80109d4:	1acb      	subs	r3, r1, r3
 80109d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80109d8:	1acb      	subs	r3, r1, r3
 80109da:	429a      	cmp	r2, r3
 80109dc:	dbe7      	blt.n	80109ae <debug_fmt+0x86>
    }
    // copy digits and sign forwards
    do *b++ = *--p;
 80109de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80109e0:	3b01      	subs	r3, #1
 80109e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80109e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109e6:	1c5a      	adds	r2, r3, #1
 80109e8:	643a      	str	r2, [r7, #64]	@ 0x40
 80109ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80109ec:	7812      	ldrb	r2, [r2, #0]
 80109ee:	701a      	strb	r2, [r3, #0]
    while( b-buf < max && p > num );
 80109f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	1ad3      	subs	r3, r2, r3
 80109f6:	68ba      	ldr	r2, [r7, #8]
 80109f8:	429a      	cmp	r2, r3
 80109fa:	dd04      	ble.n	8010a06 <debug_fmt+0xde>
 80109fc:	f107 0314 	add.w	r3, r7, #20
 8010a00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010a02:	429a      	cmp	r2, r3
 8010a04:	d8eb      	bhi.n	80109de <debug_fmt+0xb6>
    // return number of characters written
    return b - buf;
 8010a06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	1ad3      	subs	r3, r2, r3
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	374c      	adds	r7, #76	@ 0x4c
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr

08010a18 <debug_event>:

void debug_event (int ev) {
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b11      	cmp	r3, #17
 8010a24:	d804      	bhi.n	8010a30 <debug_event+0x18>
 8010a26:	4a09      	ldr	r2, [pc, #36]	@ (8010a4c <debug_event+0x34>)
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a2e:	e000      	b.n	8010a32 <debug_event+0x1a>
 8010a30:	4b07      	ldr	r3, [pc, #28]	@ (8010a50 <debug_event+0x38>)
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7ff ff64 	bl	8010900 <debug_str>
    debug_char('\r');
 8010a38:	200d      	movs	r0, #13
 8010a3a:	f7ff ff29 	bl	8010890 <debug_char>
    debug_char('\n');
 8010a3e:	200a      	movs	r0, #10
 8010a40:	f7ff ff26 	bl	8010890 <debug_char>
}
 8010a44:	bf00      	nop
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	2000000c 	.word	0x2000000c
 8010a50:	080140f4 	.word	0x080140f4

08010a54 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 8010a54:	b480      	push	{r7}
 8010a56:	af00      	add	r7, sp, #0
	// clock enable for GPIO ports A,B,C
	//set GPIO in init GPIO
}
 8010a58:	bf00      	nop
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr

08010a62 <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (uint8_t val) {
 8010a62:	b480      	push	{r7}
 8010a64:	b083      	sub	sp, #12
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	4603      	mov	r3, r0
 8010a6a:	71fb      	strb	r3, [r7, #7]
#ifndef CFG_sx1276mb1_board
    hw_set_pin(GPIOx(RX_PORT), RX_PIN, ~val);
#endif
    hw_set_pin(GPIOx(TX_PORT), TX_PIN, val);*/
	//endble disable antena switch for rx tx
}
 8010a6c:	bf00      	nop
 8010a6e:	370c      	adds	r7, #12
 8010a70:	46bd      	mov	sp, r7
 8010a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a76:	4770      	bx	lr

08010a78 <hal_pin_nss>:


// set radio NSS pin to given value
void hal_pin_nss (uint8_t val) {
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	4603      	mov	r3, r0
 8010a80:	71fb      	strb	r3, [r7, #7]
	//hw_set_pin(GPIOx(NSS_PORT), NSS_PIN, val);
	HAL_GPIO_WritePin(lora_NSS_PIN_GPIO_Port,lora_NSS_PIN_Pin,val);
 8010a82:	79fb      	ldrb	r3, [r7, #7]
 8010a84:	461a      	mov	r2, r3
 8010a86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010a8a:	4803      	ldr	r0, [pc, #12]	@ (8010a98 <hal_pin_nss+0x20>)
 8010a8c:	f7f5 f832 	bl	8005af4 <HAL_GPIO_WritePin>
}
 8010a90:	bf00      	nop
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}
 8010a98:	48000800 	.word	0x48000800

08010a9c <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (uint8_t val) {
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b082      	sub	sp, #8
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	71fb      	strb	r3, [r7, #7]
		hw_cfg_pin(GPIOx(RST_PORT), RST_PIN, GPIOCFG_MODE_OUT | GPIOCFG_OSPEED_40MHz | GPIOCFG_OTYPE_PUPD | GPIOCFG_PUPD_PUP);
		hw_set_pin(GPIOx(RST_PORT), RST_PIN, val);
	} else { // keep pin floating
		hw_cfg_pin(GPIOx(RST_PORT), RST_PIN, GPIOCFG_MODE_INP | GPIOCFG_OSPEED_40MHz | GPIOCFG_OTYPE_OPEN);
	}*/
	HAL_GPIO_WritePin(lora_Reset_PIN_GPIO_Port,lora_Reset_PIN_Pin,val);
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010aae:	4803      	ldr	r0, [pc, #12]	@ (8010abc <hal_pin_rst+0x20>)
 8010ab0:	f7f5 f820 	bl	8005af4 <HAL_GPIO_WritePin>
}
 8010ab4:	bf00      	nop
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	48000800 	.word	0x48000800

08010ac0 <HAL_GPIO_EXTI_Callback>:
extern uint8_t counterButton;
uint32_t prevMillis =0;
uint32_t currMillis =0;
uint32_t microseconds =10000;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin == lora_DIO0_PIN_Pin)
 8010aca:	88fb      	ldrh	r3, [r7, #6]
 8010acc:	2b80      	cmp	r3, #128	@ 0x80
 8010ace:	d102      	bne.n	8010ad6 <HAL_GPIO_EXTI_Callback+0x16>
	{
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8010ad0:	2000      	movs	r0, #0
 8010ad2:	f7ff fd9d 	bl	8010610 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin == lora_DIO1_PIN_Pin)
 8010ad6:	88fb      	ldrh	r3, [r7, #6]
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d102      	bne.n	8010ae2 <HAL_GPIO_EXTI_Callback+0x22>
	{ // pending
		// invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8010adc:	2001      	movs	r0, #1
 8010ade:	f7ff fd97 	bl	8010610 <radio_irq_handler>
	}
	// DIO 2
	if(GPIO_Pin == lora_DIO2_PIN_Pin)
 8010ae2:	88fb      	ldrh	r3, [r7, #6]
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d102      	bne.n	8010aee <HAL_GPIO_EXTI_Callback+0x2e>
	{ // pending
		// invoke radio handler (on IRQ!)
		radio_irq_handler(2);
 8010ae8:	2002      	movs	r0, #2
 8010aea:	f7ff fd91 	bl	8010610 <radio_irq_handler>
	}
	currMillis = hal_ticks();
 8010aee:	f000 f85f 	bl	8010bb0 <hal_ticks>
 8010af2:	4603      	mov	r3, r0
 8010af4:	4a0f      	ldr	r2, [pc, #60]	@ (8010b34 <HAL_GPIO_EXTI_Callback+0x74>)
 8010af6:	6013      	str	r3, [r2, #0]
	if((GPIO_Pin == GPIO_PIN_10)&& (currMillis - prevMillis > 25000) ){
 8010af8:	88fb      	ldrh	r3, [r7, #6]
 8010afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010afe:	d114      	bne.n	8010b2a <HAL_GPIO_EXTI_Callback+0x6a>
 8010b00:	4b0c      	ldr	r3, [pc, #48]	@ (8010b34 <HAL_GPIO_EXTI_Callback+0x74>)
 8010b02:	681a      	ldr	r2, [r3, #0]
 8010b04:	4b0c      	ldr	r3, [pc, #48]	@ (8010b38 <HAL_GPIO_EXTI_Callback+0x78>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	1ad3      	subs	r3, r2, r3
 8010b0a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d90b      	bls.n	8010b2a <HAL_GPIO_EXTI_Callback+0x6a>
			counterButton++;
 8010b12:	4b0a      	ldr	r3, [pc, #40]	@ (8010b3c <HAL_GPIO_EXTI_Callback+0x7c>)
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	3301      	adds	r3, #1
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	4b08      	ldr	r3, [pc, #32]	@ (8010b3c <HAL_GPIO_EXTI_Callback+0x7c>)
 8010b1c:	701a      	strb	r2, [r3, #0]
			updateScreen();
 8010b1e:	f7f1 f829 	bl	8001b74 <updateScreen>
			prevMillis = currMillis;
 8010b22:	4b04      	ldr	r3, [pc, #16]	@ (8010b34 <HAL_GPIO_EXTI_Callback+0x74>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	4a04      	ldr	r2, [pc, #16]	@ (8010b38 <HAL_GPIO_EXTI_Callback+0x78>)
 8010b28:	6013      	str	r3, [r2, #0]
	}
}
 8010b2a:	bf00      	nop
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	20000f1c 	.word	0x20000f1c
 8010b38:	20000f18 	.word	0x20000f18
 8010b3c:	2000080c 	.word	0x2000080c

08010b40 <hal_spi_init>:
#define MOSI_PORT  1 // MOSI: PB15
#define MOSI_PIN   15

#define GPIO_AF_SPI1        0x05

static void hal_spi_init () {
 8010b40:	b480      	push	{r7}
 8010b42:	af00      	add	r7, sp, #0
	//
	//	// configure and activate the SPI (master, internal slave select, software slave mgmt)
	//	// (use default mode: 8-bit, 2-wire, no crc, MSBF, PCLK/2, CPOL0, CPHA0)
	//	SPI1->CR1 = SPI_CR1_MSTR | SPI_CR1_SSI | SPI_CR1_SSM | SPI_CR1_SPE;
	//already Init SPI by cube mx
}
 8010b44:	bf00      	nop
 8010b46:	46bd      	mov	sp, r7
 8010b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4c:	4770      	bx	lr
	...

08010b50 <SPIWrite8bit>:

uint8_t SPIWrite8bit(uint8_t out)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	4603      	mov	r3, r0
 8010b58:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_SPI_Transmit(&hspi2,&out,sizeof(out),10);
 8010b5a:	1df9      	adds	r1, r7, #7
 8010b5c:	230a      	movs	r3, #10
 8010b5e:	2201      	movs	r2, #1
 8010b60:	4804      	ldr	r0, [pc, #16]	@ (8010b74 <SPIWrite8bit+0x24>)
 8010b62:	f7f7 fca0 	bl	80084a6 <HAL_SPI_Transmit>
 8010b66:	4603      	mov	r3, r0
 8010b68:	73fb      	strb	r3, [r7, #15]
	return out;
 8010b6a:	79fb      	ldrb	r3, [r7, #7]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	3710      	adds	r7, #16
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	20000510 	.word	0x20000510

08010b78 <SPIRead8bit>:

uint8_t SPIRead8bit(uint8_t in)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	4603      	mov	r3, r0
 8010b80:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret;
	ret = HAL_SPI_Receive(&hspi2,&in,sizeof(in),10);
 8010b82:	1df9      	adds	r1, r7, #7
 8010b84:	230a      	movs	r3, #10
 8010b86:	2201      	movs	r2, #1
 8010b88:	4804      	ldr	r0, [pc, #16]	@ (8010b9c <SPIRead8bit+0x24>)
 8010b8a:	f7f7 fe01 	bl	8008790 <HAL_SPI_Receive>
 8010b8e:	4603      	mov	r3, r0
 8010b90:	73fb      	strb	r3, [r7, #15]
	return in;
 8010b92:	79fb      	ldrb	r3, [r7, #7]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	20000510 	.word	0x20000510

08010ba0 <hal_time_init>:
#ifdef CFG_lmic_clib

// -----------------------------------------------------------------------------
// TIME

static void hal_time_init () {
 8010ba0:	b480      	push	{r7}
 8010ba2:	af00      	add	r7, sp, #0
	  //HAL_TIM_Base_Start_IT(&htim4);    // <-----------  change to your setup
}
 8010ba4:	bf00      	nop
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
	...

08010bb0 <hal_ticks>:

uint32_t hal_ticks () {
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b082      	sub	sp, #8
 8010bb4:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8010bb6:	f000 f8b9 	bl	8010d2c <hal_disableIRQs>
    uint32_t t = HAL.ticks;
 8010bba:	4b13      	ldr	r3, [pc, #76]	@ (8010c08 <hal_ticks+0x58>)
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	607b      	str	r3, [r7, #4]
    uint16_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8010bc0:	4b12      	ldr	r3, [pc, #72]	@ (8010c0c <hal_ticks+0x5c>)
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bc6:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8010bc8:	4b10      	ldr	r3, [pc, #64]	@ (8010c0c <hal_ticks+0x5c>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	f003 0302 	and.w	r3, r3, #2
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d10d      	bne.n	8010bf2 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8010bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8010c0c <hal_ticks+0x5c>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	f003 0302 	and.w	r3, r3, #2
 8010be0:	2b02      	cmp	r3, #2
 8010be2:	d106      	bne.n	8010bf2 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8010be4:	4b09      	ldr	r3, [pc, #36]	@ (8010c0c <hal_ticks+0x5c>)
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bea:	807b      	strh	r3, [r7, #2]
    		t++;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8010bf2:	f000 f8ab 	bl	8010d4c <hal_enableIRQs>
    return (t<<16)|cnt;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	041a      	lsls	r2, r3, #16
 8010bfa:	887b      	ldrh	r3, [r7, #2]
 8010bfc:	4313      	orrs	r3, r2
}
 8010bfe:	4618      	mov	r0, r3
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}
 8010c06:	bf00      	nop
 8010c08:	20000f10 	.word	0x20000f10
 8010c0c:	200005c0 	.word	0x200005c0

08010c10 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static uint16_t deltaticks (uint32_t time) {
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
	uint32_t t = hal_ticks();
 8010c18:	f7ff ffca 	bl	8010bb0 <hal_ticks>
 8010c1c:	60f8      	str	r0, [r7, #12]
	int32_t d = time - t;
 8010c1e:	687a      	ldr	r2, [r7, #4]
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	1ad3      	subs	r3, r2, r3
 8010c24:	60bb      	str	r3, [r7, #8]
	if( d<=0 ) return 0;    // in the past
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dc01      	bgt.n	8010c30 <deltaticks+0x20>
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	e008      	b.n	8010c42 <deltaticks+0x32>
	if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	141b      	asrs	r3, r3, #16
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <deltaticks+0x2e>
 8010c38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010c3c:	e001      	b.n	8010c42 <deltaticks+0x32>
	return (uint16_t)d;
 8010c3e:	68bb      	ldr	r3, [r7, #8]
 8010c40:	b29b      	uxth	r3, r3
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3710      	adds	r7, #16
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}

08010c4a <hal_waitUntil>:

void hal_waitUntil (uint32_t time) {
 8010c4a:	b580      	push	{r7, lr}
 8010c4c:	b082      	sub	sp, #8
 8010c4e:	af00      	add	r7, sp, #0
 8010c50:	6078      	str	r0, [r7, #4]
	while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8010c52:	bf00      	nop
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7ff ffdb 	bl	8010c10 <deltaticks>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d1f9      	bne.n	8010c54 <hal_waitUntil+0xa>
}
 8010c60:	bf00      	nop
 8010c62:	bf00      	nop
 8010c64:	3708      	adds	r7, #8
 8010c66:	46bd      	mov	sp, r7
 8010c68:	bd80      	pop	{r7, pc}
	...

08010c6c <hal_checkTimer>:

// check and rewind for target time
uint8_t hal_checkTimer (uint32_t time) {
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
    uint16_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8010c74:	4b1b      	ldr	r3, [pc, #108]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	691a      	ldr	r2, [r3, #16]
 8010c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	f022 0202 	bic.w	r2, r2, #2
 8010c82:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8010c84:	6878      	ldr	r0, [r7, #4]
 8010c86:	f7ff ffc3 	bl	8010c10 <deltaticks>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	81fb      	strh	r3, [r7, #14]
 8010c8e:	89fb      	ldrh	r3, [r7, #14]
 8010c90:	2b04      	cmp	r3, #4
 8010c92:	d809      	bhi.n	8010ca8 <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8010c94:	4b13      	ldr	r3, [pc, #76]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	68da      	ldr	r2, [r3, #12]
 8010c9a:	4b12      	ldr	r3, [pc, #72]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	f022 0202 	bic.w	r2, r2, #2
 8010ca2:	60da      	str	r2, [r3, #12]
        return 1;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e018      	b.n	8010cda <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8010ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8010cae:	89fa      	ldrh	r2, [r7, #14]
 8010cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	440a      	add	r2, r1
 8010cb6:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8010cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	68da      	ldr	r2, [r3, #12]
 8010cbe:	4b09      	ldr	r3, [pc, #36]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f042 0202 	orr.w	r2, r2, #2
 8010cc6:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8010cc8:	4b06      	ldr	r3, [pc, #24]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	6a1a      	ldr	r2, [r3, #32]
 8010cce:	4b05      	ldr	r3, [pc, #20]	@ (8010ce4 <hal_checkTimer+0x78>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f042 0201 	orr.w	r2, r2, #1
 8010cd6:	621a      	str	r2, [r3, #32]
        return 0;
 8010cd8:	2300      	movs	r3, #0
    }
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	200005c0 	.word	0x200005c0

08010ce8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681a      	ldr	r2, [r3, #0]
 8010cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8010d20 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d104      	bne.n	8010d06 <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8010cfc:	4b09      	ldr	r3, [pc, #36]	@ (8010d24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	3301      	adds	r3, #1
 8010d02:	4a08      	ldr	r2, [pc, #32]	@ (8010d24 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8010d04:	6053      	str	r3, [r2, #4]
    }
	if (htim->Instance == WakeupTIMER.Instance)
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681a      	ldr	r2, [r3, #0]
 8010d0a:	4b07      	ldr	r3, [pc, #28]	@ (8010d28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	429a      	cmp	r2, r3
 8010d10:	d101      	bne.n	8010d16 <HAL_TIM_PeriodElapsedCallback+0x2e>
	  {
		  HAL_ResumeTick();
 8010d12:	f7f2 fe43 	bl	800399c <HAL_ResumeTick>
	  }
}
 8010d16:	bf00      	nop
 8010d18:	3708      	adds	r7, #8
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	200005c0 	.word	0x200005c0
 8010d24:	20000f10 	.word	0x20000f10
 8010d28:	2000060c 	.word	0x2000060c

08010d2c <hal_disableIRQs>:


// -----------------------------------------------------------------------------
// IRQ

void hal_disableIRQs () {
 8010d2c:	b480      	push	{r7}
 8010d2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8010d30:	b672      	cpsid	i
}
 8010d32:	bf00      	nop
	__disable_irq();
	HAL.irqlevel++;
 8010d34:	4b04      	ldr	r3, [pc, #16]	@ (8010d48 <hal_disableIRQs+0x1c>)
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	4a03      	ldr	r2, [pc, #12]	@ (8010d48 <hal_disableIRQs+0x1c>)
 8010d3c:	6013      	str	r3, [r2, #0]
}
 8010d3e:	bf00      	nop
 8010d40:	46bd      	mov	sp, r7
 8010d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d46:	4770      	bx	lr
 8010d48:	20000f10 	.word	0x20000f10

08010d4c <hal_enableIRQs>:

void hal_enableIRQs () {
 8010d4c:	b480      	push	{r7}
 8010d4e:	af00      	add	r7, sp, #0
	if(--HAL.irqlevel == 0)
 8010d50:	4b07      	ldr	r3, [pc, #28]	@ (8010d70 <hal_enableIRQs+0x24>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3b01      	subs	r3, #1
 8010d56:	4a06      	ldr	r2, [pc, #24]	@ (8010d70 <hal_enableIRQs+0x24>)
 8010d58:	6013      	str	r3, [r2, #0]
 8010d5a:	4b05      	ldr	r3, [pc, #20]	@ (8010d70 <hal_enableIRQs+0x24>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d101      	bne.n	8010d66 <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8010d62:	b662      	cpsie	i
}
 8010d64:	bf00      	nop
	{
		__enable_irq();
	}
}
 8010d66:	bf00      	nop
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6e:	4770      	bx	lr
 8010d70:	20000f10 	.word	0x20000f10

08010d74 <hal_sleep>:

void hal_sleep () {
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
	HAL_SuspendTick();
 8010d78:	f7f2 fe00 	bl	800397c <HAL_SuspendTick>
	//__HAL_RCC_PWR_CLK_ENABLE();
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8010d7c:	2101      	movs	r1, #1
 8010d7e:	2000      	movs	r0, #0
 8010d80:	f7f5 fe38 	bl	80069f4 <HAL_PWR_EnterSLEEPMode>
	//SysTick_Config();
 }
 8010d84:	bf00      	nop
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	af00      	add	r7, sp, #0
	memset(&HAL, 0x00, sizeof(HAL));
 8010d8c:	2208      	movs	r2, #8
 8010d8e:	2100      	movs	r1, #0
 8010d90:	4808      	ldr	r0, [pc, #32]	@ (8010db4 <hal_init+0x2c>)
 8010d92:	f000 fee7 	bl	8011b64 <memset>
	hal_disableIRQs();
 8010d96:	f7ff ffc9 	bl	8010d2c <hal_disableIRQs>

	// configure radio I/O and interrupt handler
	hal_io_init();
 8010d9a:	f7ff fe5b 	bl	8010a54 <hal_io_init>
	// configure radio SPI
	hal_spi_init();
 8010d9e:	f7ff fecf 	bl	8010b40 <hal_spi_init>
	// configure timer and interrupt handler
	hal_time_init();
 8010da2:	f7ff fefd 	bl	8010ba0 <hal_time_init>

    // initialize debug library
    debug_init();
 8010da6:	f7ff fd69 	bl	801087c <debug_init>

	hal_enableIRQs();
 8010daa:	f7ff ffcf 	bl	8010d4c <hal_enableIRQs>
}
 8010dae:	bf00      	nop
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	20000f10 	.word	0x20000f10

08010db8 <hal_failed>:

void hal_failed (const char * f/* file */, uint16_t l/* line */)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	807b      	strh	r3, [r7, #2]
	// HALT...
//	hal_disableIRQs();
//	hal_sleep();
//	while(1);
	__NOP();
 8010dc4:	bf00      	nop

}
 8010dc6:	bf00      	nop
 8010dc8:	370c      	adds	r7, #12
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr

08010dd2 <__cvt>:
 8010dd2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd6:	ec57 6b10 	vmov	r6, r7, d0
 8010dda:	2f00      	cmp	r7, #0
 8010ddc:	460c      	mov	r4, r1
 8010dde:	4619      	mov	r1, r3
 8010de0:	463b      	mov	r3, r7
 8010de2:	bfbb      	ittet	lt
 8010de4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010de8:	461f      	movlt	r7, r3
 8010dea:	2300      	movge	r3, #0
 8010dec:	232d      	movlt	r3, #45	@ 0x2d
 8010dee:	700b      	strb	r3, [r1, #0]
 8010df0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010df2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010df6:	4691      	mov	r9, r2
 8010df8:	f023 0820 	bic.w	r8, r3, #32
 8010dfc:	bfbc      	itt	lt
 8010dfe:	4632      	movlt	r2, r6
 8010e00:	4616      	movlt	r6, r2
 8010e02:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e06:	d005      	beq.n	8010e14 <__cvt+0x42>
 8010e08:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010e0c:	d100      	bne.n	8010e10 <__cvt+0x3e>
 8010e0e:	3401      	adds	r4, #1
 8010e10:	2102      	movs	r1, #2
 8010e12:	e000      	b.n	8010e16 <__cvt+0x44>
 8010e14:	2103      	movs	r1, #3
 8010e16:	ab03      	add	r3, sp, #12
 8010e18:	9301      	str	r3, [sp, #4]
 8010e1a:	ab02      	add	r3, sp, #8
 8010e1c:	9300      	str	r3, [sp, #0]
 8010e1e:	ec47 6b10 	vmov	d0, r6, r7
 8010e22:	4653      	mov	r3, sl
 8010e24:	4622      	mov	r2, r4
 8010e26:	f000 fff3 	bl	8011e10 <_dtoa_r>
 8010e2a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010e2e:	4605      	mov	r5, r0
 8010e30:	d119      	bne.n	8010e66 <__cvt+0x94>
 8010e32:	f019 0f01 	tst.w	r9, #1
 8010e36:	d00e      	beq.n	8010e56 <__cvt+0x84>
 8010e38:	eb00 0904 	add.w	r9, r0, r4
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	2300      	movs	r3, #0
 8010e40:	4630      	mov	r0, r6
 8010e42:	4639      	mov	r1, r7
 8010e44:	f7ef fe48 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e48:	b108      	cbz	r0, 8010e4e <__cvt+0x7c>
 8010e4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8010e4e:	2230      	movs	r2, #48	@ 0x30
 8010e50:	9b03      	ldr	r3, [sp, #12]
 8010e52:	454b      	cmp	r3, r9
 8010e54:	d31e      	bcc.n	8010e94 <__cvt+0xc2>
 8010e56:	9b03      	ldr	r3, [sp, #12]
 8010e58:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010e5a:	1b5b      	subs	r3, r3, r5
 8010e5c:	4628      	mov	r0, r5
 8010e5e:	6013      	str	r3, [r2, #0]
 8010e60:	b004      	add	sp, #16
 8010e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e66:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010e6a:	eb00 0904 	add.w	r9, r0, r4
 8010e6e:	d1e5      	bne.n	8010e3c <__cvt+0x6a>
 8010e70:	7803      	ldrb	r3, [r0, #0]
 8010e72:	2b30      	cmp	r3, #48	@ 0x30
 8010e74:	d10a      	bne.n	8010e8c <__cvt+0xba>
 8010e76:	2200      	movs	r2, #0
 8010e78:	2300      	movs	r3, #0
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	4639      	mov	r1, r7
 8010e7e:	f7ef fe2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8010e82:	b918      	cbnz	r0, 8010e8c <__cvt+0xba>
 8010e84:	f1c4 0401 	rsb	r4, r4, #1
 8010e88:	f8ca 4000 	str.w	r4, [sl]
 8010e8c:	f8da 3000 	ldr.w	r3, [sl]
 8010e90:	4499      	add	r9, r3
 8010e92:	e7d3      	b.n	8010e3c <__cvt+0x6a>
 8010e94:	1c59      	adds	r1, r3, #1
 8010e96:	9103      	str	r1, [sp, #12]
 8010e98:	701a      	strb	r2, [r3, #0]
 8010e9a:	e7d9      	b.n	8010e50 <__cvt+0x7e>

08010e9c <__exponent>:
 8010e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e9e:	2900      	cmp	r1, #0
 8010ea0:	bfba      	itte	lt
 8010ea2:	4249      	neglt	r1, r1
 8010ea4:	232d      	movlt	r3, #45	@ 0x2d
 8010ea6:	232b      	movge	r3, #43	@ 0x2b
 8010ea8:	2909      	cmp	r1, #9
 8010eaa:	7002      	strb	r2, [r0, #0]
 8010eac:	7043      	strb	r3, [r0, #1]
 8010eae:	dd29      	ble.n	8010f04 <__exponent+0x68>
 8010eb0:	f10d 0307 	add.w	r3, sp, #7
 8010eb4:	461d      	mov	r5, r3
 8010eb6:	270a      	movs	r7, #10
 8010eb8:	461a      	mov	r2, r3
 8010eba:	fbb1 f6f7 	udiv	r6, r1, r7
 8010ebe:	fb07 1416 	mls	r4, r7, r6, r1
 8010ec2:	3430      	adds	r4, #48	@ 0x30
 8010ec4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010ec8:	460c      	mov	r4, r1
 8010eca:	2c63      	cmp	r4, #99	@ 0x63
 8010ecc:	f103 33ff 	add.w	r3, r3, #4294967295
 8010ed0:	4631      	mov	r1, r6
 8010ed2:	dcf1      	bgt.n	8010eb8 <__exponent+0x1c>
 8010ed4:	3130      	adds	r1, #48	@ 0x30
 8010ed6:	1e94      	subs	r4, r2, #2
 8010ed8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010edc:	1c41      	adds	r1, r0, #1
 8010ede:	4623      	mov	r3, r4
 8010ee0:	42ab      	cmp	r3, r5
 8010ee2:	d30a      	bcc.n	8010efa <__exponent+0x5e>
 8010ee4:	f10d 0309 	add.w	r3, sp, #9
 8010ee8:	1a9b      	subs	r3, r3, r2
 8010eea:	42ac      	cmp	r4, r5
 8010eec:	bf88      	it	hi
 8010eee:	2300      	movhi	r3, #0
 8010ef0:	3302      	adds	r3, #2
 8010ef2:	4403      	add	r3, r0
 8010ef4:	1a18      	subs	r0, r3, r0
 8010ef6:	b003      	add	sp, #12
 8010ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010efa:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010efe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010f02:	e7ed      	b.n	8010ee0 <__exponent+0x44>
 8010f04:	2330      	movs	r3, #48	@ 0x30
 8010f06:	3130      	adds	r1, #48	@ 0x30
 8010f08:	7083      	strb	r3, [r0, #2]
 8010f0a:	70c1      	strb	r1, [r0, #3]
 8010f0c:	1d03      	adds	r3, r0, #4
 8010f0e:	e7f1      	b.n	8010ef4 <__exponent+0x58>

08010f10 <_printf_float>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	b08d      	sub	sp, #52	@ 0x34
 8010f16:	460c      	mov	r4, r1
 8010f18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010f1c:	4616      	mov	r6, r2
 8010f1e:	461f      	mov	r7, r3
 8010f20:	4605      	mov	r5, r0
 8010f22:	f000 fe5d 	bl	8011be0 <_localeconv_r>
 8010f26:	6803      	ldr	r3, [r0, #0]
 8010f28:	9304      	str	r3, [sp, #16]
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	f7ef f9a8 	bl	8000280 <strlen>
 8010f30:	2300      	movs	r3, #0
 8010f32:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f34:	f8d8 3000 	ldr.w	r3, [r8]
 8010f38:	9005      	str	r0, [sp, #20]
 8010f3a:	3307      	adds	r3, #7
 8010f3c:	f023 0307 	bic.w	r3, r3, #7
 8010f40:	f103 0208 	add.w	r2, r3, #8
 8010f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010f48:	f8d4 b000 	ldr.w	fp, [r4]
 8010f4c:	f8c8 2000 	str.w	r2, [r8]
 8010f50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010f58:	9307      	str	r3, [sp, #28]
 8010f5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010f62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f66:	4b9c      	ldr	r3, [pc, #624]	@ (80111d8 <_printf_float+0x2c8>)
 8010f68:	f04f 32ff 	mov.w	r2, #4294967295
 8010f6c:	f7ef fde6 	bl	8000b3c <__aeabi_dcmpun>
 8010f70:	bb70      	cbnz	r0, 8010fd0 <_printf_float+0xc0>
 8010f72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f76:	4b98      	ldr	r3, [pc, #608]	@ (80111d8 <_printf_float+0x2c8>)
 8010f78:	f04f 32ff 	mov.w	r2, #4294967295
 8010f7c:	f7ef fdc0 	bl	8000b00 <__aeabi_dcmple>
 8010f80:	bb30      	cbnz	r0, 8010fd0 <_printf_float+0xc0>
 8010f82:	2200      	movs	r2, #0
 8010f84:	2300      	movs	r3, #0
 8010f86:	4640      	mov	r0, r8
 8010f88:	4649      	mov	r1, r9
 8010f8a:	f7ef fdaf 	bl	8000aec <__aeabi_dcmplt>
 8010f8e:	b110      	cbz	r0, 8010f96 <_printf_float+0x86>
 8010f90:	232d      	movs	r3, #45	@ 0x2d
 8010f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f96:	4a91      	ldr	r2, [pc, #580]	@ (80111dc <_printf_float+0x2cc>)
 8010f98:	4b91      	ldr	r3, [pc, #580]	@ (80111e0 <_printf_float+0x2d0>)
 8010f9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010f9e:	bf94      	ite	ls
 8010fa0:	4690      	movls	r8, r2
 8010fa2:	4698      	movhi	r8, r3
 8010fa4:	2303      	movs	r3, #3
 8010fa6:	6123      	str	r3, [r4, #16]
 8010fa8:	f02b 0304 	bic.w	r3, fp, #4
 8010fac:	6023      	str	r3, [r4, #0]
 8010fae:	f04f 0900 	mov.w	r9, #0
 8010fb2:	9700      	str	r7, [sp, #0]
 8010fb4:	4633      	mov	r3, r6
 8010fb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010fb8:	4621      	mov	r1, r4
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f000 f9d2 	bl	8011364 <_printf_common>
 8010fc0:	3001      	adds	r0, #1
 8010fc2:	f040 808d 	bne.w	80110e0 <_printf_float+0x1d0>
 8010fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8010fca:	b00d      	add	sp, #52	@ 0x34
 8010fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd0:	4642      	mov	r2, r8
 8010fd2:	464b      	mov	r3, r9
 8010fd4:	4640      	mov	r0, r8
 8010fd6:	4649      	mov	r1, r9
 8010fd8:	f7ef fdb0 	bl	8000b3c <__aeabi_dcmpun>
 8010fdc:	b140      	cbz	r0, 8010ff0 <_printf_float+0xe0>
 8010fde:	464b      	mov	r3, r9
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	bfbc      	itt	lt
 8010fe4:	232d      	movlt	r3, #45	@ 0x2d
 8010fe6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010fea:	4a7e      	ldr	r2, [pc, #504]	@ (80111e4 <_printf_float+0x2d4>)
 8010fec:	4b7e      	ldr	r3, [pc, #504]	@ (80111e8 <_printf_float+0x2d8>)
 8010fee:	e7d4      	b.n	8010f9a <_printf_float+0x8a>
 8010ff0:	6863      	ldr	r3, [r4, #4]
 8010ff2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010ff6:	9206      	str	r2, [sp, #24]
 8010ff8:	1c5a      	adds	r2, r3, #1
 8010ffa:	d13b      	bne.n	8011074 <_printf_float+0x164>
 8010ffc:	2306      	movs	r3, #6
 8010ffe:	6063      	str	r3, [r4, #4]
 8011000:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011004:	2300      	movs	r3, #0
 8011006:	6022      	str	r2, [r4, #0]
 8011008:	9303      	str	r3, [sp, #12]
 801100a:	ab0a      	add	r3, sp, #40	@ 0x28
 801100c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011010:	ab09      	add	r3, sp, #36	@ 0x24
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	6861      	ldr	r1, [r4, #4]
 8011016:	ec49 8b10 	vmov	d0, r8, r9
 801101a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801101e:	4628      	mov	r0, r5
 8011020:	f7ff fed7 	bl	8010dd2 <__cvt>
 8011024:	9b06      	ldr	r3, [sp, #24]
 8011026:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011028:	2b47      	cmp	r3, #71	@ 0x47
 801102a:	4680      	mov	r8, r0
 801102c:	d129      	bne.n	8011082 <_printf_float+0x172>
 801102e:	1cc8      	adds	r0, r1, #3
 8011030:	db02      	blt.n	8011038 <_printf_float+0x128>
 8011032:	6863      	ldr	r3, [r4, #4]
 8011034:	4299      	cmp	r1, r3
 8011036:	dd41      	ble.n	80110bc <_printf_float+0x1ac>
 8011038:	f1aa 0a02 	sub.w	sl, sl, #2
 801103c:	fa5f fa8a 	uxtb.w	sl, sl
 8011040:	3901      	subs	r1, #1
 8011042:	4652      	mov	r2, sl
 8011044:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011048:	9109      	str	r1, [sp, #36]	@ 0x24
 801104a:	f7ff ff27 	bl	8010e9c <__exponent>
 801104e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011050:	1813      	adds	r3, r2, r0
 8011052:	2a01      	cmp	r2, #1
 8011054:	4681      	mov	r9, r0
 8011056:	6123      	str	r3, [r4, #16]
 8011058:	dc02      	bgt.n	8011060 <_printf_float+0x150>
 801105a:	6822      	ldr	r2, [r4, #0]
 801105c:	07d2      	lsls	r2, r2, #31
 801105e:	d501      	bpl.n	8011064 <_printf_float+0x154>
 8011060:	3301      	adds	r3, #1
 8011062:	6123      	str	r3, [r4, #16]
 8011064:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011068:	2b00      	cmp	r3, #0
 801106a:	d0a2      	beq.n	8010fb2 <_printf_float+0xa2>
 801106c:	232d      	movs	r3, #45	@ 0x2d
 801106e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011072:	e79e      	b.n	8010fb2 <_printf_float+0xa2>
 8011074:	9a06      	ldr	r2, [sp, #24]
 8011076:	2a47      	cmp	r2, #71	@ 0x47
 8011078:	d1c2      	bne.n	8011000 <_printf_float+0xf0>
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1c0      	bne.n	8011000 <_printf_float+0xf0>
 801107e:	2301      	movs	r3, #1
 8011080:	e7bd      	b.n	8010ffe <_printf_float+0xee>
 8011082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011086:	d9db      	bls.n	8011040 <_printf_float+0x130>
 8011088:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801108c:	d118      	bne.n	80110c0 <_printf_float+0x1b0>
 801108e:	2900      	cmp	r1, #0
 8011090:	6863      	ldr	r3, [r4, #4]
 8011092:	dd0b      	ble.n	80110ac <_printf_float+0x19c>
 8011094:	6121      	str	r1, [r4, #16]
 8011096:	b913      	cbnz	r3, 801109e <_printf_float+0x18e>
 8011098:	6822      	ldr	r2, [r4, #0]
 801109a:	07d0      	lsls	r0, r2, #31
 801109c:	d502      	bpl.n	80110a4 <_printf_float+0x194>
 801109e:	3301      	adds	r3, #1
 80110a0:	440b      	add	r3, r1
 80110a2:	6123      	str	r3, [r4, #16]
 80110a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80110a6:	f04f 0900 	mov.w	r9, #0
 80110aa:	e7db      	b.n	8011064 <_printf_float+0x154>
 80110ac:	b913      	cbnz	r3, 80110b4 <_printf_float+0x1a4>
 80110ae:	6822      	ldr	r2, [r4, #0]
 80110b0:	07d2      	lsls	r2, r2, #31
 80110b2:	d501      	bpl.n	80110b8 <_printf_float+0x1a8>
 80110b4:	3302      	adds	r3, #2
 80110b6:	e7f4      	b.n	80110a2 <_printf_float+0x192>
 80110b8:	2301      	movs	r3, #1
 80110ba:	e7f2      	b.n	80110a2 <_printf_float+0x192>
 80110bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80110c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110c2:	4299      	cmp	r1, r3
 80110c4:	db05      	blt.n	80110d2 <_printf_float+0x1c2>
 80110c6:	6823      	ldr	r3, [r4, #0]
 80110c8:	6121      	str	r1, [r4, #16]
 80110ca:	07d8      	lsls	r0, r3, #31
 80110cc:	d5ea      	bpl.n	80110a4 <_printf_float+0x194>
 80110ce:	1c4b      	adds	r3, r1, #1
 80110d0:	e7e7      	b.n	80110a2 <_printf_float+0x192>
 80110d2:	2900      	cmp	r1, #0
 80110d4:	bfd4      	ite	le
 80110d6:	f1c1 0202 	rsble	r2, r1, #2
 80110da:	2201      	movgt	r2, #1
 80110dc:	4413      	add	r3, r2
 80110de:	e7e0      	b.n	80110a2 <_printf_float+0x192>
 80110e0:	6823      	ldr	r3, [r4, #0]
 80110e2:	055a      	lsls	r2, r3, #21
 80110e4:	d407      	bmi.n	80110f6 <_printf_float+0x1e6>
 80110e6:	6923      	ldr	r3, [r4, #16]
 80110e8:	4642      	mov	r2, r8
 80110ea:	4631      	mov	r1, r6
 80110ec:	4628      	mov	r0, r5
 80110ee:	47b8      	blx	r7
 80110f0:	3001      	adds	r0, #1
 80110f2:	d12b      	bne.n	801114c <_printf_float+0x23c>
 80110f4:	e767      	b.n	8010fc6 <_printf_float+0xb6>
 80110f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80110fa:	f240 80dd 	bls.w	80112b8 <_printf_float+0x3a8>
 80110fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011102:	2200      	movs	r2, #0
 8011104:	2300      	movs	r3, #0
 8011106:	f7ef fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 801110a:	2800      	cmp	r0, #0
 801110c:	d033      	beq.n	8011176 <_printf_float+0x266>
 801110e:	4a37      	ldr	r2, [pc, #220]	@ (80111ec <_printf_float+0x2dc>)
 8011110:	2301      	movs	r3, #1
 8011112:	4631      	mov	r1, r6
 8011114:	4628      	mov	r0, r5
 8011116:	47b8      	blx	r7
 8011118:	3001      	adds	r0, #1
 801111a:	f43f af54 	beq.w	8010fc6 <_printf_float+0xb6>
 801111e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011122:	4543      	cmp	r3, r8
 8011124:	db02      	blt.n	801112c <_printf_float+0x21c>
 8011126:	6823      	ldr	r3, [r4, #0]
 8011128:	07d8      	lsls	r0, r3, #31
 801112a:	d50f      	bpl.n	801114c <_printf_float+0x23c>
 801112c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011130:	4631      	mov	r1, r6
 8011132:	4628      	mov	r0, r5
 8011134:	47b8      	blx	r7
 8011136:	3001      	adds	r0, #1
 8011138:	f43f af45 	beq.w	8010fc6 <_printf_float+0xb6>
 801113c:	f04f 0900 	mov.w	r9, #0
 8011140:	f108 38ff 	add.w	r8, r8, #4294967295
 8011144:	f104 0a1a 	add.w	sl, r4, #26
 8011148:	45c8      	cmp	r8, r9
 801114a:	dc09      	bgt.n	8011160 <_printf_float+0x250>
 801114c:	6823      	ldr	r3, [r4, #0]
 801114e:	079b      	lsls	r3, r3, #30
 8011150:	f100 8103 	bmi.w	801135a <_printf_float+0x44a>
 8011154:	68e0      	ldr	r0, [r4, #12]
 8011156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011158:	4298      	cmp	r0, r3
 801115a:	bfb8      	it	lt
 801115c:	4618      	movlt	r0, r3
 801115e:	e734      	b.n	8010fca <_printf_float+0xba>
 8011160:	2301      	movs	r3, #1
 8011162:	4652      	mov	r2, sl
 8011164:	4631      	mov	r1, r6
 8011166:	4628      	mov	r0, r5
 8011168:	47b8      	blx	r7
 801116a:	3001      	adds	r0, #1
 801116c:	f43f af2b 	beq.w	8010fc6 <_printf_float+0xb6>
 8011170:	f109 0901 	add.w	r9, r9, #1
 8011174:	e7e8      	b.n	8011148 <_printf_float+0x238>
 8011176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011178:	2b00      	cmp	r3, #0
 801117a:	dc39      	bgt.n	80111f0 <_printf_float+0x2e0>
 801117c:	4a1b      	ldr	r2, [pc, #108]	@ (80111ec <_printf_float+0x2dc>)
 801117e:	2301      	movs	r3, #1
 8011180:	4631      	mov	r1, r6
 8011182:	4628      	mov	r0, r5
 8011184:	47b8      	blx	r7
 8011186:	3001      	adds	r0, #1
 8011188:	f43f af1d 	beq.w	8010fc6 <_printf_float+0xb6>
 801118c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011190:	ea59 0303 	orrs.w	r3, r9, r3
 8011194:	d102      	bne.n	801119c <_printf_float+0x28c>
 8011196:	6823      	ldr	r3, [r4, #0]
 8011198:	07d9      	lsls	r1, r3, #31
 801119a:	d5d7      	bpl.n	801114c <_printf_float+0x23c>
 801119c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111a0:	4631      	mov	r1, r6
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b8      	blx	r7
 80111a6:	3001      	adds	r0, #1
 80111a8:	f43f af0d 	beq.w	8010fc6 <_printf_float+0xb6>
 80111ac:	f04f 0a00 	mov.w	sl, #0
 80111b0:	f104 0b1a 	add.w	fp, r4, #26
 80111b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111b6:	425b      	negs	r3, r3
 80111b8:	4553      	cmp	r3, sl
 80111ba:	dc01      	bgt.n	80111c0 <_printf_float+0x2b0>
 80111bc:	464b      	mov	r3, r9
 80111be:	e793      	b.n	80110e8 <_printf_float+0x1d8>
 80111c0:	2301      	movs	r3, #1
 80111c2:	465a      	mov	r2, fp
 80111c4:	4631      	mov	r1, r6
 80111c6:	4628      	mov	r0, r5
 80111c8:	47b8      	blx	r7
 80111ca:	3001      	adds	r0, #1
 80111cc:	f43f aefb 	beq.w	8010fc6 <_printf_float+0xb6>
 80111d0:	f10a 0a01 	add.w	sl, sl, #1
 80111d4:	e7ee      	b.n	80111b4 <_printf_float+0x2a4>
 80111d6:	bf00      	nop
 80111d8:	7fefffff 	.word	0x7fefffff
 80111dc:	08015c73 	.word	0x08015c73
 80111e0:	08015c77 	.word	0x08015c77
 80111e4:	08015c7b 	.word	0x08015c7b
 80111e8:	08015c7f 	.word	0x08015c7f
 80111ec:	08015c83 	.word	0x08015c83
 80111f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80111f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80111f6:	4553      	cmp	r3, sl
 80111f8:	bfa8      	it	ge
 80111fa:	4653      	movge	r3, sl
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	4699      	mov	r9, r3
 8011200:	dc36      	bgt.n	8011270 <_printf_float+0x360>
 8011202:	f04f 0b00 	mov.w	fp, #0
 8011206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801120a:	f104 021a 	add.w	r2, r4, #26
 801120e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011210:	9306      	str	r3, [sp, #24]
 8011212:	eba3 0309 	sub.w	r3, r3, r9
 8011216:	455b      	cmp	r3, fp
 8011218:	dc31      	bgt.n	801127e <_printf_float+0x36e>
 801121a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801121c:	459a      	cmp	sl, r3
 801121e:	dc3a      	bgt.n	8011296 <_printf_float+0x386>
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	07da      	lsls	r2, r3, #31
 8011224:	d437      	bmi.n	8011296 <_printf_float+0x386>
 8011226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011228:	ebaa 0903 	sub.w	r9, sl, r3
 801122c:	9b06      	ldr	r3, [sp, #24]
 801122e:	ebaa 0303 	sub.w	r3, sl, r3
 8011232:	4599      	cmp	r9, r3
 8011234:	bfa8      	it	ge
 8011236:	4699      	movge	r9, r3
 8011238:	f1b9 0f00 	cmp.w	r9, #0
 801123c:	dc33      	bgt.n	80112a6 <_printf_float+0x396>
 801123e:	f04f 0800 	mov.w	r8, #0
 8011242:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011246:	f104 0b1a 	add.w	fp, r4, #26
 801124a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801124c:	ebaa 0303 	sub.w	r3, sl, r3
 8011250:	eba3 0309 	sub.w	r3, r3, r9
 8011254:	4543      	cmp	r3, r8
 8011256:	f77f af79 	ble.w	801114c <_printf_float+0x23c>
 801125a:	2301      	movs	r3, #1
 801125c:	465a      	mov	r2, fp
 801125e:	4631      	mov	r1, r6
 8011260:	4628      	mov	r0, r5
 8011262:	47b8      	blx	r7
 8011264:	3001      	adds	r0, #1
 8011266:	f43f aeae 	beq.w	8010fc6 <_printf_float+0xb6>
 801126a:	f108 0801 	add.w	r8, r8, #1
 801126e:	e7ec      	b.n	801124a <_printf_float+0x33a>
 8011270:	4642      	mov	r2, r8
 8011272:	4631      	mov	r1, r6
 8011274:	4628      	mov	r0, r5
 8011276:	47b8      	blx	r7
 8011278:	3001      	adds	r0, #1
 801127a:	d1c2      	bne.n	8011202 <_printf_float+0x2f2>
 801127c:	e6a3      	b.n	8010fc6 <_printf_float+0xb6>
 801127e:	2301      	movs	r3, #1
 8011280:	4631      	mov	r1, r6
 8011282:	4628      	mov	r0, r5
 8011284:	9206      	str	r2, [sp, #24]
 8011286:	47b8      	blx	r7
 8011288:	3001      	adds	r0, #1
 801128a:	f43f ae9c 	beq.w	8010fc6 <_printf_float+0xb6>
 801128e:	9a06      	ldr	r2, [sp, #24]
 8011290:	f10b 0b01 	add.w	fp, fp, #1
 8011294:	e7bb      	b.n	801120e <_printf_float+0x2fe>
 8011296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801129a:	4631      	mov	r1, r6
 801129c:	4628      	mov	r0, r5
 801129e:	47b8      	blx	r7
 80112a0:	3001      	adds	r0, #1
 80112a2:	d1c0      	bne.n	8011226 <_printf_float+0x316>
 80112a4:	e68f      	b.n	8010fc6 <_printf_float+0xb6>
 80112a6:	9a06      	ldr	r2, [sp, #24]
 80112a8:	464b      	mov	r3, r9
 80112aa:	4442      	add	r2, r8
 80112ac:	4631      	mov	r1, r6
 80112ae:	4628      	mov	r0, r5
 80112b0:	47b8      	blx	r7
 80112b2:	3001      	adds	r0, #1
 80112b4:	d1c3      	bne.n	801123e <_printf_float+0x32e>
 80112b6:	e686      	b.n	8010fc6 <_printf_float+0xb6>
 80112b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80112bc:	f1ba 0f01 	cmp.w	sl, #1
 80112c0:	dc01      	bgt.n	80112c6 <_printf_float+0x3b6>
 80112c2:	07db      	lsls	r3, r3, #31
 80112c4:	d536      	bpl.n	8011334 <_printf_float+0x424>
 80112c6:	2301      	movs	r3, #1
 80112c8:	4642      	mov	r2, r8
 80112ca:	4631      	mov	r1, r6
 80112cc:	4628      	mov	r0, r5
 80112ce:	47b8      	blx	r7
 80112d0:	3001      	adds	r0, #1
 80112d2:	f43f ae78 	beq.w	8010fc6 <_printf_float+0xb6>
 80112d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112da:	4631      	mov	r1, r6
 80112dc:	4628      	mov	r0, r5
 80112de:	47b8      	blx	r7
 80112e0:	3001      	adds	r0, #1
 80112e2:	f43f ae70 	beq.w	8010fc6 <_printf_float+0xb6>
 80112e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80112ea:	2200      	movs	r2, #0
 80112ec:	2300      	movs	r3, #0
 80112ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112f2:	f7ef fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80112f6:	b9c0      	cbnz	r0, 801132a <_printf_float+0x41a>
 80112f8:	4653      	mov	r3, sl
 80112fa:	f108 0201 	add.w	r2, r8, #1
 80112fe:	4631      	mov	r1, r6
 8011300:	4628      	mov	r0, r5
 8011302:	47b8      	blx	r7
 8011304:	3001      	adds	r0, #1
 8011306:	d10c      	bne.n	8011322 <_printf_float+0x412>
 8011308:	e65d      	b.n	8010fc6 <_printf_float+0xb6>
 801130a:	2301      	movs	r3, #1
 801130c:	465a      	mov	r2, fp
 801130e:	4631      	mov	r1, r6
 8011310:	4628      	mov	r0, r5
 8011312:	47b8      	blx	r7
 8011314:	3001      	adds	r0, #1
 8011316:	f43f ae56 	beq.w	8010fc6 <_printf_float+0xb6>
 801131a:	f108 0801 	add.w	r8, r8, #1
 801131e:	45d0      	cmp	r8, sl
 8011320:	dbf3      	blt.n	801130a <_printf_float+0x3fa>
 8011322:	464b      	mov	r3, r9
 8011324:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011328:	e6df      	b.n	80110ea <_printf_float+0x1da>
 801132a:	f04f 0800 	mov.w	r8, #0
 801132e:	f104 0b1a 	add.w	fp, r4, #26
 8011332:	e7f4      	b.n	801131e <_printf_float+0x40e>
 8011334:	2301      	movs	r3, #1
 8011336:	4642      	mov	r2, r8
 8011338:	e7e1      	b.n	80112fe <_printf_float+0x3ee>
 801133a:	2301      	movs	r3, #1
 801133c:	464a      	mov	r2, r9
 801133e:	4631      	mov	r1, r6
 8011340:	4628      	mov	r0, r5
 8011342:	47b8      	blx	r7
 8011344:	3001      	adds	r0, #1
 8011346:	f43f ae3e 	beq.w	8010fc6 <_printf_float+0xb6>
 801134a:	f108 0801 	add.w	r8, r8, #1
 801134e:	68e3      	ldr	r3, [r4, #12]
 8011350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011352:	1a5b      	subs	r3, r3, r1
 8011354:	4543      	cmp	r3, r8
 8011356:	dcf0      	bgt.n	801133a <_printf_float+0x42a>
 8011358:	e6fc      	b.n	8011154 <_printf_float+0x244>
 801135a:	f04f 0800 	mov.w	r8, #0
 801135e:	f104 0919 	add.w	r9, r4, #25
 8011362:	e7f4      	b.n	801134e <_printf_float+0x43e>

08011364 <_printf_common>:
 8011364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011368:	4616      	mov	r6, r2
 801136a:	4698      	mov	r8, r3
 801136c:	688a      	ldr	r2, [r1, #8]
 801136e:	690b      	ldr	r3, [r1, #16]
 8011370:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011374:	4293      	cmp	r3, r2
 8011376:	bfb8      	it	lt
 8011378:	4613      	movlt	r3, r2
 801137a:	6033      	str	r3, [r6, #0]
 801137c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011380:	4607      	mov	r7, r0
 8011382:	460c      	mov	r4, r1
 8011384:	b10a      	cbz	r2, 801138a <_printf_common+0x26>
 8011386:	3301      	adds	r3, #1
 8011388:	6033      	str	r3, [r6, #0]
 801138a:	6823      	ldr	r3, [r4, #0]
 801138c:	0699      	lsls	r1, r3, #26
 801138e:	bf42      	ittt	mi
 8011390:	6833      	ldrmi	r3, [r6, #0]
 8011392:	3302      	addmi	r3, #2
 8011394:	6033      	strmi	r3, [r6, #0]
 8011396:	6825      	ldr	r5, [r4, #0]
 8011398:	f015 0506 	ands.w	r5, r5, #6
 801139c:	d106      	bne.n	80113ac <_printf_common+0x48>
 801139e:	f104 0a19 	add.w	sl, r4, #25
 80113a2:	68e3      	ldr	r3, [r4, #12]
 80113a4:	6832      	ldr	r2, [r6, #0]
 80113a6:	1a9b      	subs	r3, r3, r2
 80113a8:	42ab      	cmp	r3, r5
 80113aa:	dc26      	bgt.n	80113fa <_printf_common+0x96>
 80113ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80113b0:	6822      	ldr	r2, [r4, #0]
 80113b2:	3b00      	subs	r3, #0
 80113b4:	bf18      	it	ne
 80113b6:	2301      	movne	r3, #1
 80113b8:	0692      	lsls	r2, r2, #26
 80113ba:	d42b      	bmi.n	8011414 <_printf_common+0xb0>
 80113bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80113c0:	4641      	mov	r1, r8
 80113c2:	4638      	mov	r0, r7
 80113c4:	47c8      	blx	r9
 80113c6:	3001      	adds	r0, #1
 80113c8:	d01e      	beq.n	8011408 <_printf_common+0xa4>
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	6922      	ldr	r2, [r4, #16]
 80113ce:	f003 0306 	and.w	r3, r3, #6
 80113d2:	2b04      	cmp	r3, #4
 80113d4:	bf02      	ittt	eq
 80113d6:	68e5      	ldreq	r5, [r4, #12]
 80113d8:	6833      	ldreq	r3, [r6, #0]
 80113da:	1aed      	subeq	r5, r5, r3
 80113dc:	68a3      	ldr	r3, [r4, #8]
 80113de:	bf0c      	ite	eq
 80113e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80113e4:	2500      	movne	r5, #0
 80113e6:	4293      	cmp	r3, r2
 80113e8:	bfc4      	itt	gt
 80113ea:	1a9b      	subgt	r3, r3, r2
 80113ec:	18ed      	addgt	r5, r5, r3
 80113ee:	2600      	movs	r6, #0
 80113f0:	341a      	adds	r4, #26
 80113f2:	42b5      	cmp	r5, r6
 80113f4:	d11a      	bne.n	801142c <_printf_common+0xc8>
 80113f6:	2000      	movs	r0, #0
 80113f8:	e008      	b.n	801140c <_printf_common+0xa8>
 80113fa:	2301      	movs	r3, #1
 80113fc:	4652      	mov	r2, sl
 80113fe:	4641      	mov	r1, r8
 8011400:	4638      	mov	r0, r7
 8011402:	47c8      	blx	r9
 8011404:	3001      	adds	r0, #1
 8011406:	d103      	bne.n	8011410 <_printf_common+0xac>
 8011408:	f04f 30ff 	mov.w	r0, #4294967295
 801140c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011410:	3501      	adds	r5, #1
 8011412:	e7c6      	b.n	80113a2 <_printf_common+0x3e>
 8011414:	18e1      	adds	r1, r4, r3
 8011416:	1c5a      	adds	r2, r3, #1
 8011418:	2030      	movs	r0, #48	@ 0x30
 801141a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801141e:	4422      	add	r2, r4
 8011420:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011424:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011428:	3302      	adds	r3, #2
 801142a:	e7c7      	b.n	80113bc <_printf_common+0x58>
 801142c:	2301      	movs	r3, #1
 801142e:	4622      	mov	r2, r4
 8011430:	4641      	mov	r1, r8
 8011432:	4638      	mov	r0, r7
 8011434:	47c8      	blx	r9
 8011436:	3001      	adds	r0, #1
 8011438:	d0e6      	beq.n	8011408 <_printf_common+0xa4>
 801143a:	3601      	adds	r6, #1
 801143c:	e7d9      	b.n	80113f2 <_printf_common+0x8e>
	...

08011440 <_printf_i>:
 8011440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011444:	7e0f      	ldrb	r7, [r1, #24]
 8011446:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011448:	2f78      	cmp	r7, #120	@ 0x78
 801144a:	4691      	mov	r9, r2
 801144c:	4680      	mov	r8, r0
 801144e:	460c      	mov	r4, r1
 8011450:	469a      	mov	sl, r3
 8011452:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011456:	d807      	bhi.n	8011468 <_printf_i+0x28>
 8011458:	2f62      	cmp	r7, #98	@ 0x62
 801145a:	d80a      	bhi.n	8011472 <_printf_i+0x32>
 801145c:	2f00      	cmp	r7, #0
 801145e:	f000 80d2 	beq.w	8011606 <_printf_i+0x1c6>
 8011462:	2f58      	cmp	r7, #88	@ 0x58
 8011464:	f000 80b9 	beq.w	80115da <_printf_i+0x19a>
 8011468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801146c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011470:	e03a      	b.n	80114e8 <_printf_i+0xa8>
 8011472:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011476:	2b15      	cmp	r3, #21
 8011478:	d8f6      	bhi.n	8011468 <_printf_i+0x28>
 801147a:	a101      	add	r1, pc, #4	@ (adr r1, 8011480 <_printf_i+0x40>)
 801147c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011480:	080114d9 	.word	0x080114d9
 8011484:	080114ed 	.word	0x080114ed
 8011488:	08011469 	.word	0x08011469
 801148c:	08011469 	.word	0x08011469
 8011490:	08011469 	.word	0x08011469
 8011494:	08011469 	.word	0x08011469
 8011498:	080114ed 	.word	0x080114ed
 801149c:	08011469 	.word	0x08011469
 80114a0:	08011469 	.word	0x08011469
 80114a4:	08011469 	.word	0x08011469
 80114a8:	08011469 	.word	0x08011469
 80114ac:	080115ed 	.word	0x080115ed
 80114b0:	08011517 	.word	0x08011517
 80114b4:	080115a7 	.word	0x080115a7
 80114b8:	08011469 	.word	0x08011469
 80114bc:	08011469 	.word	0x08011469
 80114c0:	0801160f 	.word	0x0801160f
 80114c4:	08011469 	.word	0x08011469
 80114c8:	08011517 	.word	0x08011517
 80114cc:	08011469 	.word	0x08011469
 80114d0:	08011469 	.word	0x08011469
 80114d4:	080115af 	.word	0x080115af
 80114d8:	6833      	ldr	r3, [r6, #0]
 80114da:	1d1a      	adds	r2, r3, #4
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	6032      	str	r2, [r6, #0]
 80114e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80114e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80114e8:	2301      	movs	r3, #1
 80114ea:	e09d      	b.n	8011628 <_printf_i+0x1e8>
 80114ec:	6833      	ldr	r3, [r6, #0]
 80114ee:	6820      	ldr	r0, [r4, #0]
 80114f0:	1d19      	adds	r1, r3, #4
 80114f2:	6031      	str	r1, [r6, #0]
 80114f4:	0606      	lsls	r6, r0, #24
 80114f6:	d501      	bpl.n	80114fc <_printf_i+0xbc>
 80114f8:	681d      	ldr	r5, [r3, #0]
 80114fa:	e003      	b.n	8011504 <_printf_i+0xc4>
 80114fc:	0645      	lsls	r5, r0, #25
 80114fe:	d5fb      	bpl.n	80114f8 <_printf_i+0xb8>
 8011500:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011504:	2d00      	cmp	r5, #0
 8011506:	da03      	bge.n	8011510 <_printf_i+0xd0>
 8011508:	232d      	movs	r3, #45	@ 0x2d
 801150a:	426d      	negs	r5, r5
 801150c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011510:	4859      	ldr	r0, [pc, #356]	@ (8011678 <_printf_i+0x238>)
 8011512:	230a      	movs	r3, #10
 8011514:	e011      	b.n	801153a <_printf_i+0xfa>
 8011516:	6821      	ldr	r1, [r4, #0]
 8011518:	6833      	ldr	r3, [r6, #0]
 801151a:	0608      	lsls	r0, r1, #24
 801151c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011520:	d402      	bmi.n	8011528 <_printf_i+0xe8>
 8011522:	0649      	lsls	r1, r1, #25
 8011524:	bf48      	it	mi
 8011526:	b2ad      	uxthmi	r5, r5
 8011528:	2f6f      	cmp	r7, #111	@ 0x6f
 801152a:	4853      	ldr	r0, [pc, #332]	@ (8011678 <_printf_i+0x238>)
 801152c:	6033      	str	r3, [r6, #0]
 801152e:	bf14      	ite	ne
 8011530:	230a      	movne	r3, #10
 8011532:	2308      	moveq	r3, #8
 8011534:	2100      	movs	r1, #0
 8011536:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801153a:	6866      	ldr	r6, [r4, #4]
 801153c:	60a6      	str	r6, [r4, #8]
 801153e:	2e00      	cmp	r6, #0
 8011540:	bfa2      	ittt	ge
 8011542:	6821      	ldrge	r1, [r4, #0]
 8011544:	f021 0104 	bicge.w	r1, r1, #4
 8011548:	6021      	strge	r1, [r4, #0]
 801154a:	b90d      	cbnz	r5, 8011550 <_printf_i+0x110>
 801154c:	2e00      	cmp	r6, #0
 801154e:	d04b      	beq.n	80115e8 <_printf_i+0x1a8>
 8011550:	4616      	mov	r6, r2
 8011552:	fbb5 f1f3 	udiv	r1, r5, r3
 8011556:	fb03 5711 	mls	r7, r3, r1, r5
 801155a:	5dc7      	ldrb	r7, [r0, r7]
 801155c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011560:	462f      	mov	r7, r5
 8011562:	42bb      	cmp	r3, r7
 8011564:	460d      	mov	r5, r1
 8011566:	d9f4      	bls.n	8011552 <_printf_i+0x112>
 8011568:	2b08      	cmp	r3, #8
 801156a:	d10b      	bne.n	8011584 <_printf_i+0x144>
 801156c:	6823      	ldr	r3, [r4, #0]
 801156e:	07df      	lsls	r7, r3, #31
 8011570:	d508      	bpl.n	8011584 <_printf_i+0x144>
 8011572:	6923      	ldr	r3, [r4, #16]
 8011574:	6861      	ldr	r1, [r4, #4]
 8011576:	4299      	cmp	r1, r3
 8011578:	bfde      	ittt	le
 801157a:	2330      	movle	r3, #48	@ 0x30
 801157c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011580:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011584:	1b92      	subs	r2, r2, r6
 8011586:	6122      	str	r2, [r4, #16]
 8011588:	f8cd a000 	str.w	sl, [sp]
 801158c:	464b      	mov	r3, r9
 801158e:	aa03      	add	r2, sp, #12
 8011590:	4621      	mov	r1, r4
 8011592:	4640      	mov	r0, r8
 8011594:	f7ff fee6 	bl	8011364 <_printf_common>
 8011598:	3001      	adds	r0, #1
 801159a:	d14a      	bne.n	8011632 <_printf_i+0x1f2>
 801159c:	f04f 30ff 	mov.w	r0, #4294967295
 80115a0:	b004      	add	sp, #16
 80115a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115a6:	6823      	ldr	r3, [r4, #0]
 80115a8:	f043 0320 	orr.w	r3, r3, #32
 80115ac:	6023      	str	r3, [r4, #0]
 80115ae:	4833      	ldr	r0, [pc, #204]	@ (801167c <_printf_i+0x23c>)
 80115b0:	2778      	movs	r7, #120	@ 0x78
 80115b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80115b6:	6823      	ldr	r3, [r4, #0]
 80115b8:	6831      	ldr	r1, [r6, #0]
 80115ba:	061f      	lsls	r7, r3, #24
 80115bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80115c0:	d402      	bmi.n	80115c8 <_printf_i+0x188>
 80115c2:	065f      	lsls	r7, r3, #25
 80115c4:	bf48      	it	mi
 80115c6:	b2ad      	uxthmi	r5, r5
 80115c8:	6031      	str	r1, [r6, #0]
 80115ca:	07d9      	lsls	r1, r3, #31
 80115cc:	bf44      	itt	mi
 80115ce:	f043 0320 	orrmi.w	r3, r3, #32
 80115d2:	6023      	strmi	r3, [r4, #0]
 80115d4:	b11d      	cbz	r5, 80115de <_printf_i+0x19e>
 80115d6:	2310      	movs	r3, #16
 80115d8:	e7ac      	b.n	8011534 <_printf_i+0xf4>
 80115da:	4827      	ldr	r0, [pc, #156]	@ (8011678 <_printf_i+0x238>)
 80115dc:	e7e9      	b.n	80115b2 <_printf_i+0x172>
 80115de:	6823      	ldr	r3, [r4, #0]
 80115e0:	f023 0320 	bic.w	r3, r3, #32
 80115e4:	6023      	str	r3, [r4, #0]
 80115e6:	e7f6      	b.n	80115d6 <_printf_i+0x196>
 80115e8:	4616      	mov	r6, r2
 80115ea:	e7bd      	b.n	8011568 <_printf_i+0x128>
 80115ec:	6833      	ldr	r3, [r6, #0]
 80115ee:	6825      	ldr	r5, [r4, #0]
 80115f0:	6961      	ldr	r1, [r4, #20]
 80115f2:	1d18      	adds	r0, r3, #4
 80115f4:	6030      	str	r0, [r6, #0]
 80115f6:	062e      	lsls	r6, r5, #24
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	d501      	bpl.n	8011600 <_printf_i+0x1c0>
 80115fc:	6019      	str	r1, [r3, #0]
 80115fe:	e002      	b.n	8011606 <_printf_i+0x1c6>
 8011600:	0668      	lsls	r0, r5, #25
 8011602:	d5fb      	bpl.n	80115fc <_printf_i+0x1bc>
 8011604:	8019      	strh	r1, [r3, #0]
 8011606:	2300      	movs	r3, #0
 8011608:	6123      	str	r3, [r4, #16]
 801160a:	4616      	mov	r6, r2
 801160c:	e7bc      	b.n	8011588 <_printf_i+0x148>
 801160e:	6833      	ldr	r3, [r6, #0]
 8011610:	1d1a      	adds	r2, r3, #4
 8011612:	6032      	str	r2, [r6, #0]
 8011614:	681e      	ldr	r6, [r3, #0]
 8011616:	6862      	ldr	r2, [r4, #4]
 8011618:	2100      	movs	r1, #0
 801161a:	4630      	mov	r0, r6
 801161c:	f7ee fde0 	bl	80001e0 <memchr>
 8011620:	b108      	cbz	r0, 8011626 <_printf_i+0x1e6>
 8011622:	1b80      	subs	r0, r0, r6
 8011624:	6060      	str	r0, [r4, #4]
 8011626:	6863      	ldr	r3, [r4, #4]
 8011628:	6123      	str	r3, [r4, #16]
 801162a:	2300      	movs	r3, #0
 801162c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011630:	e7aa      	b.n	8011588 <_printf_i+0x148>
 8011632:	6923      	ldr	r3, [r4, #16]
 8011634:	4632      	mov	r2, r6
 8011636:	4649      	mov	r1, r9
 8011638:	4640      	mov	r0, r8
 801163a:	47d0      	blx	sl
 801163c:	3001      	adds	r0, #1
 801163e:	d0ad      	beq.n	801159c <_printf_i+0x15c>
 8011640:	6823      	ldr	r3, [r4, #0]
 8011642:	079b      	lsls	r3, r3, #30
 8011644:	d413      	bmi.n	801166e <_printf_i+0x22e>
 8011646:	68e0      	ldr	r0, [r4, #12]
 8011648:	9b03      	ldr	r3, [sp, #12]
 801164a:	4298      	cmp	r0, r3
 801164c:	bfb8      	it	lt
 801164e:	4618      	movlt	r0, r3
 8011650:	e7a6      	b.n	80115a0 <_printf_i+0x160>
 8011652:	2301      	movs	r3, #1
 8011654:	4632      	mov	r2, r6
 8011656:	4649      	mov	r1, r9
 8011658:	4640      	mov	r0, r8
 801165a:	47d0      	blx	sl
 801165c:	3001      	adds	r0, #1
 801165e:	d09d      	beq.n	801159c <_printf_i+0x15c>
 8011660:	3501      	adds	r5, #1
 8011662:	68e3      	ldr	r3, [r4, #12]
 8011664:	9903      	ldr	r1, [sp, #12]
 8011666:	1a5b      	subs	r3, r3, r1
 8011668:	42ab      	cmp	r3, r5
 801166a:	dcf2      	bgt.n	8011652 <_printf_i+0x212>
 801166c:	e7eb      	b.n	8011646 <_printf_i+0x206>
 801166e:	2500      	movs	r5, #0
 8011670:	f104 0619 	add.w	r6, r4, #25
 8011674:	e7f5      	b.n	8011662 <_printf_i+0x222>
 8011676:	bf00      	nop
 8011678:	08015c85 	.word	0x08015c85
 801167c:	08015c96 	.word	0x08015c96

08011680 <std>:
 8011680:	2300      	movs	r3, #0
 8011682:	b510      	push	{r4, lr}
 8011684:	4604      	mov	r4, r0
 8011686:	e9c0 3300 	strd	r3, r3, [r0]
 801168a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801168e:	6083      	str	r3, [r0, #8]
 8011690:	8181      	strh	r1, [r0, #12]
 8011692:	6643      	str	r3, [r0, #100]	@ 0x64
 8011694:	81c2      	strh	r2, [r0, #14]
 8011696:	6183      	str	r3, [r0, #24]
 8011698:	4619      	mov	r1, r3
 801169a:	2208      	movs	r2, #8
 801169c:	305c      	adds	r0, #92	@ 0x5c
 801169e:	f000 fa61 	bl	8011b64 <memset>
 80116a2:	4b0d      	ldr	r3, [pc, #52]	@ (80116d8 <std+0x58>)
 80116a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80116a6:	4b0d      	ldr	r3, [pc, #52]	@ (80116dc <std+0x5c>)
 80116a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80116aa:	4b0d      	ldr	r3, [pc, #52]	@ (80116e0 <std+0x60>)
 80116ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80116ae:	4b0d      	ldr	r3, [pc, #52]	@ (80116e4 <std+0x64>)
 80116b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80116b2:	4b0d      	ldr	r3, [pc, #52]	@ (80116e8 <std+0x68>)
 80116b4:	6224      	str	r4, [r4, #32]
 80116b6:	429c      	cmp	r4, r3
 80116b8:	d006      	beq.n	80116c8 <std+0x48>
 80116ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80116be:	4294      	cmp	r4, r2
 80116c0:	d002      	beq.n	80116c8 <std+0x48>
 80116c2:	33d0      	adds	r3, #208	@ 0xd0
 80116c4:	429c      	cmp	r4, r3
 80116c6:	d105      	bne.n	80116d4 <std+0x54>
 80116c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80116cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116d0:	f000 bafa 	b.w	8011cc8 <__retarget_lock_init_recursive>
 80116d4:	bd10      	pop	{r4, pc}
 80116d6:	bf00      	nop
 80116d8:	08011911 	.word	0x08011911
 80116dc:	08011933 	.word	0x08011933
 80116e0:	0801196b 	.word	0x0801196b
 80116e4:	0801198f 	.word	0x0801198f
 80116e8:	20000f20 	.word	0x20000f20

080116ec <stdio_exit_handler>:
 80116ec:	4a02      	ldr	r2, [pc, #8]	@ (80116f8 <stdio_exit_handler+0xc>)
 80116ee:	4903      	ldr	r1, [pc, #12]	@ (80116fc <stdio_exit_handler+0x10>)
 80116f0:	4803      	ldr	r0, [pc, #12]	@ (8011700 <stdio_exit_handler+0x14>)
 80116f2:	f000 b869 	b.w	80117c8 <_fwalk_sglue>
 80116f6:	bf00      	nop
 80116f8:	20000054 	.word	0x20000054
 80116fc:	08013655 	.word	0x08013655
 8011700:	20000064 	.word	0x20000064

08011704 <cleanup_stdio>:
 8011704:	6841      	ldr	r1, [r0, #4]
 8011706:	4b0c      	ldr	r3, [pc, #48]	@ (8011738 <cleanup_stdio+0x34>)
 8011708:	4299      	cmp	r1, r3
 801170a:	b510      	push	{r4, lr}
 801170c:	4604      	mov	r4, r0
 801170e:	d001      	beq.n	8011714 <cleanup_stdio+0x10>
 8011710:	f001 ffa0 	bl	8013654 <_fflush_r>
 8011714:	68a1      	ldr	r1, [r4, #8]
 8011716:	4b09      	ldr	r3, [pc, #36]	@ (801173c <cleanup_stdio+0x38>)
 8011718:	4299      	cmp	r1, r3
 801171a:	d002      	beq.n	8011722 <cleanup_stdio+0x1e>
 801171c:	4620      	mov	r0, r4
 801171e:	f001 ff99 	bl	8013654 <_fflush_r>
 8011722:	68e1      	ldr	r1, [r4, #12]
 8011724:	4b06      	ldr	r3, [pc, #24]	@ (8011740 <cleanup_stdio+0x3c>)
 8011726:	4299      	cmp	r1, r3
 8011728:	d004      	beq.n	8011734 <cleanup_stdio+0x30>
 801172a:	4620      	mov	r0, r4
 801172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011730:	f001 bf90 	b.w	8013654 <_fflush_r>
 8011734:	bd10      	pop	{r4, pc}
 8011736:	bf00      	nop
 8011738:	20000f20 	.word	0x20000f20
 801173c:	20000f88 	.word	0x20000f88
 8011740:	20000ff0 	.word	0x20000ff0

08011744 <global_stdio_init.part.0>:
 8011744:	b510      	push	{r4, lr}
 8011746:	4b0b      	ldr	r3, [pc, #44]	@ (8011774 <global_stdio_init.part.0+0x30>)
 8011748:	4c0b      	ldr	r4, [pc, #44]	@ (8011778 <global_stdio_init.part.0+0x34>)
 801174a:	4a0c      	ldr	r2, [pc, #48]	@ (801177c <global_stdio_init.part.0+0x38>)
 801174c:	601a      	str	r2, [r3, #0]
 801174e:	4620      	mov	r0, r4
 8011750:	2200      	movs	r2, #0
 8011752:	2104      	movs	r1, #4
 8011754:	f7ff ff94 	bl	8011680 <std>
 8011758:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801175c:	2201      	movs	r2, #1
 801175e:	2109      	movs	r1, #9
 8011760:	f7ff ff8e 	bl	8011680 <std>
 8011764:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011768:	2202      	movs	r2, #2
 801176a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801176e:	2112      	movs	r1, #18
 8011770:	f7ff bf86 	b.w	8011680 <std>
 8011774:	20001058 	.word	0x20001058
 8011778:	20000f20 	.word	0x20000f20
 801177c:	080116ed 	.word	0x080116ed

08011780 <__sfp_lock_acquire>:
 8011780:	4801      	ldr	r0, [pc, #4]	@ (8011788 <__sfp_lock_acquire+0x8>)
 8011782:	f000 baa2 	b.w	8011cca <__retarget_lock_acquire_recursive>
 8011786:	bf00      	nop
 8011788:	20001061 	.word	0x20001061

0801178c <__sfp_lock_release>:
 801178c:	4801      	ldr	r0, [pc, #4]	@ (8011794 <__sfp_lock_release+0x8>)
 801178e:	f000 ba9d 	b.w	8011ccc <__retarget_lock_release_recursive>
 8011792:	bf00      	nop
 8011794:	20001061 	.word	0x20001061

08011798 <__sinit>:
 8011798:	b510      	push	{r4, lr}
 801179a:	4604      	mov	r4, r0
 801179c:	f7ff fff0 	bl	8011780 <__sfp_lock_acquire>
 80117a0:	6a23      	ldr	r3, [r4, #32]
 80117a2:	b11b      	cbz	r3, 80117ac <__sinit+0x14>
 80117a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117a8:	f7ff bff0 	b.w	801178c <__sfp_lock_release>
 80117ac:	4b04      	ldr	r3, [pc, #16]	@ (80117c0 <__sinit+0x28>)
 80117ae:	6223      	str	r3, [r4, #32]
 80117b0:	4b04      	ldr	r3, [pc, #16]	@ (80117c4 <__sinit+0x2c>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d1f5      	bne.n	80117a4 <__sinit+0xc>
 80117b8:	f7ff ffc4 	bl	8011744 <global_stdio_init.part.0>
 80117bc:	e7f2      	b.n	80117a4 <__sinit+0xc>
 80117be:	bf00      	nop
 80117c0:	08011705 	.word	0x08011705
 80117c4:	20001058 	.word	0x20001058

080117c8 <_fwalk_sglue>:
 80117c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117cc:	4607      	mov	r7, r0
 80117ce:	4688      	mov	r8, r1
 80117d0:	4614      	mov	r4, r2
 80117d2:	2600      	movs	r6, #0
 80117d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117d8:	f1b9 0901 	subs.w	r9, r9, #1
 80117dc:	d505      	bpl.n	80117ea <_fwalk_sglue+0x22>
 80117de:	6824      	ldr	r4, [r4, #0]
 80117e0:	2c00      	cmp	r4, #0
 80117e2:	d1f7      	bne.n	80117d4 <_fwalk_sglue+0xc>
 80117e4:	4630      	mov	r0, r6
 80117e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117ea:	89ab      	ldrh	r3, [r5, #12]
 80117ec:	2b01      	cmp	r3, #1
 80117ee:	d907      	bls.n	8011800 <_fwalk_sglue+0x38>
 80117f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80117f4:	3301      	adds	r3, #1
 80117f6:	d003      	beq.n	8011800 <_fwalk_sglue+0x38>
 80117f8:	4629      	mov	r1, r5
 80117fa:	4638      	mov	r0, r7
 80117fc:	47c0      	blx	r8
 80117fe:	4306      	orrs	r6, r0
 8011800:	3568      	adds	r5, #104	@ 0x68
 8011802:	e7e9      	b.n	80117d8 <_fwalk_sglue+0x10>

08011804 <putchar>:
 8011804:	4b02      	ldr	r3, [pc, #8]	@ (8011810 <putchar+0xc>)
 8011806:	4601      	mov	r1, r0
 8011808:	6818      	ldr	r0, [r3, #0]
 801180a:	6882      	ldr	r2, [r0, #8]
 801180c:	f001 bfac 	b.w	8013768 <_putc_r>
 8011810:	20000060 	.word	0x20000060

08011814 <_puts_r>:
 8011814:	6a03      	ldr	r3, [r0, #32]
 8011816:	b570      	push	{r4, r5, r6, lr}
 8011818:	6884      	ldr	r4, [r0, #8]
 801181a:	4605      	mov	r5, r0
 801181c:	460e      	mov	r6, r1
 801181e:	b90b      	cbnz	r3, 8011824 <_puts_r+0x10>
 8011820:	f7ff ffba 	bl	8011798 <__sinit>
 8011824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011826:	07db      	lsls	r3, r3, #31
 8011828:	d405      	bmi.n	8011836 <_puts_r+0x22>
 801182a:	89a3      	ldrh	r3, [r4, #12]
 801182c:	0598      	lsls	r0, r3, #22
 801182e:	d402      	bmi.n	8011836 <_puts_r+0x22>
 8011830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011832:	f000 fa4a 	bl	8011cca <__retarget_lock_acquire_recursive>
 8011836:	89a3      	ldrh	r3, [r4, #12]
 8011838:	0719      	lsls	r1, r3, #28
 801183a:	d502      	bpl.n	8011842 <_puts_r+0x2e>
 801183c:	6923      	ldr	r3, [r4, #16]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d135      	bne.n	80118ae <_puts_r+0x9a>
 8011842:	4621      	mov	r1, r4
 8011844:	4628      	mov	r0, r5
 8011846:	f000 f91d 	bl	8011a84 <__swsetup_r>
 801184a:	b380      	cbz	r0, 80118ae <_puts_r+0x9a>
 801184c:	f04f 35ff 	mov.w	r5, #4294967295
 8011850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011852:	07da      	lsls	r2, r3, #31
 8011854:	d405      	bmi.n	8011862 <_puts_r+0x4e>
 8011856:	89a3      	ldrh	r3, [r4, #12]
 8011858:	059b      	lsls	r3, r3, #22
 801185a:	d402      	bmi.n	8011862 <_puts_r+0x4e>
 801185c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801185e:	f000 fa35 	bl	8011ccc <__retarget_lock_release_recursive>
 8011862:	4628      	mov	r0, r5
 8011864:	bd70      	pop	{r4, r5, r6, pc}
 8011866:	2b00      	cmp	r3, #0
 8011868:	da04      	bge.n	8011874 <_puts_r+0x60>
 801186a:	69a2      	ldr	r2, [r4, #24]
 801186c:	429a      	cmp	r2, r3
 801186e:	dc17      	bgt.n	80118a0 <_puts_r+0x8c>
 8011870:	290a      	cmp	r1, #10
 8011872:	d015      	beq.n	80118a0 <_puts_r+0x8c>
 8011874:	6823      	ldr	r3, [r4, #0]
 8011876:	1c5a      	adds	r2, r3, #1
 8011878:	6022      	str	r2, [r4, #0]
 801187a:	7019      	strb	r1, [r3, #0]
 801187c:	68a3      	ldr	r3, [r4, #8]
 801187e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011882:	3b01      	subs	r3, #1
 8011884:	60a3      	str	r3, [r4, #8]
 8011886:	2900      	cmp	r1, #0
 8011888:	d1ed      	bne.n	8011866 <_puts_r+0x52>
 801188a:	2b00      	cmp	r3, #0
 801188c:	da11      	bge.n	80118b2 <_puts_r+0x9e>
 801188e:	4622      	mov	r2, r4
 8011890:	210a      	movs	r1, #10
 8011892:	4628      	mov	r0, r5
 8011894:	f000 f8b8 	bl	8011a08 <__swbuf_r>
 8011898:	3001      	adds	r0, #1
 801189a:	d0d7      	beq.n	801184c <_puts_r+0x38>
 801189c:	250a      	movs	r5, #10
 801189e:	e7d7      	b.n	8011850 <_puts_r+0x3c>
 80118a0:	4622      	mov	r2, r4
 80118a2:	4628      	mov	r0, r5
 80118a4:	f000 f8b0 	bl	8011a08 <__swbuf_r>
 80118a8:	3001      	adds	r0, #1
 80118aa:	d1e7      	bne.n	801187c <_puts_r+0x68>
 80118ac:	e7ce      	b.n	801184c <_puts_r+0x38>
 80118ae:	3e01      	subs	r6, #1
 80118b0:	e7e4      	b.n	801187c <_puts_r+0x68>
 80118b2:	6823      	ldr	r3, [r4, #0]
 80118b4:	1c5a      	adds	r2, r3, #1
 80118b6:	6022      	str	r2, [r4, #0]
 80118b8:	220a      	movs	r2, #10
 80118ba:	701a      	strb	r2, [r3, #0]
 80118bc:	e7ee      	b.n	801189c <_puts_r+0x88>
	...

080118c0 <puts>:
 80118c0:	4b02      	ldr	r3, [pc, #8]	@ (80118cc <puts+0xc>)
 80118c2:	4601      	mov	r1, r0
 80118c4:	6818      	ldr	r0, [r3, #0]
 80118c6:	f7ff bfa5 	b.w	8011814 <_puts_r>
 80118ca:	bf00      	nop
 80118cc:	20000060 	.word	0x20000060

080118d0 <siprintf>:
 80118d0:	b40e      	push	{r1, r2, r3}
 80118d2:	b500      	push	{lr}
 80118d4:	b09c      	sub	sp, #112	@ 0x70
 80118d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80118d8:	9002      	str	r0, [sp, #8]
 80118da:	9006      	str	r0, [sp, #24]
 80118dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80118e0:	4809      	ldr	r0, [pc, #36]	@ (8011908 <siprintf+0x38>)
 80118e2:	9107      	str	r1, [sp, #28]
 80118e4:	9104      	str	r1, [sp, #16]
 80118e6:	4909      	ldr	r1, [pc, #36]	@ (801190c <siprintf+0x3c>)
 80118e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80118ec:	9105      	str	r1, [sp, #20]
 80118ee:	6800      	ldr	r0, [r0, #0]
 80118f0:	9301      	str	r3, [sp, #4]
 80118f2:	a902      	add	r1, sp, #8
 80118f4:	f001 fd2e 	bl	8013354 <_svfiprintf_r>
 80118f8:	9b02      	ldr	r3, [sp, #8]
 80118fa:	2200      	movs	r2, #0
 80118fc:	701a      	strb	r2, [r3, #0]
 80118fe:	b01c      	add	sp, #112	@ 0x70
 8011900:	f85d eb04 	ldr.w	lr, [sp], #4
 8011904:	b003      	add	sp, #12
 8011906:	4770      	bx	lr
 8011908:	20000060 	.word	0x20000060
 801190c:	ffff0208 	.word	0xffff0208

08011910 <__sread>:
 8011910:	b510      	push	{r4, lr}
 8011912:	460c      	mov	r4, r1
 8011914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011918:	f000 f988 	bl	8011c2c <_read_r>
 801191c:	2800      	cmp	r0, #0
 801191e:	bfab      	itete	ge
 8011920:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011922:	89a3      	ldrhlt	r3, [r4, #12]
 8011924:	181b      	addge	r3, r3, r0
 8011926:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801192a:	bfac      	ite	ge
 801192c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801192e:	81a3      	strhlt	r3, [r4, #12]
 8011930:	bd10      	pop	{r4, pc}

08011932 <__swrite>:
 8011932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011936:	461f      	mov	r7, r3
 8011938:	898b      	ldrh	r3, [r1, #12]
 801193a:	05db      	lsls	r3, r3, #23
 801193c:	4605      	mov	r5, r0
 801193e:	460c      	mov	r4, r1
 8011940:	4616      	mov	r6, r2
 8011942:	d505      	bpl.n	8011950 <__swrite+0x1e>
 8011944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011948:	2302      	movs	r3, #2
 801194a:	2200      	movs	r2, #0
 801194c:	f000 f95c 	bl	8011c08 <_lseek_r>
 8011950:	89a3      	ldrh	r3, [r4, #12]
 8011952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011956:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801195a:	81a3      	strh	r3, [r4, #12]
 801195c:	4632      	mov	r2, r6
 801195e:	463b      	mov	r3, r7
 8011960:	4628      	mov	r0, r5
 8011962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011966:	f000 b973 	b.w	8011c50 <_write_r>

0801196a <__sseek>:
 801196a:	b510      	push	{r4, lr}
 801196c:	460c      	mov	r4, r1
 801196e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011972:	f000 f949 	bl	8011c08 <_lseek_r>
 8011976:	1c43      	adds	r3, r0, #1
 8011978:	89a3      	ldrh	r3, [r4, #12]
 801197a:	bf15      	itete	ne
 801197c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801197e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011982:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011986:	81a3      	strheq	r3, [r4, #12]
 8011988:	bf18      	it	ne
 801198a:	81a3      	strhne	r3, [r4, #12]
 801198c:	bd10      	pop	{r4, pc}

0801198e <__sclose>:
 801198e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011992:	f000 b929 	b.w	8011be8 <_close_r>

08011996 <_vsniprintf_r>:
 8011996:	b530      	push	{r4, r5, lr}
 8011998:	4614      	mov	r4, r2
 801199a:	2c00      	cmp	r4, #0
 801199c:	b09b      	sub	sp, #108	@ 0x6c
 801199e:	4605      	mov	r5, r0
 80119a0:	461a      	mov	r2, r3
 80119a2:	da05      	bge.n	80119b0 <_vsniprintf_r+0x1a>
 80119a4:	238b      	movs	r3, #139	@ 0x8b
 80119a6:	6003      	str	r3, [r0, #0]
 80119a8:	f04f 30ff 	mov.w	r0, #4294967295
 80119ac:	b01b      	add	sp, #108	@ 0x6c
 80119ae:	bd30      	pop	{r4, r5, pc}
 80119b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80119b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80119b8:	bf14      	ite	ne
 80119ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80119be:	4623      	moveq	r3, r4
 80119c0:	9302      	str	r3, [sp, #8]
 80119c2:	9305      	str	r3, [sp, #20]
 80119c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80119c8:	9100      	str	r1, [sp, #0]
 80119ca:	9104      	str	r1, [sp, #16]
 80119cc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80119d0:	4669      	mov	r1, sp
 80119d2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80119d4:	f001 fcbe 	bl	8013354 <_svfiprintf_r>
 80119d8:	1c43      	adds	r3, r0, #1
 80119da:	bfbc      	itt	lt
 80119dc:	238b      	movlt	r3, #139	@ 0x8b
 80119de:	602b      	strlt	r3, [r5, #0]
 80119e0:	2c00      	cmp	r4, #0
 80119e2:	d0e3      	beq.n	80119ac <_vsniprintf_r+0x16>
 80119e4:	9b00      	ldr	r3, [sp, #0]
 80119e6:	2200      	movs	r2, #0
 80119e8:	701a      	strb	r2, [r3, #0]
 80119ea:	e7df      	b.n	80119ac <_vsniprintf_r+0x16>

080119ec <vsniprintf>:
 80119ec:	b507      	push	{r0, r1, r2, lr}
 80119ee:	9300      	str	r3, [sp, #0]
 80119f0:	4613      	mov	r3, r2
 80119f2:	460a      	mov	r2, r1
 80119f4:	4601      	mov	r1, r0
 80119f6:	4803      	ldr	r0, [pc, #12]	@ (8011a04 <vsniprintf+0x18>)
 80119f8:	6800      	ldr	r0, [r0, #0]
 80119fa:	f7ff ffcc 	bl	8011996 <_vsniprintf_r>
 80119fe:	b003      	add	sp, #12
 8011a00:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a04:	20000060 	.word	0x20000060

08011a08 <__swbuf_r>:
 8011a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a0a:	460e      	mov	r6, r1
 8011a0c:	4614      	mov	r4, r2
 8011a0e:	4605      	mov	r5, r0
 8011a10:	b118      	cbz	r0, 8011a1a <__swbuf_r+0x12>
 8011a12:	6a03      	ldr	r3, [r0, #32]
 8011a14:	b90b      	cbnz	r3, 8011a1a <__swbuf_r+0x12>
 8011a16:	f7ff febf 	bl	8011798 <__sinit>
 8011a1a:	69a3      	ldr	r3, [r4, #24]
 8011a1c:	60a3      	str	r3, [r4, #8]
 8011a1e:	89a3      	ldrh	r3, [r4, #12]
 8011a20:	071a      	lsls	r2, r3, #28
 8011a22:	d501      	bpl.n	8011a28 <__swbuf_r+0x20>
 8011a24:	6923      	ldr	r3, [r4, #16]
 8011a26:	b943      	cbnz	r3, 8011a3a <__swbuf_r+0x32>
 8011a28:	4621      	mov	r1, r4
 8011a2a:	4628      	mov	r0, r5
 8011a2c:	f000 f82a 	bl	8011a84 <__swsetup_r>
 8011a30:	b118      	cbz	r0, 8011a3a <__swbuf_r+0x32>
 8011a32:	f04f 37ff 	mov.w	r7, #4294967295
 8011a36:	4638      	mov	r0, r7
 8011a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a3a:	6823      	ldr	r3, [r4, #0]
 8011a3c:	6922      	ldr	r2, [r4, #16]
 8011a3e:	1a98      	subs	r0, r3, r2
 8011a40:	6963      	ldr	r3, [r4, #20]
 8011a42:	b2f6      	uxtb	r6, r6
 8011a44:	4283      	cmp	r3, r0
 8011a46:	4637      	mov	r7, r6
 8011a48:	dc05      	bgt.n	8011a56 <__swbuf_r+0x4e>
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f001 fe01 	bl	8013654 <_fflush_r>
 8011a52:	2800      	cmp	r0, #0
 8011a54:	d1ed      	bne.n	8011a32 <__swbuf_r+0x2a>
 8011a56:	68a3      	ldr	r3, [r4, #8]
 8011a58:	3b01      	subs	r3, #1
 8011a5a:	60a3      	str	r3, [r4, #8]
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	1c5a      	adds	r2, r3, #1
 8011a60:	6022      	str	r2, [r4, #0]
 8011a62:	701e      	strb	r6, [r3, #0]
 8011a64:	6962      	ldr	r2, [r4, #20]
 8011a66:	1c43      	adds	r3, r0, #1
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d004      	beq.n	8011a76 <__swbuf_r+0x6e>
 8011a6c:	89a3      	ldrh	r3, [r4, #12]
 8011a6e:	07db      	lsls	r3, r3, #31
 8011a70:	d5e1      	bpl.n	8011a36 <__swbuf_r+0x2e>
 8011a72:	2e0a      	cmp	r6, #10
 8011a74:	d1df      	bne.n	8011a36 <__swbuf_r+0x2e>
 8011a76:	4621      	mov	r1, r4
 8011a78:	4628      	mov	r0, r5
 8011a7a:	f001 fdeb 	bl	8013654 <_fflush_r>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	d0d9      	beq.n	8011a36 <__swbuf_r+0x2e>
 8011a82:	e7d6      	b.n	8011a32 <__swbuf_r+0x2a>

08011a84 <__swsetup_r>:
 8011a84:	b538      	push	{r3, r4, r5, lr}
 8011a86:	4b29      	ldr	r3, [pc, #164]	@ (8011b2c <__swsetup_r+0xa8>)
 8011a88:	4605      	mov	r5, r0
 8011a8a:	6818      	ldr	r0, [r3, #0]
 8011a8c:	460c      	mov	r4, r1
 8011a8e:	b118      	cbz	r0, 8011a98 <__swsetup_r+0x14>
 8011a90:	6a03      	ldr	r3, [r0, #32]
 8011a92:	b90b      	cbnz	r3, 8011a98 <__swsetup_r+0x14>
 8011a94:	f7ff fe80 	bl	8011798 <__sinit>
 8011a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a9c:	0719      	lsls	r1, r3, #28
 8011a9e:	d422      	bmi.n	8011ae6 <__swsetup_r+0x62>
 8011aa0:	06da      	lsls	r2, r3, #27
 8011aa2:	d407      	bmi.n	8011ab4 <__swsetup_r+0x30>
 8011aa4:	2209      	movs	r2, #9
 8011aa6:	602a      	str	r2, [r5, #0]
 8011aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011aac:	81a3      	strh	r3, [r4, #12]
 8011aae:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab2:	e033      	b.n	8011b1c <__swsetup_r+0x98>
 8011ab4:	0758      	lsls	r0, r3, #29
 8011ab6:	d512      	bpl.n	8011ade <__swsetup_r+0x5a>
 8011ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011aba:	b141      	cbz	r1, 8011ace <__swsetup_r+0x4a>
 8011abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ac0:	4299      	cmp	r1, r3
 8011ac2:	d002      	beq.n	8011aca <__swsetup_r+0x46>
 8011ac4:	4628      	mov	r0, r5
 8011ac6:	f000 ff67 	bl	8012998 <_free_r>
 8011aca:	2300      	movs	r3, #0
 8011acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ace:	89a3      	ldrh	r3, [r4, #12]
 8011ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011ad4:	81a3      	strh	r3, [r4, #12]
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	6063      	str	r3, [r4, #4]
 8011ada:	6923      	ldr	r3, [r4, #16]
 8011adc:	6023      	str	r3, [r4, #0]
 8011ade:	89a3      	ldrh	r3, [r4, #12]
 8011ae0:	f043 0308 	orr.w	r3, r3, #8
 8011ae4:	81a3      	strh	r3, [r4, #12]
 8011ae6:	6923      	ldr	r3, [r4, #16]
 8011ae8:	b94b      	cbnz	r3, 8011afe <__swsetup_r+0x7a>
 8011aea:	89a3      	ldrh	r3, [r4, #12]
 8011aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011af4:	d003      	beq.n	8011afe <__swsetup_r+0x7a>
 8011af6:	4621      	mov	r1, r4
 8011af8:	4628      	mov	r0, r5
 8011afa:	f001 fdf9 	bl	80136f0 <__smakebuf_r>
 8011afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b02:	f013 0201 	ands.w	r2, r3, #1
 8011b06:	d00a      	beq.n	8011b1e <__swsetup_r+0x9a>
 8011b08:	2200      	movs	r2, #0
 8011b0a:	60a2      	str	r2, [r4, #8]
 8011b0c:	6962      	ldr	r2, [r4, #20]
 8011b0e:	4252      	negs	r2, r2
 8011b10:	61a2      	str	r2, [r4, #24]
 8011b12:	6922      	ldr	r2, [r4, #16]
 8011b14:	b942      	cbnz	r2, 8011b28 <__swsetup_r+0xa4>
 8011b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011b1a:	d1c5      	bne.n	8011aa8 <__swsetup_r+0x24>
 8011b1c:	bd38      	pop	{r3, r4, r5, pc}
 8011b1e:	0799      	lsls	r1, r3, #30
 8011b20:	bf58      	it	pl
 8011b22:	6962      	ldrpl	r2, [r4, #20]
 8011b24:	60a2      	str	r2, [r4, #8]
 8011b26:	e7f4      	b.n	8011b12 <__swsetup_r+0x8e>
 8011b28:	2000      	movs	r0, #0
 8011b2a:	e7f7      	b.n	8011b1c <__swsetup_r+0x98>
 8011b2c:	20000060 	.word	0x20000060

08011b30 <memmove>:
 8011b30:	4288      	cmp	r0, r1
 8011b32:	b510      	push	{r4, lr}
 8011b34:	eb01 0402 	add.w	r4, r1, r2
 8011b38:	d902      	bls.n	8011b40 <memmove+0x10>
 8011b3a:	4284      	cmp	r4, r0
 8011b3c:	4623      	mov	r3, r4
 8011b3e:	d807      	bhi.n	8011b50 <memmove+0x20>
 8011b40:	1e43      	subs	r3, r0, #1
 8011b42:	42a1      	cmp	r1, r4
 8011b44:	d008      	beq.n	8011b58 <memmove+0x28>
 8011b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b4e:	e7f8      	b.n	8011b42 <memmove+0x12>
 8011b50:	4402      	add	r2, r0
 8011b52:	4601      	mov	r1, r0
 8011b54:	428a      	cmp	r2, r1
 8011b56:	d100      	bne.n	8011b5a <memmove+0x2a>
 8011b58:	bd10      	pop	{r4, pc}
 8011b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011b62:	e7f7      	b.n	8011b54 <memmove+0x24>

08011b64 <memset>:
 8011b64:	4402      	add	r2, r0
 8011b66:	4603      	mov	r3, r0
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d100      	bne.n	8011b6e <memset+0xa>
 8011b6c:	4770      	bx	lr
 8011b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8011b72:	e7f9      	b.n	8011b68 <memset+0x4>

08011b74 <strchr>:
 8011b74:	b2c9      	uxtb	r1, r1
 8011b76:	4603      	mov	r3, r0
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b7e:	b112      	cbz	r2, 8011b86 <strchr+0x12>
 8011b80:	428a      	cmp	r2, r1
 8011b82:	d1f9      	bne.n	8011b78 <strchr+0x4>
 8011b84:	4770      	bx	lr
 8011b86:	2900      	cmp	r1, #0
 8011b88:	bf18      	it	ne
 8011b8a:	2000      	movne	r0, #0
 8011b8c:	4770      	bx	lr

08011b8e <strncpy>:
 8011b8e:	b510      	push	{r4, lr}
 8011b90:	3901      	subs	r1, #1
 8011b92:	4603      	mov	r3, r0
 8011b94:	b132      	cbz	r2, 8011ba4 <strncpy+0x16>
 8011b96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011b9a:	f803 4b01 	strb.w	r4, [r3], #1
 8011b9e:	3a01      	subs	r2, #1
 8011ba0:	2c00      	cmp	r4, #0
 8011ba2:	d1f7      	bne.n	8011b94 <strncpy+0x6>
 8011ba4:	441a      	add	r2, r3
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d100      	bne.n	8011bae <strncpy+0x20>
 8011bac:	bd10      	pop	{r4, pc}
 8011bae:	f803 1b01 	strb.w	r1, [r3], #1
 8011bb2:	e7f9      	b.n	8011ba8 <strncpy+0x1a>

08011bb4 <strstr>:
 8011bb4:	780a      	ldrb	r2, [r1, #0]
 8011bb6:	b570      	push	{r4, r5, r6, lr}
 8011bb8:	b96a      	cbnz	r2, 8011bd6 <strstr+0x22>
 8011bba:	bd70      	pop	{r4, r5, r6, pc}
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d109      	bne.n	8011bd4 <strstr+0x20>
 8011bc0:	460c      	mov	r4, r1
 8011bc2:	4605      	mov	r5, r0
 8011bc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d0f6      	beq.n	8011bba <strstr+0x6>
 8011bcc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8011bd0:	429e      	cmp	r6, r3
 8011bd2:	d0f7      	beq.n	8011bc4 <strstr+0x10>
 8011bd4:	3001      	adds	r0, #1
 8011bd6:	7803      	ldrb	r3, [r0, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d1ef      	bne.n	8011bbc <strstr+0x8>
 8011bdc:	4618      	mov	r0, r3
 8011bde:	e7ec      	b.n	8011bba <strstr+0x6>

08011be0 <_localeconv_r>:
 8011be0:	4800      	ldr	r0, [pc, #0]	@ (8011be4 <_localeconv_r+0x4>)
 8011be2:	4770      	bx	lr
 8011be4:	200001a0 	.word	0x200001a0

08011be8 <_close_r>:
 8011be8:	b538      	push	{r3, r4, r5, lr}
 8011bea:	4d06      	ldr	r5, [pc, #24]	@ (8011c04 <_close_r+0x1c>)
 8011bec:	2300      	movs	r3, #0
 8011bee:	4604      	mov	r4, r0
 8011bf0:	4608      	mov	r0, r1
 8011bf2:	602b      	str	r3, [r5, #0]
 8011bf4:	f7f1 fd92 	bl	800371c <_close>
 8011bf8:	1c43      	adds	r3, r0, #1
 8011bfa:	d102      	bne.n	8011c02 <_close_r+0x1a>
 8011bfc:	682b      	ldr	r3, [r5, #0]
 8011bfe:	b103      	cbz	r3, 8011c02 <_close_r+0x1a>
 8011c00:	6023      	str	r3, [r4, #0]
 8011c02:	bd38      	pop	{r3, r4, r5, pc}
 8011c04:	2000105c 	.word	0x2000105c

08011c08 <_lseek_r>:
 8011c08:	b538      	push	{r3, r4, r5, lr}
 8011c0a:	4d07      	ldr	r5, [pc, #28]	@ (8011c28 <_lseek_r+0x20>)
 8011c0c:	4604      	mov	r4, r0
 8011c0e:	4608      	mov	r0, r1
 8011c10:	4611      	mov	r1, r2
 8011c12:	2200      	movs	r2, #0
 8011c14:	602a      	str	r2, [r5, #0]
 8011c16:	461a      	mov	r2, r3
 8011c18:	f7f1 fda7 	bl	800376a <_lseek>
 8011c1c:	1c43      	adds	r3, r0, #1
 8011c1e:	d102      	bne.n	8011c26 <_lseek_r+0x1e>
 8011c20:	682b      	ldr	r3, [r5, #0]
 8011c22:	b103      	cbz	r3, 8011c26 <_lseek_r+0x1e>
 8011c24:	6023      	str	r3, [r4, #0]
 8011c26:	bd38      	pop	{r3, r4, r5, pc}
 8011c28:	2000105c 	.word	0x2000105c

08011c2c <_read_r>:
 8011c2c:	b538      	push	{r3, r4, r5, lr}
 8011c2e:	4d07      	ldr	r5, [pc, #28]	@ (8011c4c <_read_r+0x20>)
 8011c30:	4604      	mov	r4, r0
 8011c32:	4608      	mov	r0, r1
 8011c34:	4611      	mov	r1, r2
 8011c36:	2200      	movs	r2, #0
 8011c38:	602a      	str	r2, [r5, #0]
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	f7f1 fd35 	bl	80036aa <_read>
 8011c40:	1c43      	adds	r3, r0, #1
 8011c42:	d102      	bne.n	8011c4a <_read_r+0x1e>
 8011c44:	682b      	ldr	r3, [r5, #0]
 8011c46:	b103      	cbz	r3, 8011c4a <_read_r+0x1e>
 8011c48:	6023      	str	r3, [r4, #0]
 8011c4a:	bd38      	pop	{r3, r4, r5, pc}
 8011c4c:	2000105c 	.word	0x2000105c

08011c50 <_write_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4d07      	ldr	r5, [pc, #28]	@ (8011c70 <_write_r+0x20>)
 8011c54:	4604      	mov	r4, r0
 8011c56:	4608      	mov	r0, r1
 8011c58:	4611      	mov	r1, r2
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	602a      	str	r2, [r5, #0]
 8011c5e:	461a      	mov	r2, r3
 8011c60:	f7f1 fd40 	bl	80036e4 <_write>
 8011c64:	1c43      	adds	r3, r0, #1
 8011c66:	d102      	bne.n	8011c6e <_write_r+0x1e>
 8011c68:	682b      	ldr	r3, [r5, #0]
 8011c6a:	b103      	cbz	r3, 8011c6e <_write_r+0x1e>
 8011c6c:	6023      	str	r3, [r4, #0]
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	2000105c 	.word	0x2000105c

08011c74 <__errno>:
 8011c74:	4b01      	ldr	r3, [pc, #4]	@ (8011c7c <__errno+0x8>)
 8011c76:	6818      	ldr	r0, [r3, #0]
 8011c78:	4770      	bx	lr
 8011c7a:	bf00      	nop
 8011c7c:	20000060 	.word	0x20000060

08011c80 <__libc_init_array>:
 8011c80:	b570      	push	{r4, r5, r6, lr}
 8011c82:	4d0d      	ldr	r5, [pc, #52]	@ (8011cb8 <__libc_init_array+0x38>)
 8011c84:	4c0d      	ldr	r4, [pc, #52]	@ (8011cbc <__libc_init_array+0x3c>)
 8011c86:	1b64      	subs	r4, r4, r5
 8011c88:	10a4      	asrs	r4, r4, #2
 8011c8a:	2600      	movs	r6, #0
 8011c8c:	42a6      	cmp	r6, r4
 8011c8e:	d109      	bne.n	8011ca4 <__libc_init_array+0x24>
 8011c90:	4d0b      	ldr	r5, [pc, #44]	@ (8011cc0 <__libc_init_array+0x40>)
 8011c92:	4c0c      	ldr	r4, [pc, #48]	@ (8011cc4 <__libc_init_array+0x44>)
 8011c94:	f001 fff4 	bl	8013c80 <_init>
 8011c98:	1b64      	subs	r4, r4, r5
 8011c9a:	10a4      	asrs	r4, r4, #2
 8011c9c:	2600      	movs	r6, #0
 8011c9e:	42a6      	cmp	r6, r4
 8011ca0:	d105      	bne.n	8011cae <__libc_init_array+0x2e>
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ca8:	4798      	blx	r3
 8011caa:	3601      	adds	r6, #1
 8011cac:	e7ee      	b.n	8011c8c <__libc_init_array+0xc>
 8011cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cb2:	4798      	blx	r3
 8011cb4:	3601      	adds	r6, #1
 8011cb6:	e7f2      	b.n	8011c9e <__libc_init_array+0x1e>
 8011cb8:	08015ef0 	.word	0x08015ef0
 8011cbc:	08015ef0 	.word	0x08015ef0
 8011cc0:	08015ef0 	.word	0x08015ef0
 8011cc4:	08015ef4 	.word	0x08015ef4

08011cc8 <__retarget_lock_init_recursive>:
 8011cc8:	4770      	bx	lr

08011cca <__retarget_lock_acquire_recursive>:
 8011cca:	4770      	bx	lr

08011ccc <__retarget_lock_release_recursive>:
 8011ccc:	4770      	bx	lr

08011cce <strcpy>:
 8011cce:	4603      	mov	r3, r0
 8011cd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011cd4:	f803 2b01 	strb.w	r2, [r3], #1
 8011cd8:	2a00      	cmp	r2, #0
 8011cda:	d1f9      	bne.n	8011cd0 <strcpy+0x2>
 8011cdc:	4770      	bx	lr

08011cde <memcpy>:
 8011cde:	440a      	add	r2, r1
 8011ce0:	4291      	cmp	r1, r2
 8011ce2:	f100 33ff 	add.w	r3, r0, #4294967295
 8011ce6:	d100      	bne.n	8011cea <memcpy+0xc>
 8011ce8:	4770      	bx	lr
 8011cea:	b510      	push	{r4, lr}
 8011cec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cf4:	4291      	cmp	r1, r2
 8011cf6:	d1f9      	bne.n	8011cec <memcpy+0xe>
 8011cf8:	bd10      	pop	{r4, pc}

08011cfa <quorem>:
 8011cfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cfe:	6903      	ldr	r3, [r0, #16]
 8011d00:	690c      	ldr	r4, [r1, #16]
 8011d02:	42a3      	cmp	r3, r4
 8011d04:	4607      	mov	r7, r0
 8011d06:	db7e      	blt.n	8011e06 <quorem+0x10c>
 8011d08:	3c01      	subs	r4, #1
 8011d0a:	f101 0814 	add.w	r8, r1, #20
 8011d0e:	00a3      	lsls	r3, r4, #2
 8011d10:	f100 0514 	add.w	r5, r0, #20
 8011d14:	9300      	str	r3, [sp, #0]
 8011d16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d1a:	9301      	str	r3, [sp, #4]
 8011d1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d24:	3301      	adds	r3, #1
 8011d26:	429a      	cmp	r2, r3
 8011d28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d30:	d32e      	bcc.n	8011d90 <quorem+0x96>
 8011d32:	f04f 0a00 	mov.w	sl, #0
 8011d36:	46c4      	mov	ip, r8
 8011d38:	46ae      	mov	lr, r5
 8011d3a:	46d3      	mov	fp, sl
 8011d3c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011d40:	b298      	uxth	r0, r3
 8011d42:	fb06 a000 	mla	r0, r6, r0, sl
 8011d46:	0c02      	lsrs	r2, r0, #16
 8011d48:	0c1b      	lsrs	r3, r3, #16
 8011d4a:	fb06 2303 	mla	r3, r6, r3, r2
 8011d4e:	f8de 2000 	ldr.w	r2, [lr]
 8011d52:	b280      	uxth	r0, r0
 8011d54:	b292      	uxth	r2, r2
 8011d56:	1a12      	subs	r2, r2, r0
 8011d58:	445a      	add	r2, fp
 8011d5a:	f8de 0000 	ldr.w	r0, [lr]
 8011d5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011d68:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011d6c:	b292      	uxth	r2, r2
 8011d6e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011d72:	45e1      	cmp	r9, ip
 8011d74:	f84e 2b04 	str.w	r2, [lr], #4
 8011d78:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011d7c:	d2de      	bcs.n	8011d3c <quorem+0x42>
 8011d7e:	9b00      	ldr	r3, [sp, #0]
 8011d80:	58eb      	ldr	r3, [r5, r3]
 8011d82:	b92b      	cbnz	r3, 8011d90 <quorem+0x96>
 8011d84:	9b01      	ldr	r3, [sp, #4]
 8011d86:	3b04      	subs	r3, #4
 8011d88:	429d      	cmp	r5, r3
 8011d8a:	461a      	mov	r2, r3
 8011d8c:	d32f      	bcc.n	8011dee <quorem+0xf4>
 8011d8e:	613c      	str	r4, [r7, #16]
 8011d90:	4638      	mov	r0, r7
 8011d92:	f001 f97b 	bl	801308c <__mcmp>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	db25      	blt.n	8011de6 <quorem+0xec>
 8011d9a:	4629      	mov	r1, r5
 8011d9c:	2000      	movs	r0, #0
 8011d9e:	f858 2b04 	ldr.w	r2, [r8], #4
 8011da2:	f8d1 c000 	ldr.w	ip, [r1]
 8011da6:	fa1f fe82 	uxth.w	lr, r2
 8011daa:	fa1f f38c 	uxth.w	r3, ip
 8011dae:	eba3 030e 	sub.w	r3, r3, lr
 8011db2:	4403      	add	r3, r0
 8011db4:	0c12      	lsrs	r2, r2, #16
 8011db6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011dba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011dc4:	45c1      	cmp	r9, r8
 8011dc6:	f841 3b04 	str.w	r3, [r1], #4
 8011dca:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011dce:	d2e6      	bcs.n	8011d9e <quorem+0xa4>
 8011dd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011dd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011dd8:	b922      	cbnz	r2, 8011de4 <quorem+0xea>
 8011dda:	3b04      	subs	r3, #4
 8011ddc:	429d      	cmp	r5, r3
 8011dde:	461a      	mov	r2, r3
 8011de0:	d30b      	bcc.n	8011dfa <quorem+0x100>
 8011de2:	613c      	str	r4, [r7, #16]
 8011de4:	3601      	adds	r6, #1
 8011de6:	4630      	mov	r0, r6
 8011de8:	b003      	add	sp, #12
 8011dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dee:	6812      	ldr	r2, [r2, #0]
 8011df0:	3b04      	subs	r3, #4
 8011df2:	2a00      	cmp	r2, #0
 8011df4:	d1cb      	bne.n	8011d8e <quorem+0x94>
 8011df6:	3c01      	subs	r4, #1
 8011df8:	e7c6      	b.n	8011d88 <quorem+0x8e>
 8011dfa:	6812      	ldr	r2, [r2, #0]
 8011dfc:	3b04      	subs	r3, #4
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	d1ef      	bne.n	8011de2 <quorem+0xe8>
 8011e02:	3c01      	subs	r4, #1
 8011e04:	e7ea      	b.n	8011ddc <quorem+0xe2>
 8011e06:	2000      	movs	r0, #0
 8011e08:	e7ee      	b.n	8011de8 <quorem+0xee>
 8011e0a:	0000      	movs	r0, r0
 8011e0c:	0000      	movs	r0, r0
	...

08011e10 <_dtoa_r>:
 8011e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e14:	69c7      	ldr	r7, [r0, #28]
 8011e16:	b099      	sub	sp, #100	@ 0x64
 8011e18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e1c:	ec55 4b10 	vmov	r4, r5, d0
 8011e20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011e22:	9109      	str	r1, [sp, #36]	@ 0x24
 8011e24:	4683      	mov	fp, r0
 8011e26:	920e      	str	r2, [sp, #56]	@ 0x38
 8011e28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011e2a:	b97f      	cbnz	r7, 8011e4c <_dtoa_r+0x3c>
 8011e2c:	2010      	movs	r0, #16
 8011e2e:	f000 fdfd 	bl	8012a2c <malloc>
 8011e32:	4602      	mov	r2, r0
 8011e34:	f8cb 001c 	str.w	r0, [fp, #28]
 8011e38:	b920      	cbnz	r0, 8011e44 <_dtoa_r+0x34>
 8011e3a:	4ba7      	ldr	r3, [pc, #668]	@ (80120d8 <_dtoa_r+0x2c8>)
 8011e3c:	21ef      	movs	r1, #239	@ 0xef
 8011e3e:	48a7      	ldr	r0, [pc, #668]	@ (80120dc <_dtoa_r+0x2cc>)
 8011e40:	f001 fcf8 	bl	8013834 <__assert_func>
 8011e44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011e48:	6007      	str	r7, [r0, #0]
 8011e4a:	60c7      	str	r7, [r0, #12]
 8011e4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011e50:	6819      	ldr	r1, [r3, #0]
 8011e52:	b159      	cbz	r1, 8011e6c <_dtoa_r+0x5c>
 8011e54:	685a      	ldr	r2, [r3, #4]
 8011e56:	604a      	str	r2, [r1, #4]
 8011e58:	2301      	movs	r3, #1
 8011e5a:	4093      	lsls	r3, r2
 8011e5c:	608b      	str	r3, [r1, #8]
 8011e5e:	4658      	mov	r0, fp
 8011e60:	f000 feda 	bl	8012c18 <_Bfree>
 8011e64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	601a      	str	r2, [r3, #0]
 8011e6c:	1e2b      	subs	r3, r5, #0
 8011e6e:	bfb9      	ittee	lt
 8011e70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011e74:	9303      	strlt	r3, [sp, #12]
 8011e76:	2300      	movge	r3, #0
 8011e78:	6033      	strge	r3, [r6, #0]
 8011e7a:	9f03      	ldr	r7, [sp, #12]
 8011e7c:	4b98      	ldr	r3, [pc, #608]	@ (80120e0 <_dtoa_r+0x2d0>)
 8011e7e:	bfbc      	itt	lt
 8011e80:	2201      	movlt	r2, #1
 8011e82:	6032      	strlt	r2, [r6, #0]
 8011e84:	43bb      	bics	r3, r7
 8011e86:	d112      	bne.n	8011eae <_dtoa_r+0x9e>
 8011e88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011e8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011e8e:	6013      	str	r3, [r2, #0]
 8011e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011e94:	4323      	orrs	r3, r4
 8011e96:	f000 854d 	beq.w	8012934 <_dtoa_r+0xb24>
 8011e9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011e9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80120f4 <_dtoa_r+0x2e4>
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	f000 854f 	beq.w	8012944 <_dtoa_r+0xb34>
 8011ea6:	f10a 0303 	add.w	r3, sl, #3
 8011eaa:	f000 bd49 	b.w	8012940 <_dtoa_r+0xb30>
 8011eae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	ec51 0b17 	vmov	r0, r1, d7
 8011eb8:	2300      	movs	r3, #0
 8011eba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011ebe:	f7ee fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8011ec2:	4680      	mov	r8, r0
 8011ec4:	b158      	cbz	r0, 8011ede <_dtoa_r+0xce>
 8011ec6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011ec8:	2301      	movs	r3, #1
 8011eca:	6013      	str	r3, [r2, #0]
 8011ecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011ece:	b113      	cbz	r3, 8011ed6 <_dtoa_r+0xc6>
 8011ed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011ed2:	4b84      	ldr	r3, [pc, #528]	@ (80120e4 <_dtoa_r+0x2d4>)
 8011ed4:	6013      	str	r3, [r2, #0]
 8011ed6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80120f8 <_dtoa_r+0x2e8>
 8011eda:	f000 bd33 	b.w	8012944 <_dtoa_r+0xb34>
 8011ede:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011ee2:	aa16      	add	r2, sp, #88	@ 0x58
 8011ee4:	a917      	add	r1, sp, #92	@ 0x5c
 8011ee6:	4658      	mov	r0, fp
 8011ee8:	f001 f980 	bl	80131ec <__d2b>
 8011eec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011ef0:	4681      	mov	r9, r0
 8011ef2:	2e00      	cmp	r6, #0
 8011ef4:	d077      	beq.n	8011fe6 <_dtoa_r+0x1d6>
 8011ef6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011ef8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8011efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011f04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011f08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8011f0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011f10:	4619      	mov	r1, r3
 8011f12:	2200      	movs	r2, #0
 8011f14:	4b74      	ldr	r3, [pc, #464]	@ (80120e8 <_dtoa_r+0x2d8>)
 8011f16:	f7ee f9bf 	bl	8000298 <__aeabi_dsub>
 8011f1a:	a369      	add	r3, pc, #420	@ (adr r3, 80120c0 <_dtoa_r+0x2b0>)
 8011f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f20:	f7ee fb72 	bl	8000608 <__aeabi_dmul>
 8011f24:	a368      	add	r3, pc, #416	@ (adr r3, 80120c8 <_dtoa_r+0x2b8>)
 8011f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2a:	f7ee f9b7 	bl	800029c <__adddf3>
 8011f2e:	4604      	mov	r4, r0
 8011f30:	4630      	mov	r0, r6
 8011f32:	460d      	mov	r5, r1
 8011f34:	f7ee fafe 	bl	8000534 <__aeabi_i2d>
 8011f38:	a365      	add	r3, pc, #404	@ (adr r3, 80120d0 <_dtoa_r+0x2c0>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	f7ee fb63 	bl	8000608 <__aeabi_dmul>
 8011f42:	4602      	mov	r2, r0
 8011f44:	460b      	mov	r3, r1
 8011f46:	4620      	mov	r0, r4
 8011f48:	4629      	mov	r1, r5
 8011f4a:	f7ee f9a7 	bl	800029c <__adddf3>
 8011f4e:	4604      	mov	r4, r0
 8011f50:	460d      	mov	r5, r1
 8011f52:	f7ee fe09 	bl	8000b68 <__aeabi_d2iz>
 8011f56:	2200      	movs	r2, #0
 8011f58:	4607      	mov	r7, r0
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	4629      	mov	r1, r5
 8011f60:	f7ee fdc4 	bl	8000aec <__aeabi_dcmplt>
 8011f64:	b140      	cbz	r0, 8011f78 <_dtoa_r+0x168>
 8011f66:	4638      	mov	r0, r7
 8011f68:	f7ee fae4 	bl	8000534 <__aeabi_i2d>
 8011f6c:	4622      	mov	r2, r4
 8011f6e:	462b      	mov	r3, r5
 8011f70:	f7ee fdb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8011f74:	b900      	cbnz	r0, 8011f78 <_dtoa_r+0x168>
 8011f76:	3f01      	subs	r7, #1
 8011f78:	2f16      	cmp	r7, #22
 8011f7a:	d851      	bhi.n	8012020 <_dtoa_r+0x210>
 8011f7c:	4b5b      	ldr	r3, [pc, #364]	@ (80120ec <_dtoa_r+0x2dc>)
 8011f7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011f8a:	f7ee fdaf 	bl	8000aec <__aeabi_dcmplt>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d048      	beq.n	8012024 <_dtoa_r+0x214>
 8011f92:	3f01      	subs	r7, #1
 8011f94:	2300      	movs	r3, #0
 8011f96:	9312      	str	r3, [sp, #72]	@ 0x48
 8011f98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011f9a:	1b9b      	subs	r3, r3, r6
 8011f9c:	1e5a      	subs	r2, r3, #1
 8011f9e:	bf44      	itt	mi
 8011fa0:	f1c3 0801 	rsbmi	r8, r3, #1
 8011fa4:	2300      	movmi	r3, #0
 8011fa6:	9208      	str	r2, [sp, #32]
 8011fa8:	bf54      	ite	pl
 8011faa:	f04f 0800 	movpl.w	r8, #0
 8011fae:	9308      	strmi	r3, [sp, #32]
 8011fb0:	2f00      	cmp	r7, #0
 8011fb2:	db39      	blt.n	8012028 <_dtoa_r+0x218>
 8011fb4:	9b08      	ldr	r3, [sp, #32]
 8011fb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011fb8:	443b      	add	r3, r7
 8011fba:	9308      	str	r3, [sp, #32]
 8011fbc:	2300      	movs	r3, #0
 8011fbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8011fc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fc2:	2b09      	cmp	r3, #9
 8011fc4:	d864      	bhi.n	8012090 <_dtoa_r+0x280>
 8011fc6:	2b05      	cmp	r3, #5
 8011fc8:	bfc4      	itt	gt
 8011fca:	3b04      	subgt	r3, #4
 8011fcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011fce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fd0:	f1a3 0302 	sub.w	r3, r3, #2
 8011fd4:	bfcc      	ite	gt
 8011fd6:	2400      	movgt	r4, #0
 8011fd8:	2401      	movle	r4, #1
 8011fda:	2b03      	cmp	r3, #3
 8011fdc:	d863      	bhi.n	80120a6 <_dtoa_r+0x296>
 8011fde:	e8df f003 	tbb	[pc, r3]
 8011fe2:	372a      	.short	0x372a
 8011fe4:	5535      	.short	0x5535
 8011fe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011fea:	441e      	add	r6, r3
 8011fec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011ff0:	2b20      	cmp	r3, #32
 8011ff2:	bfc1      	itttt	gt
 8011ff4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011ff8:	409f      	lslgt	r7, r3
 8011ffa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011ffe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012002:	bfd6      	itet	le
 8012004:	f1c3 0320 	rsble	r3, r3, #32
 8012008:	ea47 0003 	orrgt.w	r0, r7, r3
 801200c:	fa04 f003 	lslle.w	r0, r4, r3
 8012010:	f7ee fa80 	bl	8000514 <__aeabi_ui2d>
 8012014:	2201      	movs	r2, #1
 8012016:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801201a:	3e01      	subs	r6, #1
 801201c:	9214      	str	r2, [sp, #80]	@ 0x50
 801201e:	e777      	b.n	8011f10 <_dtoa_r+0x100>
 8012020:	2301      	movs	r3, #1
 8012022:	e7b8      	b.n	8011f96 <_dtoa_r+0x186>
 8012024:	9012      	str	r0, [sp, #72]	@ 0x48
 8012026:	e7b7      	b.n	8011f98 <_dtoa_r+0x188>
 8012028:	427b      	negs	r3, r7
 801202a:	930a      	str	r3, [sp, #40]	@ 0x28
 801202c:	2300      	movs	r3, #0
 801202e:	eba8 0807 	sub.w	r8, r8, r7
 8012032:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012034:	e7c4      	b.n	8011fc0 <_dtoa_r+0x1b0>
 8012036:	2300      	movs	r3, #0
 8012038:	930b      	str	r3, [sp, #44]	@ 0x2c
 801203a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801203c:	2b00      	cmp	r3, #0
 801203e:	dc35      	bgt.n	80120ac <_dtoa_r+0x29c>
 8012040:	2301      	movs	r3, #1
 8012042:	9300      	str	r3, [sp, #0]
 8012044:	9307      	str	r3, [sp, #28]
 8012046:	461a      	mov	r2, r3
 8012048:	920e      	str	r2, [sp, #56]	@ 0x38
 801204a:	e00b      	b.n	8012064 <_dtoa_r+0x254>
 801204c:	2301      	movs	r3, #1
 801204e:	e7f3      	b.n	8012038 <_dtoa_r+0x228>
 8012050:	2300      	movs	r3, #0
 8012052:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012056:	18fb      	adds	r3, r7, r3
 8012058:	9300      	str	r3, [sp, #0]
 801205a:	3301      	adds	r3, #1
 801205c:	2b01      	cmp	r3, #1
 801205e:	9307      	str	r3, [sp, #28]
 8012060:	bfb8      	it	lt
 8012062:	2301      	movlt	r3, #1
 8012064:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012068:	2100      	movs	r1, #0
 801206a:	2204      	movs	r2, #4
 801206c:	f102 0514 	add.w	r5, r2, #20
 8012070:	429d      	cmp	r5, r3
 8012072:	d91f      	bls.n	80120b4 <_dtoa_r+0x2a4>
 8012074:	6041      	str	r1, [r0, #4]
 8012076:	4658      	mov	r0, fp
 8012078:	f000 fd8e 	bl	8012b98 <_Balloc>
 801207c:	4682      	mov	sl, r0
 801207e:	2800      	cmp	r0, #0
 8012080:	d13c      	bne.n	80120fc <_dtoa_r+0x2ec>
 8012082:	4b1b      	ldr	r3, [pc, #108]	@ (80120f0 <_dtoa_r+0x2e0>)
 8012084:	4602      	mov	r2, r0
 8012086:	f240 11af 	movw	r1, #431	@ 0x1af
 801208a:	e6d8      	b.n	8011e3e <_dtoa_r+0x2e>
 801208c:	2301      	movs	r3, #1
 801208e:	e7e0      	b.n	8012052 <_dtoa_r+0x242>
 8012090:	2401      	movs	r4, #1
 8012092:	2300      	movs	r3, #0
 8012094:	9309      	str	r3, [sp, #36]	@ 0x24
 8012096:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012098:	f04f 33ff 	mov.w	r3, #4294967295
 801209c:	9300      	str	r3, [sp, #0]
 801209e:	9307      	str	r3, [sp, #28]
 80120a0:	2200      	movs	r2, #0
 80120a2:	2312      	movs	r3, #18
 80120a4:	e7d0      	b.n	8012048 <_dtoa_r+0x238>
 80120a6:	2301      	movs	r3, #1
 80120a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80120aa:	e7f5      	b.n	8012098 <_dtoa_r+0x288>
 80120ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80120ae:	9300      	str	r3, [sp, #0]
 80120b0:	9307      	str	r3, [sp, #28]
 80120b2:	e7d7      	b.n	8012064 <_dtoa_r+0x254>
 80120b4:	3101      	adds	r1, #1
 80120b6:	0052      	lsls	r2, r2, #1
 80120b8:	e7d8      	b.n	801206c <_dtoa_r+0x25c>
 80120ba:	bf00      	nop
 80120bc:	f3af 8000 	nop.w
 80120c0:	636f4361 	.word	0x636f4361
 80120c4:	3fd287a7 	.word	0x3fd287a7
 80120c8:	8b60c8b3 	.word	0x8b60c8b3
 80120cc:	3fc68a28 	.word	0x3fc68a28
 80120d0:	509f79fb 	.word	0x509f79fb
 80120d4:	3fd34413 	.word	0x3fd34413
 80120d8:	08015cb4 	.word	0x08015cb4
 80120dc:	08015ccb 	.word	0x08015ccb
 80120e0:	7ff00000 	.word	0x7ff00000
 80120e4:	08015c84 	.word	0x08015c84
 80120e8:	3ff80000 	.word	0x3ff80000
 80120ec:	08015dc8 	.word	0x08015dc8
 80120f0:	08015d23 	.word	0x08015d23
 80120f4:	08015cb0 	.word	0x08015cb0
 80120f8:	08015c83 	.word	0x08015c83
 80120fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012100:	6018      	str	r0, [r3, #0]
 8012102:	9b07      	ldr	r3, [sp, #28]
 8012104:	2b0e      	cmp	r3, #14
 8012106:	f200 80a4 	bhi.w	8012252 <_dtoa_r+0x442>
 801210a:	2c00      	cmp	r4, #0
 801210c:	f000 80a1 	beq.w	8012252 <_dtoa_r+0x442>
 8012110:	2f00      	cmp	r7, #0
 8012112:	dd33      	ble.n	801217c <_dtoa_r+0x36c>
 8012114:	4bad      	ldr	r3, [pc, #692]	@ (80123cc <_dtoa_r+0x5bc>)
 8012116:	f007 020f 	and.w	r2, r7, #15
 801211a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801211e:	ed93 7b00 	vldr	d7, [r3]
 8012122:	05f8      	lsls	r0, r7, #23
 8012124:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012128:	ea4f 1427 	mov.w	r4, r7, asr #4
 801212c:	d516      	bpl.n	801215c <_dtoa_r+0x34c>
 801212e:	4ba8      	ldr	r3, [pc, #672]	@ (80123d0 <_dtoa_r+0x5c0>)
 8012130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012134:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012138:	f7ee fb90 	bl	800085c <__aeabi_ddiv>
 801213c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012140:	f004 040f 	and.w	r4, r4, #15
 8012144:	2603      	movs	r6, #3
 8012146:	4da2      	ldr	r5, [pc, #648]	@ (80123d0 <_dtoa_r+0x5c0>)
 8012148:	b954      	cbnz	r4, 8012160 <_dtoa_r+0x350>
 801214a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801214e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012152:	f7ee fb83 	bl	800085c <__aeabi_ddiv>
 8012156:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801215a:	e028      	b.n	80121ae <_dtoa_r+0x39e>
 801215c:	2602      	movs	r6, #2
 801215e:	e7f2      	b.n	8012146 <_dtoa_r+0x336>
 8012160:	07e1      	lsls	r1, r4, #31
 8012162:	d508      	bpl.n	8012176 <_dtoa_r+0x366>
 8012164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012168:	e9d5 2300 	ldrd	r2, r3, [r5]
 801216c:	f7ee fa4c 	bl	8000608 <__aeabi_dmul>
 8012170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012174:	3601      	adds	r6, #1
 8012176:	1064      	asrs	r4, r4, #1
 8012178:	3508      	adds	r5, #8
 801217a:	e7e5      	b.n	8012148 <_dtoa_r+0x338>
 801217c:	f000 80d2 	beq.w	8012324 <_dtoa_r+0x514>
 8012180:	427c      	negs	r4, r7
 8012182:	4b92      	ldr	r3, [pc, #584]	@ (80123cc <_dtoa_r+0x5bc>)
 8012184:	4d92      	ldr	r5, [pc, #584]	@ (80123d0 <_dtoa_r+0x5c0>)
 8012186:	f004 020f 	and.w	r2, r4, #15
 801218a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012192:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012196:	f7ee fa37 	bl	8000608 <__aeabi_dmul>
 801219a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801219e:	1124      	asrs	r4, r4, #4
 80121a0:	2300      	movs	r3, #0
 80121a2:	2602      	movs	r6, #2
 80121a4:	2c00      	cmp	r4, #0
 80121a6:	f040 80b2 	bne.w	801230e <_dtoa_r+0x4fe>
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d1d3      	bne.n	8012156 <_dtoa_r+0x346>
 80121ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80121b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	f000 80b7 	beq.w	8012328 <_dtoa_r+0x518>
 80121ba:	4b86      	ldr	r3, [pc, #536]	@ (80123d4 <_dtoa_r+0x5c4>)
 80121bc:	2200      	movs	r2, #0
 80121be:	4620      	mov	r0, r4
 80121c0:	4629      	mov	r1, r5
 80121c2:	f7ee fc93 	bl	8000aec <__aeabi_dcmplt>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	f000 80ae 	beq.w	8012328 <_dtoa_r+0x518>
 80121cc:	9b07      	ldr	r3, [sp, #28]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	f000 80aa 	beq.w	8012328 <_dtoa_r+0x518>
 80121d4:	9b00      	ldr	r3, [sp, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	dd37      	ble.n	801224a <_dtoa_r+0x43a>
 80121da:	1e7b      	subs	r3, r7, #1
 80121dc:	9304      	str	r3, [sp, #16]
 80121de:	4620      	mov	r0, r4
 80121e0:	4b7d      	ldr	r3, [pc, #500]	@ (80123d8 <_dtoa_r+0x5c8>)
 80121e2:	2200      	movs	r2, #0
 80121e4:	4629      	mov	r1, r5
 80121e6:	f7ee fa0f 	bl	8000608 <__aeabi_dmul>
 80121ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121ee:	9c00      	ldr	r4, [sp, #0]
 80121f0:	3601      	adds	r6, #1
 80121f2:	4630      	mov	r0, r6
 80121f4:	f7ee f99e 	bl	8000534 <__aeabi_i2d>
 80121f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121fc:	f7ee fa04 	bl	8000608 <__aeabi_dmul>
 8012200:	4b76      	ldr	r3, [pc, #472]	@ (80123dc <_dtoa_r+0x5cc>)
 8012202:	2200      	movs	r2, #0
 8012204:	f7ee f84a 	bl	800029c <__adddf3>
 8012208:	4605      	mov	r5, r0
 801220a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801220e:	2c00      	cmp	r4, #0
 8012210:	f040 808d 	bne.w	801232e <_dtoa_r+0x51e>
 8012214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012218:	4b71      	ldr	r3, [pc, #452]	@ (80123e0 <_dtoa_r+0x5d0>)
 801221a:	2200      	movs	r2, #0
 801221c:	f7ee f83c 	bl	8000298 <__aeabi_dsub>
 8012220:	4602      	mov	r2, r0
 8012222:	460b      	mov	r3, r1
 8012224:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012228:	462a      	mov	r2, r5
 801222a:	4633      	mov	r3, r6
 801222c:	f7ee fc7c 	bl	8000b28 <__aeabi_dcmpgt>
 8012230:	2800      	cmp	r0, #0
 8012232:	f040 828b 	bne.w	801274c <_dtoa_r+0x93c>
 8012236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801223a:	462a      	mov	r2, r5
 801223c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012240:	f7ee fc54 	bl	8000aec <__aeabi_dcmplt>
 8012244:	2800      	cmp	r0, #0
 8012246:	f040 8128 	bne.w	801249a <_dtoa_r+0x68a>
 801224a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801224e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012252:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012254:	2b00      	cmp	r3, #0
 8012256:	f2c0 815a 	blt.w	801250e <_dtoa_r+0x6fe>
 801225a:	2f0e      	cmp	r7, #14
 801225c:	f300 8157 	bgt.w	801250e <_dtoa_r+0x6fe>
 8012260:	4b5a      	ldr	r3, [pc, #360]	@ (80123cc <_dtoa_r+0x5bc>)
 8012262:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012266:	ed93 7b00 	vldr	d7, [r3]
 801226a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801226c:	2b00      	cmp	r3, #0
 801226e:	ed8d 7b00 	vstr	d7, [sp]
 8012272:	da03      	bge.n	801227c <_dtoa_r+0x46c>
 8012274:	9b07      	ldr	r3, [sp, #28]
 8012276:	2b00      	cmp	r3, #0
 8012278:	f340 8101 	ble.w	801247e <_dtoa_r+0x66e>
 801227c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012280:	4656      	mov	r6, sl
 8012282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012286:	4620      	mov	r0, r4
 8012288:	4629      	mov	r1, r5
 801228a:	f7ee fae7 	bl	800085c <__aeabi_ddiv>
 801228e:	f7ee fc6b 	bl	8000b68 <__aeabi_d2iz>
 8012292:	4680      	mov	r8, r0
 8012294:	f7ee f94e 	bl	8000534 <__aeabi_i2d>
 8012298:	e9dd 2300 	ldrd	r2, r3, [sp]
 801229c:	f7ee f9b4 	bl	8000608 <__aeabi_dmul>
 80122a0:	4602      	mov	r2, r0
 80122a2:	460b      	mov	r3, r1
 80122a4:	4620      	mov	r0, r4
 80122a6:	4629      	mov	r1, r5
 80122a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80122ac:	f7ed fff4 	bl	8000298 <__aeabi_dsub>
 80122b0:	f806 4b01 	strb.w	r4, [r6], #1
 80122b4:	9d07      	ldr	r5, [sp, #28]
 80122b6:	eba6 040a 	sub.w	r4, r6, sl
 80122ba:	42a5      	cmp	r5, r4
 80122bc:	4602      	mov	r2, r0
 80122be:	460b      	mov	r3, r1
 80122c0:	f040 8117 	bne.w	80124f2 <_dtoa_r+0x6e2>
 80122c4:	f7ed ffea 	bl	800029c <__adddf3>
 80122c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122cc:	4604      	mov	r4, r0
 80122ce:	460d      	mov	r5, r1
 80122d0:	f7ee fc2a 	bl	8000b28 <__aeabi_dcmpgt>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	f040 80f9 	bne.w	80124cc <_dtoa_r+0x6bc>
 80122da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122de:	4620      	mov	r0, r4
 80122e0:	4629      	mov	r1, r5
 80122e2:	f7ee fbf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80122e6:	b118      	cbz	r0, 80122f0 <_dtoa_r+0x4e0>
 80122e8:	f018 0f01 	tst.w	r8, #1
 80122ec:	f040 80ee 	bne.w	80124cc <_dtoa_r+0x6bc>
 80122f0:	4649      	mov	r1, r9
 80122f2:	4658      	mov	r0, fp
 80122f4:	f000 fc90 	bl	8012c18 <_Bfree>
 80122f8:	2300      	movs	r3, #0
 80122fa:	7033      	strb	r3, [r6, #0]
 80122fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80122fe:	3701      	adds	r7, #1
 8012300:	601f      	str	r7, [r3, #0]
 8012302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012304:	2b00      	cmp	r3, #0
 8012306:	f000 831d 	beq.w	8012944 <_dtoa_r+0xb34>
 801230a:	601e      	str	r6, [r3, #0]
 801230c:	e31a      	b.n	8012944 <_dtoa_r+0xb34>
 801230e:	07e2      	lsls	r2, r4, #31
 8012310:	d505      	bpl.n	801231e <_dtoa_r+0x50e>
 8012312:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012316:	f7ee f977 	bl	8000608 <__aeabi_dmul>
 801231a:	3601      	adds	r6, #1
 801231c:	2301      	movs	r3, #1
 801231e:	1064      	asrs	r4, r4, #1
 8012320:	3508      	adds	r5, #8
 8012322:	e73f      	b.n	80121a4 <_dtoa_r+0x394>
 8012324:	2602      	movs	r6, #2
 8012326:	e742      	b.n	80121ae <_dtoa_r+0x39e>
 8012328:	9c07      	ldr	r4, [sp, #28]
 801232a:	9704      	str	r7, [sp, #16]
 801232c:	e761      	b.n	80121f2 <_dtoa_r+0x3e2>
 801232e:	4b27      	ldr	r3, [pc, #156]	@ (80123cc <_dtoa_r+0x5bc>)
 8012330:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012332:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012336:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801233a:	4454      	add	r4, sl
 801233c:	2900      	cmp	r1, #0
 801233e:	d053      	beq.n	80123e8 <_dtoa_r+0x5d8>
 8012340:	4928      	ldr	r1, [pc, #160]	@ (80123e4 <_dtoa_r+0x5d4>)
 8012342:	2000      	movs	r0, #0
 8012344:	f7ee fa8a 	bl	800085c <__aeabi_ddiv>
 8012348:	4633      	mov	r3, r6
 801234a:	462a      	mov	r2, r5
 801234c:	f7ed ffa4 	bl	8000298 <__aeabi_dsub>
 8012350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012354:	4656      	mov	r6, sl
 8012356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801235a:	f7ee fc05 	bl	8000b68 <__aeabi_d2iz>
 801235e:	4605      	mov	r5, r0
 8012360:	f7ee f8e8 	bl	8000534 <__aeabi_i2d>
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801236c:	f7ed ff94 	bl	8000298 <__aeabi_dsub>
 8012370:	3530      	adds	r5, #48	@ 0x30
 8012372:	4602      	mov	r2, r0
 8012374:	460b      	mov	r3, r1
 8012376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801237a:	f806 5b01 	strb.w	r5, [r6], #1
 801237e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012382:	f7ee fbb3 	bl	8000aec <__aeabi_dcmplt>
 8012386:	2800      	cmp	r0, #0
 8012388:	d171      	bne.n	801246e <_dtoa_r+0x65e>
 801238a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801238e:	4911      	ldr	r1, [pc, #68]	@ (80123d4 <_dtoa_r+0x5c4>)
 8012390:	2000      	movs	r0, #0
 8012392:	f7ed ff81 	bl	8000298 <__aeabi_dsub>
 8012396:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801239a:	f7ee fba7 	bl	8000aec <__aeabi_dcmplt>
 801239e:	2800      	cmp	r0, #0
 80123a0:	f040 8095 	bne.w	80124ce <_dtoa_r+0x6be>
 80123a4:	42a6      	cmp	r6, r4
 80123a6:	f43f af50 	beq.w	801224a <_dtoa_r+0x43a>
 80123aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80123ae:	4b0a      	ldr	r3, [pc, #40]	@ (80123d8 <_dtoa_r+0x5c8>)
 80123b0:	2200      	movs	r2, #0
 80123b2:	f7ee f929 	bl	8000608 <__aeabi_dmul>
 80123b6:	4b08      	ldr	r3, [pc, #32]	@ (80123d8 <_dtoa_r+0x5c8>)
 80123b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80123bc:	2200      	movs	r2, #0
 80123be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123c2:	f7ee f921 	bl	8000608 <__aeabi_dmul>
 80123c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123ca:	e7c4      	b.n	8012356 <_dtoa_r+0x546>
 80123cc:	08015dc8 	.word	0x08015dc8
 80123d0:	08015da0 	.word	0x08015da0
 80123d4:	3ff00000 	.word	0x3ff00000
 80123d8:	40240000 	.word	0x40240000
 80123dc:	401c0000 	.word	0x401c0000
 80123e0:	40140000 	.word	0x40140000
 80123e4:	3fe00000 	.word	0x3fe00000
 80123e8:	4631      	mov	r1, r6
 80123ea:	4628      	mov	r0, r5
 80123ec:	f7ee f90c 	bl	8000608 <__aeabi_dmul>
 80123f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80123f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80123f6:	4656      	mov	r6, sl
 80123f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123fc:	f7ee fbb4 	bl	8000b68 <__aeabi_d2iz>
 8012400:	4605      	mov	r5, r0
 8012402:	f7ee f897 	bl	8000534 <__aeabi_i2d>
 8012406:	4602      	mov	r2, r0
 8012408:	460b      	mov	r3, r1
 801240a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801240e:	f7ed ff43 	bl	8000298 <__aeabi_dsub>
 8012412:	3530      	adds	r5, #48	@ 0x30
 8012414:	f806 5b01 	strb.w	r5, [r6], #1
 8012418:	4602      	mov	r2, r0
 801241a:	460b      	mov	r3, r1
 801241c:	42a6      	cmp	r6, r4
 801241e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012422:	f04f 0200 	mov.w	r2, #0
 8012426:	d124      	bne.n	8012472 <_dtoa_r+0x662>
 8012428:	4bac      	ldr	r3, [pc, #688]	@ (80126dc <_dtoa_r+0x8cc>)
 801242a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801242e:	f7ed ff35 	bl	800029c <__adddf3>
 8012432:	4602      	mov	r2, r0
 8012434:	460b      	mov	r3, r1
 8012436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801243a:	f7ee fb75 	bl	8000b28 <__aeabi_dcmpgt>
 801243e:	2800      	cmp	r0, #0
 8012440:	d145      	bne.n	80124ce <_dtoa_r+0x6be>
 8012442:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012446:	49a5      	ldr	r1, [pc, #660]	@ (80126dc <_dtoa_r+0x8cc>)
 8012448:	2000      	movs	r0, #0
 801244a:	f7ed ff25 	bl	8000298 <__aeabi_dsub>
 801244e:	4602      	mov	r2, r0
 8012450:	460b      	mov	r3, r1
 8012452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012456:	f7ee fb49 	bl	8000aec <__aeabi_dcmplt>
 801245a:	2800      	cmp	r0, #0
 801245c:	f43f aef5 	beq.w	801224a <_dtoa_r+0x43a>
 8012460:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012462:	1e73      	subs	r3, r6, #1
 8012464:	9315      	str	r3, [sp, #84]	@ 0x54
 8012466:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801246a:	2b30      	cmp	r3, #48	@ 0x30
 801246c:	d0f8      	beq.n	8012460 <_dtoa_r+0x650>
 801246e:	9f04      	ldr	r7, [sp, #16]
 8012470:	e73e      	b.n	80122f0 <_dtoa_r+0x4e0>
 8012472:	4b9b      	ldr	r3, [pc, #620]	@ (80126e0 <_dtoa_r+0x8d0>)
 8012474:	f7ee f8c8 	bl	8000608 <__aeabi_dmul>
 8012478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801247c:	e7bc      	b.n	80123f8 <_dtoa_r+0x5e8>
 801247e:	d10c      	bne.n	801249a <_dtoa_r+0x68a>
 8012480:	4b98      	ldr	r3, [pc, #608]	@ (80126e4 <_dtoa_r+0x8d4>)
 8012482:	2200      	movs	r2, #0
 8012484:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012488:	f7ee f8be 	bl	8000608 <__aeabi_dmul>
 801248c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012490:	f7ee fb40 	bl	8000b14 <__aeabi_dcmpge>
 8012494:	2800      	cmp	r0, #0
 8012496:	f000 8157 	beq.w	8012748 <_dtoa_r+0x938>
 801249a:	2400      	movs	r4, #0
 801249c:	4625      	mov	r5, r4
 801249e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80124a0:	43db      	mvns	r3, r3
 80124a2:	9304      	str	r3, [sp, #16]
 80124a4:	4656      	mov	r6, sl
 80124a6:	2700      	movs	r7, #0
 80124a8:	4621      	mov	r1, r4
 80124aa:	4658      	mov	r0, fp
 80124ac:	f000 fbb4 	bl	8012c18 <_Bfree>
 80124b0:	2d00      	cmp	r5, #0
 80124b2:	d0dc      	beq.n	801246e <_dtoa_r+0x65e>
 80124b4:	b12f      	cbz	r7, 80124c2 <_dtoa_r+0x6b2>
 80124b6:	42af      	cmp	r7, r5
 80124b8:	d003      	beq.n	80124c2 <_dtoa_r+0x6b2>
 80124ba:	4639      	mov	r1, r7
 80124bc:	4658      	mov	r0, fp
 80124be:	f000 fbab 	bl	8012c18 <_Bfree>
 80124c2:	4629      	mov	r1, r5
 80124c4:	4658      	mov	r0, fp
 80124c6:	f000 fba7 	bl	8012c18 <_Bfree>
 80124ca:	e7d0      	b.n	801246e <_dtoa_r+0x65e>
 80124cc:	9704      	str	r7, [sp, #16]
 80124ce:	4633      	mov	r3, r6
 80124d0:	461e      	mov	r6, r3
 80124d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80124d6:	2a39      	cmp	r2, #57	@ 0x39
 80124d8:	d107      	bne.n	80124ea <_dtoa_r+0x6da>
 80124da:	459a      	cmp	sl, r3
 80124dc:	d1f8      	bne.n	80124d0 <_dtoa_r+0x6c0>
 80124de:	9a04      	ldr	r2, [sp, #16]
 80124e0:	3201      	adds	r2, #1
 80124e2:	9204      	str	r2, [sp, #16]
 80124e4:	2230      	movs	r2, #48	@ 0x30
 80124e6:	f88a 2000 	strb.w	r2, [sl]
 80124ea:	781a      	ldrb	r2, [r3, #0]
 80124ec:	3201      	adds	r2, #1
 80124ee:	701a      	strb	r2, [r3, #0]
 80124f0:	e7bd      	b.n	801246e <_dtoa_r+0x65e>
 80124f2:	4b7b      	ldr	r3, [pc, #492]	@ (80126e0 <_dtoa_r+0x8d0>)
 80124f4:	2200      	movs	r2, #0
 80124f6:	f7ee f887 	bl	8000608 <__aeabi_dmul>
 80124fa:	2200      	movs	r2, #0
 80124fc:	2300      	movs	r3, #0
 80124fe:	4604      	mov	r4, r0
 8012500:	460d      	mov	r5, r1
 8012502:	f7ee fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8012506:	2800      	cmp	r0, #0
 8012508:	f43f aebb 	beq.w	8012282 <_dtoa_r+0x472>
 801250c:	e6f0      	b.n	80122f0 <_dtoa_r+0x4e0>
 801250e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012510:	2a00      	cmp	r2, #0
 8012512:	f000 80db 	beq.w	80126cc <_dtoa_r+0x8bc>
 8012516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012518:	2a01      	cmp	r2, #1
 801251a:	f300 80bf 	bgt.w	801269c <_dtoa_r+0x88c>
 801251e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012520:	2a00      	cmp	r2, #0
 8012522:	f000 80b7 	beq.w	8012694 <_dtoa_r+0x884>
 8012526:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801252a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801252c:	4646      	mov	r6, r8
 801252e:	9a08      	ldr	r2, [sp, #32]
 8012530:	2101      	movs	r1, #1
 8012532:	441a      	add	r2, r3
 8012534:	4658      	mov	r0, fp
 8012536:	4498      	add	r8, r3
 8012538:	9208      	str	r2, [sp, #32]
 801253a:	f000 fc21 	bl	8012d80 <__i2b>
 801253e:	4605      	mov	r5, r0
 8012540:	b15e      	cbz	r6, 801255a <_dtoa_r+0x74a>
 8012542:	9b08      	ldr	r3, [sp, #32]
 8012544:	2b00      	cmp	r3, #0
 8012546:	dd08      	ble.n	801255a <_dtoa_r+0x74a>
 8012548:	42b3      	cmp	r3, r6
 801254a:	9a08      	ldr	r2, [sp, #32]
 801254c:	bfa8      	it	ge
 801254e:	4633      	movge	r3, r6
 8012550:	eba8 0803 	sub.w	r8, r8, r3
 8012554:	1af6      	subs	r6, r6, r3
 8012556:	1ad3      	subs	r3, r2, r3
 8012558:	9308      	str	r3, [sp, #32]
 801255a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801255c:	b1f3      	cbz	r3, 801259c <_dtoa_r+0x78c>
 801255e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012560:	2b00      	cmp	r3, #0
 8012562:	f000 80b7 	beq.w	80126d4 <_dtoa_r+0x8c4>
 8012566:	b18c      	cbz	r4, 801258c <_dtoa_r+0x77c>
 8012568:	4629      	mov	r1, r5
 801256a:	4622      	mov	r2, r4
 801256c:	4658      	mov	r0, fp
 801256e:	f000 fcc7 	bl	8012f00 <__pow5mult>
 8012572:	464a      	mov	r2, r9
 8012574:	4601      	mov	r1, r0
 8012576:	4605      	mov	r5, r0
 8012578:	4658      	mov	r0, fp
 801257a:	f000 fc17 	bl	8012dac <__multiply>
 801257e:	4649      	mov	r1, r9
 8012580:	9004      	str	r0, [sp, #16]
 8012582:	4658      	mov	r0, fp
 8012584:	f000 fb48 	bl	8012c18 <_Bfree>
 8012588:	9b04      	ldr	r3, [sp, #16]
 801258a:	4699      	mov	r9, r3
 801258c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801258e:	1b1a      	subs	r2, r3, r4
 8012590:	d004      	beq.n	801259c <_dtoa_r+0x78c>
 8012592:	4649      	mov	r1, r9
 8012594:	4658      	mov	r0, fp
 8012596:	f000 fcb3 	bl	8012f00 <__pow5mult>
 801259a:	4681      	mov	r9, r0
 801259c:	2101      	movs	r1, #1
 801259e:	4658      	mov	r0, fp
 80125a0:	f000 fbee 	bl	8012d80 <__i2b>
 80125a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125a6:	4604      	mov	r4, r0
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 81cf 	beq.w	801294c <_dtoa_r+0xb3c>
 80125ae:	461a      	mov	r2, r3
 80125b0:	4601      	mov	r1, r0
 80125b2:	4658      	mov	r0, fp
 80125b4:	f000 fca4 	bl	8012f00 <__pow5mult>
 80125b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	4604      	mov	r4, r0
 80125be:	f300 8095 	bgt.w	80126ec <_dtoa_r+0x8dc>
 80125c2:	9b02      	ldr	r3, [sp, #8]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	f040 8087 	bne.w	80126d8 <_dtoa_r+0x8c8>
 80125ca:	9b03      	ldr	r3, [sp, #12]
 80125cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	f040 8089 	bne.w	80126e8 <_dtoa_r+0x8d8>
 80125d6:	9b03      	ldr	r3, [sp, #12]
 80125d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80125dc:	0d1b      	lsrs	r3, r3, #20
 80125de:	051b      	lsls	r3, r3, #20
 80125e0:	b12b      	cbz	r3, 80125ee <_dtoa_r+0x7de>
 80125e2:	9b08      	ldr	r3, [sp, #32]
 80125e4:	3301      	adds	r3, #1
 80125e6:	9308      	str	r3, [sp, #32]
 80125e8:	f108 0801 	add.w	r8, r8, #1
 80125ec:	2301      	movs	r3, #1
 80125ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80125f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	f000 81b0 	beq.w	8012958 <_dtoa_r+0xb48>
 80125f8:	6923      	ldr	r3, [r4, #16]
 80125fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80125fe:	6918      	ldr	r0, [r3, #16]
 8012600:	f000 fb72 	bl	8012ce8 <__hi0bits>
 8012604:	f1c0 0020 	rsb	r0, r0, #32
 8012608:	9b08      	ldr	r3, [sp, #32]
 801260a:	4418      	add	r0, r3
 801260c:	f010 001f 	ands.w	r0, r0, #31
 8012610:	d077      	beq.n	8012702 <_dtoa_r+0x8f2>
 8012612:	f1c0 0320 	rsb	r3, r0, #32
 8012616:	2b04      	cmp	r3, #4
 8012618:	dd6b      	ble.n	80126f2 <_dtoa_r+0x8e2>
 801261a:	9b08      	ldr	r3, [sp, #32]
 801261c:	f1c0 001c 	rsb	r0, r0, #28
 8012620:	4403      	add	r3, r0
 8012622:	4480      	add	r8, r0
 8012624:	4406      	add	r6, r0
 8012626:	9308      	str	r3, [sp, #32]
 8012628:	f1b8 0f00 	cmp.w	r8, #0
 801262c:	dd05      	ble.n	801263a <_dtoa_r+0x82a>
 801262e:	4649      	mov	r1, r9
 8012630:	4642      	mov	r2, r8
 8012632:	4658      	mov	r0, fp
 8012634:	f000 fcbe 	bl	8012fb4 <__lshift>
 8012638:	4681      	mov	r9, r0
 801263a:	9b08      	ldr	r3, [sp, #32]
 801263c:	2b00      	cmp	r3, #0
 801263e:	dd05      	ble.n	801264c <_dtoa_r+0x83c>
 8012640:	4621      	mov	r1, r4
 8012642:	461a      	mov	r2, r3
 8012644:	4658      	mov	r0, fp
 8012646:	f000 fcb5 	bl	8012fb4 <__lshift>
 801264a:	4604      	mov	r4, r0
 801264c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801264e:	2b00      	cmp	r3, #0
 8012650:	d059      	beq.n	8012706 <_dtoa_r+0x8f6>
 8012652:	4621      	mov	r1, r4
 8012654:	4648      	mov	r0, r9
 8012656:	f000 fd19 	bl	801308c <__mcmp>
 801265a:	2800      	cmp	r0, #0
 801265c:	da53      	bge.n	8012706 <_dtoa_r+0x8f6>
 801265e:	1e7b      	subs	r3, r7, #1
 8012660:	9304      	str	r3, [sp, #16]
 8012662:	4649      	mov	r1, r9
 8012664:	2300      	movs	r3, #0
 8012666:	220a      	movs	r2, #10
 8012668:	4658      	mov	r0, fp
 801266a:	f000 faf7 	bl	8012c5c <__multadd>
 801266e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012670:	4681      	mov	r9, r0
 8012672:	2b00      	cmp	r3, #0
 8012674:	f000 8172 	beq.w	801295c <_dtoa_r+0xb4c>
 8012678:	2300      	movs	r3, #0
 801267a:	4629      	mov	r1, r5
 801267c:	220a      	movs	r2, #10
 801267e:	4658      	mov	r0, fp
 8012680:	f000 faec 	bl	8012c5c <__multadd>
 8012684:	9b00      	ldr	r3, [sp, #0]
 8012686:	2b00      	cmp	r3, #0
 8012688:	4605      	mov	r5, r0
 801268a:	dc67      	bgt.n	801275c <_dtoa_r+0x94c>
 801268c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801268e:	2b02      	cmp	r3, #2
 8012690:	dc41      	bgt.n	8012716 <_dtoa_r+0x906>
 8012692:	e063      	b.n	801275c <_dtoa_r+0x94c>
 8012694:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012696:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801269a:	e746      	b.n	801252a <_dtoa_r+0x71a>
 801269c:	9b07      	ldr	r3, [sp, #28]
 801269e:	1e5c      	subs	r4, r3, #1
 80126a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126a2:	42a3      	cmp	r3, r4
 80126a4:	bfbf      	itttt	lt
 80126a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80126a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80126aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80126ac:	1ae3      	sublt	r3, r4, r3
 80126ae:	bfb4      	ite	lt
 80126b0:	18d2      	addlt	r2, r2, r3
 80126b2:	1b1c      	subge	r4, r3, r4
 80126b4:	9b07      	ldr	r3, [sp, #28]
 80126b6:	bfbc      	itt	lt
 80126b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80126ba:	2400      	movlt	r4, #0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	bfb5      	itete	lt
 80126c0:	eba8 0603 	sublt.w	r6, r8, r3
 80126c4:	9b07      	ldrge	r3, [sp, #28]
 80126c6:	2300      	movlt	r3, #0
 80126c8:	4646      	movge	r6, r8
 80126ca:	e730      	b.n	801252e <_dtoa_r+0x71e>
 80126cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80126ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80126d0:	4646      	mov	r6, r8
 80126d2:	e735      	b.n	8012540 <_dtoa_r+0x730>
 80126d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80126d6:	e75c      	b.n	8012592 <_dtoa_r+0x782>
 80126d8:	2300      	movs	r3, #0
 80126da:	e788      	b.n	80125ee <_dtoa_r+0x7de>
 80126dc:	3fe00000 	.word	0x3fe00000
 80126e0:	40240000 	.word	0x40240000
 80126e4:	40140000 	.word	0x40140000
 80126e8:	9b02      	ldr	r3, [sp, #8]
 80126ea:	e780      	b.n	80125ee <_dtoa_r+0x7de>
 80126ec:	2300      	movs	r3, #0
 80126ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80126f0:	e782      	b.n	80125f8 <_dtoa_r+0x7e8>
 80126f2:	d099      	beq.n	8012628 <_dtoa_r+0x818>
 80126f4:	9a08      	ldr	r2, [sp, #32]
 80126f6:	331c      	adds	r3, #28
 80126f8:	441a      	add	r2, r3
 80126fa:	4498      	add	r8, r3
 80126fc:	441e      	add	r6, r3
 80126fe:	9208      	str	r2, [sp, #32]
 8012700:	e792      	b.n	8012628 <_dtoa_r+0x818>
 8012702:	4603      	mov	r3, r0
 8012704:	e7f6      	b.n	80126f4 <_dtoa_r+0x8e4>
 8012706:	9b07      	ldr	r3, [sp, #28]
 8012708:	9704      	str	r7, [sp, #16]
 801270a:	2b00      	cmp	r3, #0
 801270c:	dc20      	bgt.n	8012750 <_dtoa_r+0x940>
 801270e:	9300      	str	r3, [sp, #0]
 8012710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012712:	2b02      	cmp	r3, #2
 8012714:	dd1e      	ble.n	8012754 <_dtoa_r+0x944>
 8012716:	9b00      	ldr	r3, [sp, #0]
 8012718:	2b00      	cmp	r3, #0
 801271a:	f47f aec0 	bne.w	801249e <_dtoa_r+0x68e>
 801271e:	4621      	mov	r1, r4
 8012720:	2205      	movs	r2, #5
 8012722:	4658      	mov	r0, fp
 8012724:	f000 fa9a 	bl	8012c5c <__multadd>
 8012728:	4601      	mov	r1, r0
 801272a:	4604      	mov	r4, r0
 801272c:	4648      	mov	r0, r9
 801272e:	f000 fcad 	bl	801308c <__mcmp>
 8012732:	2800      	cmp	r0, #0
 8012734:	f77f aeb3 	ble.w	801249e <_dtoa_r+0x68e>
 8012738:	4656      	mov	r6, sl
 801273a:	2331      	movs	r3, #49	@ 0x31
 801273c:	f806 3b01 	strb.w	r3, [r6], #1
 8012740:	9b04      	ldr	r3, [sp, #16]
 8012742:	3301      	adds	r3, #1
 8012744:	9304      	str	r3, [sp, #16]
 8012746:	e6ae      	b.n	80124a6 <_dtoa_r+0x696>
 8012748:	9c07      	ldr	r4, [sp, #28]
 801274a:	9704      	str	r7, [sp, #16]
 801274c:	4625      	mov	r5, r4
 801274e:	e7f3      	b.n	8012738 <_dtoa_r+0x928>
 8012750:	9b07      	ldr	r3, [sp, #28]
 8012752:	9300      	str	r3, [sp, #0]
 8012754:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012756:	2b00      	cmp	r3, #0
 8012758:	f000 8104 	beq.w	8012964 <_dtoa_r+0xb54>
 801275c:	2e00      	cmp	r6, #0
 801275e:	dd05      	ble.n	801276c <_dtoa_r+0x95c>
 8012760:	4629      	mov	r1, r5
 8012762:	4632      	mov	r2, r6
 8012764:	4658      	mov	r0, fp
 8012766:	f000 fc25 	bl	8012fb4 <__lshift>
 801276a:	4605      	mov	r5, r0
 801276c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801276e:	2b00      	cmp	r3, #0
 8012770:	d05a      	beq.n	8012828 <_dtoa_r+0xa18>
 8012772:	6869      	ldr	r1, [r5, #4]
 8012774:	4658      	mov	r0, fp
 8012776:	f000 fa0f 	bl	8012b98 <_Balloc>
 801277a:	4606      	mov	r6, r0
 801277c:	b928      	cbnz	r0, 801278a <_dtoa_r+0x97a>
 801277e:	4b84      	ldr	r3, [pc, #528]	@ (8012990 <_dtoa_r+0xb80>)
 8012780:	4602      	mov	r2, r0
 8012782:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012786:	f7ff bb5a 	b.w	8011e3e <_dtoa_r+0x2e>
 801278a:	692a      	ldr	r2, [r5, #16]
 801278c:	3202      	adds	r2, #2
 801278e:	0092      	lsls	r2, r2, #2
 8012790:	f105 010c 	add.w	r1, r5, #12
 8012794:	300c      	adds	r0, #12
 8012796:	f7ff faa2 	bl	8011cde <memcpy>
 801279a:	2201      	movs	r2, #1
 801279c:	4631      	mov	r1, r6
 801279e:	4658      	mov	r0, fp
 80127a0:	f000 fc08 	bl	8012fb4 <__lshift>
 80127a4:	f10a 0301 	add.w	r3, sl, #1
 80127a8:	9307      	str	r3, [sp, #28]
 80127aa:	9b00      	ldr	r3, [sp, #0]
 80127ac:	4453      	add	r3, sl
 80127ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80127b0:	9b02      	ldr	r3, [sp, #8]
 80127b2:	f003 0301 	and.w	r3, r3, #1
 80127b6:	462f      	mov	r7, r5
 80127b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80127ba:	4605      	mov	r5, r0
 80127bc:	9b07      	ldr	r3, [sp, #28]
 80127be:	4621      	mov	r1, r4
 80127c0:	3b01      	subs	r3, #1
 80127c2:	4648      	mov	r0, r9
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	f7ff fa98 	bl	8011cfa <quorem>
 80127ca:	4639      	mov	r1, r7
 80127cc:	9002      	str	r0, [sp, #8]
 80127ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80127d2:	4648      	mov	r0, r9
 80127d4:	f000 fc5a 	bl	801308c <__mcmp>
 80127d8:	462a      	mov	r2, r5
 80127da:	9008      	str	r0, [sp, #32]
 80127dc:	4621      	mov	r1, r4
 80127de:	4658      	mov	r0, fp
 80127e0:	f000 fc70 	bl	80130c4 <__mdiff>
 80127e4:	68c2      	ldr	r2, [r0, #12]
 80127e6:	4606      	mov	r6, r0
 80127e8:	bb02      	cbnz	r2, 801282c <_dtoa_r+0xa1c>
 80127ea:	4601      	mov	r1, r0
 80127ec:	4648      	mov	r0, r9
 80127ee:	f000 fc4d 	bl	801308c <__mcmp>
 80127f2:	4602      	mov	r2, r0
 80127f4:	4631      	mov	r1, r6
 80127f6:	4658      	mov	r0, fp
 80127f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80127fa:	f000 fa0d 	bl	8012c18 <_Bfree>
 80127fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012800:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012802:	9e07      	ldr	r6, [sp, #28]
 8012804:	ea43 0102 	orr.w	r1, r3, r2
 8012808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801280a:	4319      	orrs	r1, r3
 801280c:	d110      	bne.n	8012830 <_dtoa_r+0xa20>
 801280e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012812:	d029      	beq.n	8012868 <_dtoa_r+0xa58>
 8012814:	9b08      	ldr	r3, [sp, #32]
 8012816:	2b00      	cmp	r3, #0
 8012818:	dd02      	ble.n	8012820 <_dtoa_r+0xa10>
 801281a:	9b02      	ldr	r3, [sp, #8]
 801281c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012820:	9b00      	ldr	r3, [sp, #0]
 8012822:	f883 8000 	strb.w	r8, [r3]
 8012826:	e63f      	b.n	80124a8 <_dtoa_r+0x698>
 8012828:	4628      	mov	r0, r5
 801282a:	e7bb      	b.n	80127a4 <_dtoa_r+0x994>
 801282c:	2201      	movs	r2, #1
 801282e:	e7e1      	b.n	80127f4 <_dtoa_r+0x9e4>
 8012830:	9b08      	ldr	r3, [sp, #32]
 8012832:	2b00      	cmp	r3, #0
 8012834:	db04      	blt.n	8012840 <_dtoa_r+0xa30>
 8012836:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012838:	430b      	orrs	r3, r1
 801283a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801283c:	430b      	orrs	r3, r1
 801283e:	d120      	bne.n	8012882 <_dtoa_r+0xa72>
 8012840:	2a00      	cmp	r2, #0
 8012842:	dded      	ble.n	8012820 <_dtoa_r+0xa10>
 8012844:	4649      	mov	r1, r9
 8012846:	2201      	movs	r2, #1
 8012848:	4658      	mov	r0, fp
 801284a:	f000 fbb3 	bl	8012fb4 <__lshift>
 801284e:	4621      	mov	r1, r4
 8012850:	4681      	mov	r9, r0
 8012852:	f000 fc1b 	bl	801308c <__mcmp>
 8012856:	2800      	cmp	r0, #0
 8012858:	dc03      	bgt.n	8012862 <_dtoa_r+0xa52>
 801285a:	d1e1      	bne.n	8012820 <_dtoa_r+0xa10>
 801285c:	f018 0f01 	tst.w	r8, #1
 8012860:	d0de      	beq.n	8012820 <_dtoa_r+0xa10>
 8012862:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012866:	d1d8      	bne.n	801281a <_dtoa_r+0xa0a>
 8012868:	9a00      	ldr	r2, [sp, #0]
 801286a:	2339      	movs	r3, #57	@ 0x39
 801286c:	7013      	strb	r3, [r2, #0]
 801286e:	4633      	mov	r3, r6
 8012870:	461e      	mov	r6, r3
 8012872:	3b01      	subs	r3, #1
 8012874:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012878:	2a39      	cmp	r2, #57	@ 0x39
 801287a:	d052      	beq.n	8012922 <_dtoa_r+0xb12>
 801287c:	3201      	adds	r2, #1
 801287e:	701a      	strb	r2, [r3, #0]
 8012880:	e612      	b.n	80124a8 <_dtoa_r+0x698>
 8012882:	2a00      	cmp	r2, #0
 8012884:	dd07      	ble.n	8012896 <_dtoa_r+0xa86>
 8012886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801288a:	d0ed      	beq.n	8012868 <_dtoa_r+0xa58>
 801288c:	9a00      	ldr	r2, [sp, #0]
 801288e:	f108 0301 	add.w	r3, r8, #1
 8012892:	7013      	strb	r3, [r2, #0]
 8012894:	e608      	b.n	80124a8 <_dtoa_r+0x698>
 8012896:	9b07      	ldr	r3, [sp, #28]
 8012898:	9a07      	ldr	r2, [sp, #28]
 801289a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801289e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128a0:	4293      	cmp	r3, r2
 80128a2:	d028      	beq.n	80128f6 <_dtoa_r+0xae6>
 80128a4:	4649      	mov	r1, r9
 80128a6:	2300      	movs	r3, #0
 80128a8:	220a      	movs	r2, #10
 80128aa:	4658      	mov	r0, fp
 80128ac:	f000 f9d6 	bl	8012c5c <__multadd>
 80128b0:	42af      	cmp	r7, r5
 80128b2:	4681      	mov	r9, r0
 80128b4:	f04f 0300 	mov.w	r3, #0
 80128b8:	f04f 020a 	mov.w	r2, #10
 80128bc:	4639      	mov	r1, r7
 80128be:	4658      	mov	r0, fp
 80128c0:	d107      	bne.n	80128d2 <_dtoa_r+0xac2>
 80128c2:	f000 f9cb 	bl	8012c5c <__multadd>
 80128c6:	4607      	mov	r7, r0
 80128c8:	4605      	mov	r5, r0
 80128ca:	9b07      	ldr	r3, [sp, #28]
 80128cc:	3301      	adds	r3, #1
 80128ce:	9307      	str	r3, [sp, #28]
 80128d0:	e774      	b.n	80127bc <_dtoa_r+0x9ac>
 80128d2:	f000 f9c3 	bl	8012c5c <__multadd>
 80128d6:	4629      	mov	r1, r5
 80128d8:	4607      	mov	r7, r0
 80128da:	2300      	movs	r3, #0
 80128dc:	220a      	movs	r2, #10
 80128de:	4658      	mov	r0, fp
 80128e0:	f000 f9bc 	bl	8012c5c <__multadd>
 80128e4:	4605      	mov	r5, r0
 80128e6:	e7f0      	b.n	80128ca <_dtoa_r+0xaba>
 80128e8:	9b00      	ldr	r3, [sp, #0]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	bfcc      	ite	gt
 80128ee:	461e      	movgt	r6, r3
 80128f0:	2601      	movle	r6, #1
 80128f2:	4456      	add	r6, sl
 80128f4:	2700      	movs	r7, #0
 80128f6:	4649      	mov	r1, r9
 80128f8:	2201      	movs	r2, #1
 80128fa:	4658      	mov	r0, fp
 80128fc:	f000 fb5a 	bl	8012fb4 <__lshift>
 8012900:	4621      	mov	r1, r4
 8012902:	4681      	mov	r9, r0
 8012904:	f000 fbc2 	bl	801308c <__mcmp>
 8012908:	2800      	cmp	r0, #0
 801290a:	dcb0      	bgt.n	801286e <_dtoa_r+0xa5e>
 801290c:	d102      	bne.n	8012914 <_dtoa_r+0xb04>
 801290e:	f018 0f01 	tst.w	r8, #1
 8012912:	d1ac      	bne.n	801286e <_dtoa_r+0xa5e>
 8012914:	4633      	mov	r3, r6
 8012916:	461e      	mov	r6, r3
 8012918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801291c:	2a30      	cmp	r2, #48	@ 0x30
 801291e:	d0fa      	beq.n	8012916 <_dtoa_r+0xb06>
 8012920:	e5c2      	b.n	80124a8 <_dtoa_r+0x698>
 8012922:	459a      	cmp	sl, r3
 8012924:	d1a4      	bne.n	8012870 <_dtoa_r+0xa60>
 8012926:	9b04      	ldr	r3, [sp, #16]
 8012928:	3301      	adds	r3, #1
 801292a:	9304      	str	r3, [sp, #16]
 801292c:	2331      	movs	r3, #49	@ 0x31
 801292e:	f88a 3000 	strb.w	r3, [sl]
 8012932:	e5b9      	b.n	80124a8 <_dtoa_r+0x698>
 8012934:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012936:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012994 <_dtoa_r+0xb84>
 801293a:	b11b      	cbz	r3, 8012944 <_dtoa_r+0xb34>
 801293c:	f10a 0308 	add.w	r3, sl, #8
 8012940:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012942:	6013      	str	r3, [r2, #0]
 8012944:	4650      	mov	r0, sl
 8012946:	b019      	add	sp, #100	@ 0x64
 8012948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801294e:	2b01      	cmp	r3, #1
 8012950:	f77f ae37 	ble.w	80125c2 <_dtoa_r+0x7b2>
 8012954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012956:	930a      	str	r3, [sp, #40]	@ 0x28
 8012958:	2001      	movs	r0, #1
 801295a:	e655      	b.n	8012608 <_dtoa_r+0x7f8>
 801295c:	9b00      	ldr	r3, [sp, #0]
 801295e:	2b00      	cmp	r3, #0
 8012960:	f77f aed6 	ble.w	8012710 <_dtoa_r+0x900>
 8012964:	4656      	mov	r6, sl
 8012966:	4621      	mov	r1, r4
 8012968:	4648      	mov	r0, r9
 801296a:	f7ff f9c6 	bl	8011cfa <quorem>
 801296e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012972:	f806 8b01 	strb.w	r8, [r6], #1
 8012976:	9b00      	ldr	r3, [sp, #0]
 8012978:	eba6 020a 	sub.w	r2, r6, sl
 801297c:	4293      	cmp	r3, r2
 801297e:	ddb3      	ble.n	80128e8 <_dtoa_r+0xad8>
 8012980:	4649      	mov	r1, r9
 8012982:	2300      	movs	r3, #0
 8012984:	220a      	movs	r2, #10
 8012986:	4658      	mov	r0, fp
 8012988:	f000 f968 	bl	8012c5c <__multadd>
 801298c:	4681      	mov	r9, r0
 801298e:	e7ea      	b.n	8012966 <_dtoa_r+0xb56>
 8012990:	08015d23 	.word	0x08015d23
 8012994:	08015ca7 	.word	0x08015ca7

08012998 <_free_r>:
 8012998:	b538      	push	{r3, r4, r5, lr}
 801299a:	4605      	mov	r5, r0
 801299c:	2900      	cmp	r1, #0
 801299e:	d041      	beq.n	8012a24 <_free_r+0x8c>
 80129a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129a4:	1f0c      	subs	r4, r1, #4
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	bfb8      	it	lt
 80129aa:	18e4      	addlt	r4, r4, r3
 80129ac:	f000 f8e8 	bl	8012b80 <__malloc_lock>
 80129b0:	4a1d      	ldr	r2, [pc, #116]	@ (8012a28 <_free_r+0x90>)
 80129b2:	6813      	ldr	r3, [r2, #0]
 80129b4:	b933      	cbnz	r3, 80129c4 <_free_r+0x2c>
 80129b6:	6063      	str	r3, [r4, #4]
 80129b8:	6014      	str	r4, [r2, #0]
 80129ba:	4628      	mov	r0, r5
 80129bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129c0:	f000 b8e4 	b.w	8012b8c <__malloc_unlock>
 80129c4:	42a3      	cmp	r3, r4
 80129c6:	d908      	bls.n	80129da <_free_r+0x42>
 80129c8:	6820      	ldr	r0, [r4, #0]
 80129ca:	1821      	adds	r1, r4, r0
 80129cc:	428b      	cmp	r3, r1
 80129ce:	bf01      	itttt	eq
 80129d0:	6819      	ldreq	r1, [r3, #0]
 80129d2:	685b      	ldreq	r3, [r3, #4]
 80129d4:	1809      	addeq	r1, r1, r0
 80129d6:	6021      	streq	r1, [r4, #0]
 80129d8:	e7ed      	b.n	80129b6 <_free_r+0x1e>
 80129da:	461a      	mov	r2, r3
 80129dc:	685b      	ldr	r3, [r3, #4]
 80129de:	b10b      	cbz	r3, 80129e4 <_free_r+0x4c>
 80129e0:	42a3      	cmp	r3, r4
 80129e2:	d9fa      	bls.n	80129da <_free_r+0x42>
 80129e4:	6811      	ldr	r1, [r2, #0]
 80129e6:	1850      	adds	r0, r2, r1
 80129e8:	42a0      	cmp	r0, r4
 80129ea:	d10b      	bne.n	8012a04 <_free_r+0x6c>
 80129ec:	6820      	ldr	r0, [r4, #0]
 80129ee:	4401      	add	r1, r0
 80129f0:	1850      	adds	r0, r2, r1
 80129f2:	4283      	cmp	r3, r0
 80129f4:	6011      	str	r1, [r2, #0]
 80129f6:	d1e0      	bne.n	80129ba <_free_r+0x22>
 80129f8:	6818      	ldr	r0, [r3, #0]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	6053      	str	r3, [r2, #4]
 80129fe:	4408      	add	r0, r1
 8012a00:	6010      	str	r0, [r2, #0]
 8012a02:	e7da      	b.n	80129ba <_free_r+0x22>
 8012a04:	d902      	bls.n	8012a0c <_free_r+0x74>
 8012a06:	230c      	movs	r3, #12
 8012a08:	602b      	str	r3, [r5, #0]
 8012a0a:	e7d6      	b.n	80129ba <_free_r+0x22>
 8012a0c:	6820      	ldr	r0, [r4, #0]
 8012a0e:	1821      	adds	r1, r4, r0
 8012a10:	428b      	cmp	r3, r1
 8012a12:	bf04      	itt	eq
 8012a14:	6819      	ldreq	r1, [r3, #0]
 8012a16:	685b      	ldreq	r3, [r3, #4]
 8012a18:	6063      	str	r3, [r4, #4]
 8012a1a:	bf04      	itt	eq
 8012a1c:	1809      	addeq	r1, r1, r0
 8012a1e:	6021      	streq	r1, [r4, #0]
 8012a20:	6054      	str	r4, [r2, #4]
 8012a22:	e7ca      	b.n	80129ba <_free_r+0x22>
 8012a24:	bd38      	pop	{r3, r4, r5, pc}
 8012a26:	bf00      	nop
 8012a28:	20001068 	.word	0x20001068

08012a2c <malloc>:
 8012a2c:	4b02      	ldr	r3, [pc, #8]	@ (8012a38 <malloc+0xc>)
 8012a2e:	4601      	mov	r1, r0
 8012a30:	6818      	ldr	r0, [r3, #0]
 8012a32:	f000 b825 	b.w	8012a80 <_malloc_r>
 8012a36:	bf00      	nop
 8012a38:	20000060 	.word	0x20000060

08012a3c <sbrk_aligned>:
 8012a3c:	b570      	push	{r4, r5, r6, lr}
 8012a3e:	4e0f      	ldr	r6, [pc, #60]	@ (8012a7c <sbrk_aligned+0x40>)
 8012a40:	460c      	mov	r4, r1
 8012a42:	6831      	ldr	r1, [r6, #0]
 8012a44:	4605      	mov	r5, r0
 8012a46:	b911      	cbnz	r1, 8012a4e <sbrk_aligned+0x12>
 8012a48:	f000 fee4 	bl	8013814 <_sbrk_r>
 8012a4c:	6030      	str	r0, [r6, #0]
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4628      	mov	r0, r5
 8012a52:	f000 fedf 	bl	8013814 <_sbrk_r>
 8012a56:	1c43      	adds	r3, r0, #1
 8012a58:	d103      	bne.n	8012a62 <sbrk_aligned+0x26>
 8012a5a:	f04f 34ff 	mov.w	r4, #4294967295
 8012a5e:	4620      	mov	r0, r4
 8012a60:	bd70      	pop	{r4, r5, r6, pc}
 8012a62:	1cc4      	adds	r4, r0, #3
 8012a64:	f024 0403 	bic.w	r4, r4, #3
 8012a68:	42a0      	cmp	r0, r4
 8012a6a:	d0f8      	beq.n	8012a5e <sbrk_aligned+0x22>
 8012a6c:	1a21      	subs	r1, r4, r0
 8012a6e:	4628      	mov	r0, r5
 8012a70:	f000 fed0 	bl	8013814 <_sbrk_r>
 8012a74:	3001      	adds	r0, #1
 8012a76:	d1f2      	bne.n	8012a5e <sbrk_aligned+0x22>
 8012a78:	e7ef      	b.n	8012a5a <sbrk_aligned+0x1e>
 8012a7a:	bf00      	nop
 8012a7c:	20001064 	.word	0x20001064

08012a80 <_malloc_r>:
 8012a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a84:	1ccd      	adds	r5, r1, #3
 8012a86:	f025 0503 	bic.w	r5, r5, #3
 8012a8a:	3508      	adds	r5, #8
 8012a8c:	2d0c      	cmp	r5, #12
 8012a8e:	bf38      	it	cc
 8012a90:	250c      	movcc	r5, #12
 8012a92:	2d00      	cmp	r5, #0
 8012a94:	4606      	mov	r6, r0
 8012a96:	db01      	blt.n	8012a9c <_malloc_r+0x1c>
 8012a98:	42a9      	cmp	r1, r5
 8012a9a:	d904      	bls.n	8012aa6 <_malloc_r+0x26>
 8012a9c:	230c      	movs	r3, #12
 8012a9e:	6033      	str	r3, [r6, #0]
 8012aa0:	2000      	movs	r0, #0
 8012aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aa6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012b7c <_malloc_r+0xfc>
 8012aaa:	f000 f869 	bl	8012b80 <__malloc_lock>
 8012aae:	f8d8 3000 	ldr.w	r3, [r8]
 8012ab2:	461c      	mov	r4, r3
 8012ab4:	bb44      	cbnz	r4, 8012b08 <_malloc_r+0x88>
 8012ab6:	4629      	mov	r1, r5
 8012ab8:	4630      	mov	r0, r6
 8012aba:	f7ff ffbf 	bl	8012a3c <sbrk_aligned>
 8012abe:	1c43      	adds	r3, r0, #1
 8012ac0:	4604      	mov	r4, r0
 8012ac2:	d158      	bne.n	8012b76 <_malloc_r+0xf6>
 8012ac4:	f8d8 4000 	ldr.w	r4, [r8]
 8012ac8:	4627      	mov	r7, r4
 8012aca:	2f00      	cmp	r7, #0
 8012acc:	d143      	bne.n	8012b56 <_malloc_r+0xd6>
 8012ace:	2c00      	cmp	r4, #0
 8012ad0:	d04b      	beq.n	8012b6a <_malloc_r+0xea>
 8012ad2:	6823      	ldr	r3, [r4, #0]
 8012ad4:	4639      	mov	r1, r7
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	eb04 0903 	add.w	r9, r4, r3
 8012adc:	f000 fe9a 	bl	8013814 <_sbrk_r>
 8012ae0:	4581      	cmp	r9, r0
 8012ae2:	d142      	bne.n	8012b6a <_malloc_r+0xea>
 8012ae4:	6821      	ldr	r1, [r4, #0]
 8012ae6:	1a6d      	subs	r5, r5, r1
 8012ae8:	4629      	mov	r1, r5
 8012aea:	4630      	mov	r0, r6
 8012aec:	f7ff ffa6 	bl	8012a3c <sbrk_aligned>
 8012af0:	3001      	adds	r0, #1
 8012af2:	d03a      	beq.n	8012b6a <_malloc_r+0xea>
 8012af4:	6823      	ldr	r3, [r4, #0]
 8012af6:	442b      	add	r3, r5
 8012af8:	6023      	str	r3, [r4, #0]
 8012afa:	f8d8 3000 	ldr.w	r3, [r8]
 8012afe:	685a      	ldr	r2, [r3, #4]
 8012b00:	bb62      	cbnz	r2, 8012b5c <_malloc_r+0xdc>
 8012b02:	f8c8 7000 	str.w	r7, [r8]
 8012b06:	e00f      	b.n	8012b28 <_malloc_r+0xa8>
 8012b08:	6822      	ldr	r2, [r4, #0]
 8012b0a:	1b52      	subs	r2, r2, r5
 8012b0c:	d420      	bmi.n	8012b50 <_malloc_r+0xd0>
 8012b0e:	2a0b      	cmp	r2, #11
 8012b10:	d917      	bls.n	8012b42 <_malloc_r+0xc2>
 8012b12:	1961      	adds	r1, r4, r5
 8012b14:	42a3      	cmp	r3, r4
 8012b16:	6025      	str	r5, [r4, #0]
 8012b18:	bf18      	it	ne
 8012b1a:	6059      	strne	r1, [r3, #4]
 8012b1c:	6863      	ldr	r3, [r4, #4]
 8012b1e:	bf08      	it	eq
 8012b20:	f8c8 1000 	streq.w	r1, [r8]
 8012b24:	5162      	str	r2, [r4, r5]
 8012b26:	604b      	str	r3, [r1, #4]
 8012b28:	4630      	mov	r0, r6
 8012b2a:	f000 f82f 	bl	8012b8c <__malloc_unlock>
 8012b2e:	f104 000b 	add.w	r0, r4, #11
 8012b32:	1d23      	adds	r3, r4, #4
 8012b34:	f020 0007 	bic.w	r0, r0, #7
 8012b38:	1ac2      	subs	r2, r0, r3
 8012b3a:	bf1c      	itt	ne
 8012b3c:	1a1b      	subne	r3, r3, r0
 8012b3e:	50a3      	strne	r3, [r4, r2]
 8012b40:	e7af      	b.n	8012aa2 <_malloc_r+0x22>
 8012b42:	6862      	ldr	r2, [r4, #4]
 8012b44:	42a3      	cmp	r3, r4
 8012b46:	bf0c      	ite	eq
 8012b48:	f8c8 2000 	streq.w	r2, [r8]
 8012b4c:	605a      	strne	r2, [r3, #4]
 8012b4e:	e7eb      	b.n	8012b28 <_malloc_r+0xa8>
 8012b50:	4623      	mov	r3, r4
 8012b52:	6864      	ldr	r4, [r4, #4]
 8012b54:	e7ae      	b.n	8012ab4 <_malloc_r+0x34>
 8012b56:	463c      	mov	r4, r7
 8012b58:	687f      	ldr	r7, [r7, #4]
 8012b5a:	e7b6      	b.n	8012aca <_malloc_r+0x4a>
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	685b      	ldr	r3, [r3, #4]
 8012b60:	42a3      	cmp	r3, r4
 8012b62:	d1fb      	bne.n	8012b5c <_malloc_r+0xdc>
 8012b64:	2300      	movs	r3, #0
 8012b66:	6053      	str	r3, [r2, #4]
 8012b68:	e7de      	b.n	8012b28 <_malloc_r+0xa8>
 8012b6a:	230c      	movs	r3, #12
 8012b6c:	6033      	str	r3, [r6, #0]
 8012b6e:	4630      	mov	r0, r6
 8012b70:	f000 f80c 	bl	8012b8c <__malloc_unlock>
 8012b74:	e794      	b.n	8012aa0 <_malloc_r+0x20>
 8012b76:	6005      	str	r5, [r0, #0]
 8012b78:	e7d6      	b.n	8012b28 <_malloc_r+0xa8>
 8012b7a:	bf00      	nop
 8012b7c:	20001068 	.word	0x20001068

08012b80 <__malloc_lock>:
 8012b80:	4801      	ldr	r0, [pc, #4]	@ (8012b88 <__malloc_lock+0x8>)
 8012b82:	f7ff b8a2 	b.w	8011cca <__retarget_lock_acquire_recursive>
 8012b86:	bf00      	nop
 8012b88:	20001060 	.word	0x20001060

08012b8c <__malloc_unlock>:
 8012b8c:	4801      	ldr	r0, [pc, #4]	@ (8012b94 <__malloc_unlock+0x8>)
 8012b8e:	f7ff b89d 	b.w	8011ccc <__retarget_lock_release_recursive>
 8012b92:	bf00      	nop
 8012b94:	20001060 	.word	0x20001060

08012b98 <_Balloc>:
 8012b98:	b570      	push	{r4, r5, r6, lr}
 8012b9a:	69c6      	ldr	r6, [r0, #28]
 8012b9c:	4604      	mov	r4, r0
 8012b9e:	460d      	mov	r5, r1
 8012ba0:	b976      	cbnz	r6, 8012bc0 <_Balloc+0x28>
 8012ba2:	2010      	movs	r0, #16
 8012ba4:	f7ff ff42 	bl	8012a2c <malloc>
 8012ba8:	4602      	mov	r2, r0
 8012baa:	61e0      	str	r0, [r4, #28]
 8012bac:	b920      	cbnz	r0, 8012bb8 <_Balloc+0x20>
 8012bae:	4b18      	ldr	r3, [pc, #96]	@ (8012c10 <_Balloc+0x78>)
 8012bb0:	4818      	ldr	r0, [pc, #96]	@ (8012c14 <_Balloc+0x7c>)
 8012bb2:	216b      	movs	r1, #107	@ 0x6b
 8012bb4:	f000 fe3e 	bl	8013834 <__assert_func>
 8012bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012bbc:	6006      	str	r6, [r0, #0]
 8012bbe:	60c6      	str	r6, [r0, #12]
 8012bc0:	69e6      	ldr	r6, [r4, #28]
 8012bc2:	68f3      	ldr	r3, [r6, #12]
 8012bc4:	b183      	cbz	r3, 8012be8 <_Balloc+0x50>
 8012bc6:	69e3      	ldr	r3, [r4, #28]
 8012bc8:	68db      	ldr	r3, [r3, #12]
 8012bca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012bce:	b9b8      	cbnz	r0, 8012c00 <_Balloc+0x68>
 8012bd0:	2101      	movs	r1, #1
 8012bd2:	fa01 f605 	lsl.w	r6, r1, r5
 8012bd6:	1d72      	adds	r2, r6, #5
 8012bd8:	0092      	lsls	r2, r2, #2
 8012bda:	4620      	mov	r0, r4
 8012bdc:	f000 fe48 	bl	8013870 <_calloc_r>
 8012be0:	b160      	cbz	r0, 8012bfc <_Balloc+0x64>
 8012be2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012be6:	e00e      	b.n	8012c06 <_Balloc+0x6e>
 8012be8:	2221      	movs	r2, #33	@ 0x21
 8012bea:	2104      	movs	r1, #4
 8012bec:	4620      	mov	r0, r4
 8012bee:	f000 fe3f 	bl	8013870 <_calloc_r>
 8012bf2:	69e3      	ldr	r3, [r4, #28]
 8012bf4:	60f0      	str	r0, [r6, #12]
 8012bf6:	68db      	ldr	r3, [r3, #12]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d1e4      	bne.n	8012bc6 <_Balloc+0x2e>
 8012bfc:	2000      	movs	r0, #0
 8012bfe:	bd70      	pop	{r4, r5, r6, pc}
 8012c00:	6802      	ldr	r2, [r0, #0]
 8012c02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012c06:	2300      	movs	r3, #0
 8012c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c0c:	e7f7      	b.n	8012bfe <_Balloc+0x66>
 8012c0e:	bf00      	nop
 8012c10:	08015cb4 	.word	0x08015cb4
 8012c14:	08015d34 	.word	0x08015d34

08012c18 <_Bfree>:
 8012c18:	b570      	push	{r4, r5, r6, lr}
 8012c1a:	69c6      	ldr	r6, [r0, #28]
 8012c1c:	4605      	mov	r5, r0
 8012c1e:	460c      	mov	r4, r1
 8012c20:	b976      	cbnz	r6, 8012c40 <_Bfree+0x28>
 8012c22:	2010      	movs	r0, #16
 8012c24:	f7ff ff02 	bl	8012a2c <malloc>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	61e8      	str	r0, [r5, #28]
 8012c2c:	b920      	cbnz	r0, 8012c38 <_Bfree+0x20>
 8012c2e:	4b09      	ldr	r3, [pc, #36]	@ (8012c54 <_Bfree+0x3c>)
 8012c30:	4809      	ldr	r0, [pc, #36]	@ (8012c58 <_Bfree+0x40>)
 8012c32:	218f      	movs	r1, #143	@ 0x8f
 8012c34:	f000 fdfe 	bl	8013834 <__assert_func>
 8012c38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c3c:	6006      	str	r6, [r0, #0]
 8012c3e:	60c6      	str	r6, [r0, #12]
 8012c40:	b13c      	cbz	r4, 8012c52 <_Bfree+0x3a>
 8012c42:	69eb      	ldr	r3, [r5, #28]
 8012c44:	6862      	ldr	r2, [r4, #4]
 8012c46:	68db      	ldr	r3, [r3, #12]
 8012c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c4c:	6021      	str	r1, [r4, #0]
 8012c4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012c52:	bd70      	pop	{r4, r5, r6, pc}
 8012c54:	08015cb4 	.word	0x08015cb4
 8012c58:	08015d34 	.word	0x08015d34

08012c5c <__multadd>:
 8012c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c60:	690d      	ldr	r5, [r1, #16]
 8012c62:	4607      	mov	r7, r0
 8012c64:	460c      	mov	r4, r1
 8012c66:	461e      	mov	r6, r3
 8012c68:	f101 0c14 	add.w	ip, r1, #20
 8012c6c:	2000      	movs	r0, #0
 8012c6e:	f8dc 3000 	ldr.w	r3, [ip]
 8012c72:	b299      	uxth	r1, r3
 8012c74:	fb02 6101 	mla	r1, r2, r1, r6
 8012c78:	0c1e      	lsrs	r6, r3, #16
 8012c7a:	0c0b      	lsrs	r3, r1, #16
 8012c7c:	fb02 3306 	mla	r3, r2, r6, r3
 8012c80:	b289      	uxth	r1, r1
 8012c82:	3001      	adds	r0, #1
 8012c84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012c88:	4285      	cmp	r5, r0
 8012c8a:	f84c 1b04 	str.w	r1, [ip], #4
 8012c8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012c92:	dcec      	bgt.n	8012c6e <__multadd+0x12>
 8012c94:	b30e      	cbz	r6, 8012cda <__multadd+0x7e>
 8012c96:	68a3      	ldr	r3, [r4, #8]
 8012c98:	42ab      	cmp	r3, r5
 8012c9a:	dc19      	bgt.n	8012cd0 <__multadd+0x74>
 8012c9c:	6861      	ldr	r1, [r4, #4]
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	3101      	adds	r1, #1
 8012ca2:	f7ff ff79 	bl	8012b98 <_Balloc>
 8012ca6:	4680      	mov	r8, r0
 8012ca8:	b928      	cbnz	r0, 8012cb6 <__multadd+0x5a>
 8012caa:	4602      	mov	r2, r0
 8012cac:	4b0c      	ldr	r3, [pc, #48]	@ (8012ce0 <__multadd+0x84>)
 8012cae:	480d      	ldr	r0, [pc, #52]	@ (8012ce4 <__multadd+0x88>)
 8012cb0:	21ba      	movs	r1, #186	@ 0xba
 8012cb2:	f000 fdbf 	bl	8013834 <__assert_func>
 8012cb6:	6922      	ldr	r2, [r4, #16]
 8012cb8:	3202      	adds	r2, #2
 8012cba:	f104 010c 	add.w	r1, r4, #12
 8012cbe:	0092      	lsls	r2, r2, #2
 8012cc0:	300c      	adds	r0, #12
 8012cc2:	f7ff f80c 	bl	8011cde <memcpy>
 8012cc6:	4621      	mov	r1, r4
 8012cc8:	4638      	mov	r0, r7
 8012cca:	f7ff ffa5 	bl	8012c18 <_Bfree>
 8012cce:	4644      	mov	r4, r8
 8012cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012cd4:	3501      	adds	r5, #1
 8012cd6:	615e      	str	r6, [r3, #20]
 8012cd8:	6125      	str	r5, [r4, #16]
 8012cda:	4620      	mov	r0, r4
 8012cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ce0:	08015d23 	.word	0x08015d23
 8012ce4:	08015d34 	.word	0x08015d34

08012ce8 <__hi0bits>:
 8012ce8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012cec:	4603      	mov	r3, r0
 8012cee:	bf36      	itet	cc
 8012cf0:	0403      	lslcc	r3, r0, #16
 8012cf2:	2000      	movcs	r0, #0
 8012cf4:	2010      	movcc	r0, #16
 8012cf6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012cfa:	bf3c      	itt	cc
 8012cfc:	021b      	lslcc	r3, r3, #8
 8012cfe:	3008      	addcc	r0, #8
 8012d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012d04:	bf3c      	itt	cc
 8012d06:	011b      	lslcc	r3, r3, #4
 8012d08:	3004      	addcc	r0, #4
 8012d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012d0e:	bf3c      	itt	cc
 8012d10:	009b      	lslcc	r3, r3, #2
 8012d12:	3002      	addcc	r0, #2
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	db05      	blt.n	8012d24 <__hi0bits+0x3c>
 8012d18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012d1c:	f100 0001 	add.w	r0, r0, #1
 8012d20:	bf08      	it	eq
 8012d22:	2020      	moveq	r0, #32
 8012d24:	4770      	bx	lr

08012d26 <__lo0bits>:
 8012d26:	6803      	ldr	r3, [r0, #0]
 8012d28:	4602      	mov	r2, r0
 8012d2a:	f013 0007 	ands.w	r0, r3, #7
 8012d2e:	d00b      	beq.n	8012d48 <__lo0bits+0x22>
 8012d30:	07d9      	lsls	r1, r3, #31
 8012d32:	d421      	bmi.n	8012d78 <__lo0bits+0x52>
 8012d34:	0798      	lsls	r0, r3, #30
 8012d36:	bf49      	itett	mi
 8012d38:	085b      	lsrmi	r3, r3, #1
 8012d3a:	089b      	lsrpl	r3, r3, #2
 8012d3c:	2001      	movmi	r0, #1
 8012d3e:	6013      	strmi	r3, [r2, #0]
 8012d40:	bf5c      	itt	pl
 8012d42:	6013      	strpl	r3, [r2, #0]
 8012d44:	2002      	movpl	r0, #2
 8012d46:	4770      	bx	lr
 8012d48:	b299      	uxth	r1, r3
 8012d4a:	b909      	cbnz	r1, 8012d50 <__lo0bits+0x2a>
 8012d4c:	0c1b      	lsrs	r3, r3, #16
 8012d4e:	2010      	movs	r0, #16
 8012d50:	b2d9      	uxtb	r1, r3
 8012d52:	b909      	cbnz	r1, 8012d58 <__lo0bits+0x32>
 8012d54:	3008      	adds	r0, #8
 8012d56:	0a1b      	lsrs	r3, r3, #8
 8012d58:	0719      	lsls	r1, r3, #28
 8012d5a:	bf04      	itt	eq
 8012d5c:	091b      	lsreq	r3, r3, #4
 8012d5e:	3004      	addeq	r0, #4
 8012d60:	0799      	lsls	r1, r3, #30
 8012d62:	bf04      	itt	eq
 8012d64:	089b      	lsreq	r3, r3, #2
 8012d66:	3002      	addeq	r0, #2
 8012d68:	07d9      	lsls	r1, r3, #31
 8012d6a:	d403      	bmi.n	8012d74 <__lo0bits+0x4e>
 8012d6c:	085b      	lsrs	r3, r3, #1
 8012d6e:	f100 0001 	add.w	r0, r0, #1
 8012d72:	d003      	beq.n	8012d7c <__lo0bits+0x56>
 8012d74:	6013      	str	r3, [r2, #0]
 8012d76:	4770      	bx	lr
 8012d78:	2000      	movs	r0, #0
 8012d7a:	4770      	bx	lr
 8012d7c:	2020      	movs	r0, #32
 8012d7e:	4770      	bx	lr

08012d80 <__i2b>:
 8012d80:	b510      	push	{r4, lr}
 8012d82:	460c      	mov	r4, r1
 8012d84:	2101      	movs	r1, #1
 8012d86:	f7ff ff07 	bl	8012b98 <_Balloc>
 8012d8a:	4602      	mov	r2, r0
 8012d8c:	b928      	cbnz	r0, 8012d9a <__i2b+0x1a>
 8012d8e:	4b05      	ldr	r3, [pc, #20]	@ (8012da4 <__i2b+0x24>)
 8012d90:	4805      	ldr	r0, [pc, #20]	@ (8012da8 <__i2b+0x28>)
 8012d92:	f240 1145 	movw	r1, #325	@ 0x145
 8012d96:	f000 fd4d 	bl	8013834 <__assert_func>
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	6144      	str	r4, [r0, #20]
 8012d9e:	6103      	str	r3, [r0, #16]
 8012da0:	bd10      	pop	{r4, pc}
 8012da2:	bf00      	nop
 8012da4:	08015d23 	.word	0x08015d23
 8012da8:	08015d34 	.word	0x08015d34

08012dac <__multiply>:
 8012dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012db0:	4614      	mov	r4, r2
 8012db2:	690a      	ldr	r2, [r1, #16]
 8012db4:	6923      	ldr	r3, [r4, #16]
 8012db6:	429a      	cmp	r2, r3
 8012db8:	bfa8      	it	ge
 8012dba:	4623      	movge	r3, r4
 8012dbc:	460f      	mov	r7, r1
 8012dbe:	bfa4      	itt	ge
 8012dc0:	460c      	movge	r4, r1
 8012dc2:	461f      	movge	r7, r3
 8012dc4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012dc8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012dcc:	68a3      	ldr	r3, [r4, #8]
 8012dce:	6861      	ldr	r1, [r4, #4]
 8012dd0:	eb0a 0609 	add.w	r6, sl, r9
 8012dd4:	42b3      	cmp	r3, r6
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	bfb8      	it	lt
 8012dda:	3101      	addlt	r1, #1
 8012ddc:	f7ff fedc 	bl	8012b98 <_Balloc>
 8012de0:	b930      	cbnz	r0, 8012df0 <__multiply+0x44>
 8012de2:	4602      	mov	r2, r0
 8012de4:	4b44      	ldr	r3, [pc, #272]	@ (8012ef8 <__multiply+0x14c>)
 8012de6:	4845      	ldr	r0, [pc, #276]	@ (8012efc <__multiply+0x150>)
 8012de8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012dec:	f000 fd22 	bl	8013834 <__assert_func>
 8012df0:	f100 0514 	add.w	r5, r0, #20
 8012df4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012df8:	462b      	mov	r3, r5
 8012dfa:	2200      	movs	r2, #0
 8012dfc:	4543      	cmp	r3, r8
 8012dfe:	d321      	bcc.n	8012e44 <__multiply+0x98>
 8012e00:	f107 0114 	add.w	r1, r7, #20
 8012e04:	f104 0214 	add.w	r2, r4, #20
 8012e08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012e0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012e10:	9302      	str	r3, [sp, #8]
 8012e12:	1b13      	subs	r3, r2, r4
 8012e14:	3b15      	subs	r3, #21
 8012e16:	f023 0303 	bic.w	r3, r3, #3
 8012e1a:	3304      	adds	r3, #4
 8012e1c:	f104 0715 	add.w	r7, r4, #21
 8012e20:	42ba      	cmp	r2, r7
 8012e22:	bf38      	it	cc
 8012e24:	2304      	movcc	r3, #4
 8012e26:	9301      	str	r3, [sp, #4]
 8012e28:	9b02      	ldr	r3, [sp, #8]
 8012e2a:	9103      	str	r1, [sp, #12]
 8012e2c:	428b      	cmp	r3, r1
 8012e2e:	d80c      	bhi.n	8012e4a <__multiply+0x9e>
 8012e30:	2e00      	cmp	r6, #0
 8012e32:	dd03      	ble.n	8012e3c <__multiply+0x90>
 8012e34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d05b      	beq.n	8012ef4 <__multiply+0x148>
 8012e3c:	6106      	str	r6, [r0, #16]
 8012e3e:	b005      	add	sp, #20
 8012e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e44:	f843 2b04 	str.w	r2, [r3], #4
 8012e48:	e7d8      	b.n	8012dfc <__multiply+0x50>
 8012e4a:	f8b1 a000 	ldrh.w	sl, [r1]
 8012e4e:	f1ba 0f00 	cmp.w	sl, #0
 8012e52:	d024      	beq.n	8012e9e <__multiply+0xf2>
 8012e54:	f104 0e14 	add.w	lr, r4, #20
 8012e58:	46a9      	mov	r9, r5
 8012e5a:	f04f 0c00 	mov.w	ip, #0
 8012e5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012e62:	f8d9 3000 	ldr.w	r3, [r9]
 8012e66:	fa1f fb87 	uxth.w	fp, r7
 8012e6a:	b29b      	uxth	r3, r3
 8012e6c:	fb0a 330b 	mla	r3, sl, fp, r3
 8012e70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012e74:	f8d9 7000 	ldr.w	r7, [r9]
 8012e78:	4463      	add	r3, ip
 8012e7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012e7e:	fb0a c70b 	mla	r7, sl, fp, ip
 8012e82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012e8c:	4572      	cmp	r2, lr
 8012e8e:	f849 3b04 	str.w	r3, [r9], #4
 8012e92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012e96:	d8e2      	bhi.n	8012e5e <__multiply+0xb2>
 8012e98:	9b01      	ldr	r3, [sp, #4]
 8012e9a:	f845 c003 	str.w	ip, [r5, r3]
 8012e9e:	9b03      	ldr	r3, [sp, #12]
 8012ea0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012ea4:	3104      	adds	r1, #4
 8012ea6:	f1b9 0f00 	cmp.w	r9, #0
 8012eaa:	d021      	beq.n	8012ef0 <__multiply+0x144>
 8012eac:	682b      	ldr	r3, [r5, #0]
 8012eae:	f104 0c14 	add.w	ip, r4, #20
 8012eb2:	46ae      	mov	lr, r5
 8012eb4:	f04f 0a00 	mov.w	sl, #0
 8012eb8:	f8bc b000 	ldrh.w	fp, [ip]
 8012ebc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012ec0:	fb09 770b 	mla	r7, r9, fp, r7
 8012ec4:	4457      	add	r7, sl
 8012ec6:	b29b      	uxth	r3, r3
 8012ec8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012ecc:	f84e 3b04 	str.w	r3, [lr], #4
 8012ed0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012ed4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012ed8:	f8be 3000 	ldrh.w	r3, [lr]
 8012edc:	fb09 330a 	mla	r3, r9, sl, r3
 8012ee0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012ee4:	4562      	cmp	r2, ip
 8012ee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012eea:	d8e5      	bhi.n	8012eb8 <__multiply+0x10c>
 8012eec:	9f01      	ldr	r7, [sp, #4]
 8012eee:	51eb      	str	r3, [r5, r7]
 8012ef0:	3504      	adds	r5, #4
 8012ef2:	e799      	b.n	8012e28 <__multiply+0x7c>
 8012ef4:	3e01      	subs	r6, #1
 8012ef6:	e79b      	b.n	8012e30 <__multiply+0x84>
 8012ef8:	08015d23 	.word	0x08015d23
 8012efc:	08015d34 	.word	0x08015d34

08012f00 <__pow5mult>:
 8012f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f04:	4615      	mov	r5, r2
 8012f06:	f012 0203 	ands.w	r2, r2, #3
 8012f0a:	4607      	mov	r7, r0
 8012f0c:	460e      	mov	r6, r1
 8012f0e:	d007      	beq.n	8012f20 <__pow5mult+0x20>
 8012f10:	4c25      	ldr	r4, [pc, #148]	@ (8012fa8 <__pow5mult+0xa8>)
 8012f12:	3a01      	subs	r2, #1
 8012f14:	2300      	movs	r3, #0
 8012f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012f1a:	f7ff fe9f 	bl	8012c5c <__multadd>
 8012f1e:	4606      	mov	r6, r0
 8012f20:	10ad      	asrs	r5, r5, #2
 8012f22:	d03d      	beq.n	8012fa0 <__pow5mult+0xa0>
 8012f24:	69fc      	ldr	r4, [r7, #28]
 8012f26:	b97c      	cbnz	r4, 8012f48 <__pow5mult+0x48>
 8012f28:	2010      	movs	r0, #16
 8012f2a:	f7ff fd7f 	bl	8012a2c <malloc>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	61f8      	str	r0, [r7, #28]
 8012f32:	b928      	cbnz	r0, 8012f40 <__pow5mult+0x40>
 8012f34:	4b1d      	ldr	r3, [pc, #116]	@ (8012fac <__pow5mult+0xac>)
 8012f36:	481e      	ldr	r0, [pc, #120]	@ (8012fb0 <__pow5mult+0xb0>)
 8012f38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012f3c:	f000 fc7a 	bl	8013834 <__assert_func>
 8012f40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012f44:	6004      	str	r4, [r0, #0]
 8012f46:	60c4      	str	r4, [r0, #12]
 8012f48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012f4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012f50:	b94c      	cbnz	r4, 8012f66 <__pow5mult+0x66>
 8012f52:	f240 2171 	movw	r1, #625	@ 0x271
 8012f56:	4638      	mov	r0, r7
 8012f58:	f7ff ff12 	bl	8012d80 <__i2b>
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8012f62:	4604      	mov	r4, r0
 8012f64:	6003      	str	r3, [r0, #0]
 8012f66:	f04f 0900 	mov.w	r9, #0
 8012f6a:	07eb      	lsls	r3, r5, #31
 8012f6c:	d50a      	bpl.n	8012f84 <__pow5mult+0x84>
 8012f6e:	4631      	mov	r1, r6
 8012f70:	4622      	mov	r2, r4
 8012f72:	4638      	mov	r0, r7
 8012f74:	f7ff ff1a 	bl	8012dac <__multiply>
 8012f78:	4631      	mov	r1, r6
 8012f7a:	4680      	mov	r8, r0
 8012f7c:	4638      	mov	r0, r7
 8012f7e:	f7ff fe4b 	bl	8012c18 <_Bfree>
 8012f82:	4646      	mov	r6, r8
 8012f84:	106d      	asrs	r5, r5, #1
 8012f86:	d00b      	beq.n	8012fa0 <__pow5mult+0xa0>
 8012f88:	6820      	ldr	r0, [r4, #0]
 8012f8a:	b938      	cbnz	r0, 8012f9c <__pow5mult+0x9c>
 8012f8c:	4622      	mov	r2, r4
 8012f8e:	4621      	mov	r1, r4
 8012f90:	4638      	mov	r0, r7
 8012f92:	f7ff ff0b 	bl	8012dac <__multiply>
 8012f96:	6020      	str	r0, [r4, #0]
 8012f98:	f8c0 9000 	str.w	r9, [r0]
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	e7e4      	b.n	8012f6a <__pow5mult+0x6a>
 8012fa0:	4630      	mov	r0, r6
 8012fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fa6:	bf00      	nop
 8012fa8:	08015d90 	.word	0x08015d90
 8012fac:	08015cb4 	.word	0x08015cb4
 8012fb0:	08015d34 	.word	0x08015d34

08012fb4 <__lshift>:
 8012fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fb8:	460c      	mov	r4, r1
 8012fba:	6849      	ldr	r1, [r1, #4]
 8012fbc:	6923      	ldr	r3, [r4, #16]
 8012fbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012fc2:	68a3      	ldr	r3, [r4, #8]
 8012fc4:	4607      	mov	r7, r0
 8012fc6:	4691      	mov	r9, r2
 8012fc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012fcc:	f108 0601 	add.w	r6, r8, #1
 8012fd0:	42b3      	cmp	r3, r6
 8012fd2:	db0b      	blt.n	8012fec <__lshift+0x38>
 8012fd4:	4638      	mov	r0, r7
 8012fd6:	f7ff fddf 	bl	8012b98 <_Balloc>
 8012fda:	4605      	mov	r5, r0
 8012fdc:	b948      	cbnz	r0, 8012ff2 <__lshift+0x3e>
 8012fde:	4602      	mov	r2, r0
 8012fe0:	4b28      	ldr	r3, [pc, #160]	@ (8013084 <__lshift+0xd0>)
 8012fe2:	4829      	ldr	r0, [pc, #164]	@ (8013088 <__lshift+0xd4>)
 8012fe4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012fe8:	f000 fc24 	bl	8013834 <__assert_func>
 8012fec:	3101      	adds	r1, #1
 8012fee:	005b      	lsls	r3, r3, #1
 8012ff0:	e7ee      	b.n	8012fd0 <__lshift+0x1c>
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	f100 0114 	add.w	r1, r0, #20
 8012ff8:	f100 0210 	add.w	r2, r0, #16
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	4553      	cmp	r3, sl
 8013000:	db33      	blt.n	801306a <__lshift+0xb6>
 8013002:	6920      	ldr	r0, [r4, #16]
 8013004:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013008:	f104 0314 	add.w	r3, r4, #20
 801300c:	f019 091f 	ands.w	r9, r9, #31
 8013010:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013014:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013018:	d02b      	beq.n	8013072 <__lshift+0xbe>
 801301a:	f1c9 0e20 	rsb	lr, r9, #32
 801301e:	468a      	mov	sl, r1
 8013020:	2200      	movs	r2, #0
 8013022:	6818      	ldr	r0, [r3, #0]
 8013024:	fa00 f009 	lsl.w	r0, r0, r9
 8013028:	4310      	orrs	r0, r2
 801302a:	f84a 0b04 	str.w	r0, [sl], #4
 801302e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013032:	459c      	cmp	ip, r3
 8013034:	fa22 f20e 	lsr.w	r2, r2, lr
 8013038:	d8f3      	bhi.n	8013022 <__lshift+0x6e>
 801303a:	ebac 0304 	sub.w	r3, ip, r4
 801303e:	3b15      	subs	r3, #21
 8013040:	f023 0303 	bic.w	r3, r3, #3
 8013044:	3304      	adds	r3, #4
 8013046:	f104 0015 	add.w	r0, r4, #21
 801304a:	4584      	cmp	ip, r0
 801304c:	bf38      	it	cc
 801304e:	2304      	movcc	r3, #4
 8013050:	50ca      	str	r2, [r1, r3]
 8013052:	b10a      	cbz	r2, 8013058 <__lshift+0xa4>
 8013054:	f108 0602 	add.w	r6, r8, #2
 8013058:	3e01      	subs	r6, #1
 801305a:	4638      	mov	r0, r7
 801305c:	612e      	str	r6, [r5, #16]
 801305e:	4621      	mov	r1, r4
 8013060:	f7ff fdda 	bl	8012c18 <_Bfree>
 8013064:	4628      	mov	r0, r5
 8013066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801306a:	f842 0f04 	str.w	r0, [r2, #4]!
 801306e:	3301      	adds	r3, #1
 8013070:	e7c5      	b.n	8012ffe <__lshift+0x4a>
 8013072:	3904      	subs	r1, #4
 8013074:	f853 2b04 	ldr.w	r2, [r3], #4
 8013078:	f841 2f04 	str.w	r2, [r1, #4]!
 801307c:	459c      	cmp	ip, r3
 801307e:	d8f9      	bhi.n	8013074 <__lshift+0xc0>
 8013080:	e7ea      	b.n	8013058 <__lshift+0xa4>
 8013082:	bf00      	nop
 8013084:	08015d23 	.word	0x08015d23
 8013088:	08015d34 	.word	0x08015d34

0801308c <__mcmp>:
 801308c:	690a      	ldr	r2, [r1, #16]
 801308e:	4603      	mov	r3, r0
 8013090:	6900      	ldr	r0, [r0, #16]
 8013092:	1a80      	subs	r0, r0, r2
 8013094:	b530      	push	{r4, r5, lr}
 8013096:	d10e      	bne.n	80130b6 <__mcmp+0x2a>
 8013098:	3314      	adds	r3, #20
 801309a:	3114      	adds	r1, #20
 801309c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80130a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80130a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80130a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80130ac:	4295      	cmp	r5, r2
 80130ae:	d003      	beq.n	80130b8 <__mcmp+0x2c>
 80130b0:	d205      	bcs.n	80130be <__mcmp+0x32>
 80130b2:	f04f 30ff 	mov.w	r0, #4294967295
 80130b6:	bd30      	pop	{r4, r5, pc}
 80130b8:	42a3      	cmp	r3, r4
 80130ba:	d3f3      	bcc.n	80130a4 <__mcmp+0x18>
 80130bc:	e7fb      	b.n	80130b6 <__mcmp+0x2a>
 80130be:	2001      	movs	r0, #1
 80130c0:	e7f9      	b.n	80130b6 <__mcmp+0x2a>
	...

080130c4 <__mdiff>:
 80130c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130c8:	4689      	mov	r9, r1
 80130ca:	4606      	mov	r6, r0
 80130cc:	4611      	mov	r1, r2
 80130ce:	4648      	mov	r0, r9
 80130d0:	4614      	mov	r4, r2
 80130d2:	f7ff ffdb 	bl	801308c <__mcmp>
 80130d6:	1e05      	subs	r5, r0, #0
 80130d8:	d112      	bne.n	8013100 <__mdiff+0x3c>
 80130da:	4629      	mov	r1, r5
 80130dc:	4630      	mov	r0, r6
 80130de:	f7ff fd5b 	bl	8012b98 <_Balloc>
 80130e2:	4602      	mov	r2, r0
 80130e4:	b928      	cbnz	r0, 80130f2 <__mdiff+0x2e>
 80130e6:	4b3f      	ldr	r3, [pc, #252]	@ (80131e4 <__mdiff+0x120>)
 80130e8:	f240 2137 	movw	r1, #567	@ 0x237
 80130ec:	483e      	ldr	r0, [pc, #248]	@ (80131e8 <__mdiff+0x124>)
 80130ee:	f000 fba1 	bl	8013834 <__assert_func>
 80130f2:	2301      	movs	r3, #1
 80130f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80130f8:	4610      	mov	r0, r2
 80130fa:	b003      	add	sp, #12
 80130fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013100:	bfbc      	itt	lt
 8013102:	464b      	movlt	r3, r9
 8013104:	46a1      	movlt	r9, r4
 8013106:	4630      	mov	r0, r6
 8013108:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801310c:	bfba      	itte	lt
 801310e:	461c      	movlt	r4, r3
 8013110:	2501      	movlt	r5, #1
 8013112:	2500      	movge	r5, #0
 8013114:	f7ff fd40 	bl	8012b98 <_Balloc>
 8013118:	4602      	mov	r2, r0
 801311a:	b918      	cbnz	r0, 8013124 <__mdiff+0x60>
 801311c:	4b31      	ldr	r3, [pc, #196]	@ (80131e4 <__mdiff+0x120>)
 801311e:	f240 2145 	movw	r1, #581	@ 0x245
 8013122:	e7e3      	b.n	80130ec <__mdiff+0x28>
 8013124:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013128:	6926      	ldr	r6, [r4, #16]
 801312a:	60c5      	str	r5, [r0, #12]
 801312c:	f109 0310 	add.w	r3, r9, #16
 8013130:	f109 0514 	add.w	r5, r9, #20
 8013134:	f104 0e14 	add.w	lr, r4, #20
 8013138:	f100 0b14 	add.w	fp, r0, #20
 801313c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013140:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013144:	9301      	str	r3, [sp, #4]
 8013146:	46d9      	mov	r9, fp
 8013148:	f04f 0c00 	mov.w	ip, #0
 801314c:	9b01      	ldr	r3, [sp, #4]
 801314e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013152:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013156:	9301      	str	r3, [sp, #4]
 8013158:	fa1f f38a 	uxth.w	r3, sl
 801315c:	4619      	mov	r1, r3
 801315e:	b283      	uxth	r3, r0
 8013160:	1acb      	subs	r3, r1, r3
 8013162:	0c00      	lsrs	r0, r0, #16
 8013164:	4463      	add	r3, ip
 8013166:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801316a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801316e:	b29b      	uxth	r3, r3
 8013170:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013174:	4576      	cmp	r6, lr
 8013176:	f849 3b04 	str.w	r3, [r9], #4
 801317a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801317e:	d8e5      	bhi.n	801314c <__mdiff+0x88>
 8013180:	1b33      	subs	r3, r6, r4
 8013182:	3b15      	subs	r3, #21
 8013184:	f023 0303 	bic.w	r3, r3, #3
 8013188:	3415      	adds	r4, #21
 801318a:	3304      	adds	r3, #4
 801318c:	42a6      	cmp	r6, r4
 801318e:	bf38      	it	cc
 8013190:	2304      	movcc	r3, #4
 8013192:	441d      	add	r5, r3
 8013194:	445b      	add	r3, fp
 8013196:	461e      	mov	r6, r3
 8013198:	462c      	mov	r4, r5
 801319a:	4544      	cmp	r4, r8
 801319c:	d30e      	bcc.n	80131bc <__mdiff+0xf8>
 801319e:	f108 0103 	add.w	r1, r8, #3
 80131a2:	1b49      	subs	r1, r1, r5
 80131a4:	f021 0103 	bic.w	r1, r1, #3
 80131a8:	3d03      	subs	r5, #3
 80131aa:	45a8      	cmp	r8, r5
 80131ac:	bf38      	it	cc
 80131ae:	2100      	movcc	r1, #0
 80131b0:	440b      	add	r3, r1
 80131b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80131b6:	b191      	cbz	r1, 80131de <__mdiff+0x11a>
 80131b8:	6117      	str	r7, [r2, #16]
 80131ba:	e79d      	b.n	80130f8 <__mdiff+0x34>
 80131bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80131c0:	46e6      	mov	lr, ip
 80131c2:	0c08      	lsrs	r0, r1, #16
 80131c4:	fa1c fc81 	uxtah	ip, ip, r1
 80131c8:	4471      	add	r1, lr
 80131ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80131ce:	b289      	uxth	r1, r1
 80131d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80131d4:	f846 1b04 	str.w	r1, [r6], #4
 80131d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80131dc:	e7dd      	b.n	801319a <__mdiff+0xd6>
 80131de:	3f01      	subs	r7, #1
 80131e0:	e7e7      	b.n	80131b2 <__mdiff+0xee>
 80131e2:	bf00      	nop
 80131e4:	08015d23 	.word	0x08015d23
 80131e8:	08015d34 	.word	0x08015d34

080131ec <__d2b>:
 80131ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131f0:	460f      	mov	r7, r1
 80131f2:	2101      	movs	r1, #1
 80131f4:	ec59 8b10 	vmov	r8, r9, d0
 80131f8:	4616      	mov	r6, r2
 80131fa:	f7ff fccd 	bl	8012b98 <_Balloc>
 80131fe:	4604      	mov	r4, r0
 8013200:	b930      	cbnz	r0, 8013210 <__d2b+0x24>
 8013202:	4602      	mov	r2, r0
 8013204:	4b23      	ldr	r3, [pc, #140]	@ (8013294 <__d2b+0xa8>)
 8013206:	4824      	ldr	r0, [pc, #144]	@ (8013298 <__d2b+0xac>)
 8013208:	f240 310f 	movw	r1, #783	@ 0x30f
 801320c:	f000 fb12 	bl	8013834 <__assert_func>
 8013210:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013214:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013218:	b10d      	cbz	r5, 801321e <__d2b+0x32>
 801321a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801321e:	9301      	str	r3, [sp, #4]
 8013220:	f1b8 0300 	subs.w	r3, r8, #0
 8013224:	d023      	beq.n	801326e <__d2b+0x82>
 8013226:	4668      	mov	r0, sp
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	f7ff fd7c 	bl	8012d26 <__lo0bits>
 801322e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013232:	b1d0      	cbz	r0, 801326a <__d2b+0x7e>
 8013234:	f1c0 0320 	rsb	r3, r0, #32
 8013238:	fa02 f303 	lsl.w	r3, r2, r3
 801323c:	430b      	orrs	r3, r1
 801323e:	40c2      	lsrs	r2, r0
 8013240:	6163      	str	r3, [r4, #20]
 8013242:	9201      	str	r2, [sp, #4]
 8013244:	9b01      	ldr	r3, [sp, #4]
 8013246:	61a3      	str	r3, [r4, #24]
 8013248:	2b00      	cmp	r3, #0
 801324a:	bf0c      	ite	eq
 801324c:	2201      	moveq	r2, #1
 801324e:	2202      	movne	r2, #2
 8013250:	6122      	str	r2, [r4, #16]
 8013252:	b1a5      	cbz	r5, 801327e <__d2b+0x92>
 8013254:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013258:	4405      	add	r5, r0
 801325a:	603d      	str	r5, [r7, #0]
 801325c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013260:	6030      	str	r0, [r6, #0]
 8013262:	4620      	mov	r0, r4
 8013264:	b003      	add	sp, #12
 8013266:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801326a:	6161      	str	r1, [r4, #20]
 801326c:	e7ea      	b.n	8013244 <__d2b+0x58>
 801326e:	a801      	add	r0, sp, #4
 8013270:	f7ff fd59 	bl	8012d26 <__lo0bits>
 8013274:	9b01      	ldr	r3, [sp, #4]
 8013276:	6163      	str	r3, [r4, #20]
 8013278:	3020      	adds	r0, #32
 801327a:	2201      	movs	r2, #1
 801327c:	e7e8      	b.n	8013250 <__d2b+0x64>
 801327e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013282:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013286:	6038      	str	r0, [r7, #0]
 8013288:	6918      	ldr	r0, [r3, #16]
 801328a:	f7ff fd2d 	bl	8012ce8 <__hi0bits>
 801328e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013292:	e7e5      	b.n	8013260 <__d2b+0x74>
 8013294:	08015d23 	.word	0x08015d23
 8013298:	08015d34 	.word	0x08015d34

0801329c <__ssputs_r>:
 801329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132a0:	688e      	ldr	r6, [r1, #8]
 80132a2:	461f      	mov	r7, r3
 80132a4:	42be      	cmp	r6, r7
 80132a6:	680b      	ldr	r3, [r1, #0]
 80132a8:	4682      	mov	sl, r0
 80132aa:	460c      	mov	r4, r1
 80132ac:	4690      	mov	r8, r2
 80132ae:	d82d      	bhi.n	801330c <__ssputs_r+0x70>
 80132b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80132b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80132b8:	d026      	beq.n	8013308 <__ssputs_r+0x6c>
 80132ba:	6965      	ldr	r5, [r4, #20]
 80132bc:	6909      	ldr	r1, [r1, #16]
 80132be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132c2:	eba3 0901 	sub.w	r9, r3, r1
 80132c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80132ca:	1c7b      	adds	r3, r7, #1
 80132cc:	444b      	add	r3, r9
 80132ce:	106d      	asrs	r5, r5, #1
 80132d0:	429d      	cmp	r5, r3
 80132d2:	bf38      	it	cc
 80132d4:	461d      	movcc	r5, r3
 80132d6:	0553      	lsls	r3, r2, #21
 80132d8:	d527      	bpl.n	801332a <__ssputs_r+0x8e>
 80132da:	4629      	mov	r1, r5
 80132dc:	f7ff fbd0 	bl	8012a80 <_malloc_r>
 80132e0:	4606      	mov	r6, r0
 80132e2:	b360      	cbz	r0, 801333e <__ssputs_r+0xa2>
 80132e4:	6921      	ldr	r1, [r4, #16]
 80132e6:	464a      	mov	r2, r9
 80132e8:	f7fe fcf9 	bl	8011cde <memcpy>
 80132ec:	89a3      	ldrh	r3, [r4, #12]
 80132ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80132f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132f6:	81a3      	strh	r3, [r4, #12]
 80132f8:	6126      	str	r6, [r4, #16]
 80132fa:	6165      	str	r5, [r4, #20]
 80132fc:	444e      	add	r6, r9
 80132fe:	eba5 0509 	sub.w	r5, r5, r9
 8013302:	6026      	str	r6, [r4, #0]
 8013304:	60a5      	str	r5, [r4, #8]
 8013306:	463e      	mov	r6, r7
 8013308:	42be      	cmp	r6, r7
 801330a:	d900      	bls.n	801330e <__ssputs_r+0x72>
 801330c:	463e      	mov	r6, r7
 801330e:	6820      	ldr	r0, [r4, #0]
 8013310:	4632      	mov	r2, r6
 8013312:	4641      	mov	r1, r8
 8013314:	f7fe fc0c 	bl	8011b30 <memmove>
 8013318:	68a3      	ldr	r3, [r4, #8]
 801331a:	1b9b      	subs	r3, r3, r6
 801331c:	60a3      	str	r3, [r4, #8]
 801331e:	6823      	ldr	r3, [r4, #0]
 8013320:	4433      	add	r3, r6
 8013322:	6023      	str	r3, [r4, #0]
 8013324:	2000      	movs	r0, #0
 8013326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801332a:	462a      	mov	r2, r5
 801332c:	f000 fac6 	bl	80138bc <_realloc_r>
 8013330:	4606      	mov	r6, r0
 8013332:	2800      	cmp	r0, #0
 8013334:	d1e0      	bne.n	80132f8 <__ssputs_r+0x5c>
 8013336:	6921      	ldr	r1, [r4, #16]
 8013338:	4650      	mov	r0, sl
 801333a:	f7ff fb2d 	bl	8012998 <_free_r>
 801333e:	230c      	movs	r3, #12
 8013340:	f8ca 3000 	str.w	r3, [sl]
 8013344:	89a3      	ldrh	r3, [r4, #12]
 8013346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801334a:	81a3      	strh	r3, [r4, #12]
 801334c:	f04f 30ff 	mov.w	r0, #4294967295
 8013350:	e7e9      	b.n	8013326 <__ssputs_r+0x8a>
	...

08013354 <_svfiprintf_r>:
 8013354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013358:	4698      	mov	r8, r3
 801335a:	898b      	ldrh	r3, [r1, #12]
 801335c:	061b      	lsls	r3, r3, #24
 801335e:	b09d      	sub	sp, #116	@ 0x74
 8013360:	4607      	mov	r7, r0
 8013362:	460d      	mov	r5, r1
 8013364:	4614      	mov	r4, r2
 8013366:	d510      	bpl.n	801338a <_svfiprintf_r+0x36>
 8013368:	690b      	ldr	r3, [r1, #16]
 801336a:	b973      	cbnz	r3, 801338a <_svfiprintf_r+0x36>
 801336c:	2140      	movs	r1, #64	@ 0x40
 801336e:	f7ff fb87 	bl	8012a80 <_malloc_r>
 8013372:	6028      	str	r0, [r5, #0]
 8013374:	6128      	str	r0, [r5, #16]
 8013376:	b930      	cbnz	r0, 8013386 <_svfiprintf_r+0x32>
 8013378:	230c      	movs	r3, #12
 801337a:	603b      	str	r3, [r7, #0]
 801337c:	f04f 30ff 	mov.w	r0, #4294967295
 8013380:	b01d      	add	sp, #116	@ 0x74
 8013382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013386:	2340      	movs	r3, #64	@ 0x40
 8013388:	616b      	str	r3, [r5, #20]
 801338a:	2300      	movs	r3, #0
 801338c:	9309      	str	r3, [sp, #36]	@ 0x24
 801338e:	2320      	movs	r3, #32
 8013390:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013394:	f8cd 800c 	str.w	r8, [sp, #12]
 8013398:	2330      	movs	r3, #48	@ 0x30
 801339a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013538 <_svfiprintf_r+0x1e4>
 801339e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80133a2:	f04f 0901 	mov.w	r9, #1
 80133a6:	4623      	mov	r3, r4
 80133a8:	469a      	mov	sl, r3
 80133aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133ae:	b10a      	cbz	r2, 80133b4 <_svfiprintf_r+0x60>
 80133b0:	2a25      	cmp	r2, #37	@ 0x25
 80133b2:	d1f9      	bne.n	80133a8 <_svfiprintf_r+0x54>
 80133b4:	ebba 0b04 	subs.w	fp, sl, r4
 80133b8:	d00b      	beq.n	80133d2 <_svfiprintf_r+0x7e>
 80133ba:	465b      	mov	r3, fp
 80133bc:	4622      	mov	r2, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	4638      	mov	r0, r7
 80133c2:	f7ff ff6b 	bl	801329c <__ssputs_r>
 80133c6:	3001      	adds	r0, #1
 80133c8:	f000 80a7 	beq.w	801351a <_svfiprintf_r+0x1c6>
 80133cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133ce:	445a      	add	r2, fp
 80133d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80133d2:	f89a 3000 	ldrb.w	r3, [sl]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	f000 809f 	beq.w	801351a <_svfiprintf_r+0x1c6>
 80133dc:	2300      	movs	r3, #0
 80133de:	f04f 32ff 	mov.w	r2, #4294967295
 80133e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133e6:	f10a 0a01 	add.w	sl, sl, #1
 80133ea:	9304      	str	r3, [sp, #16]
 80133ec:	9307      	str	r3, [sp, #28]
 80133ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80133f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80133f4:	4654      	mov	r4, sl
 80133f6:	2205      	movs	r2, #5
 80133f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133fc:	484e      	ldr	r0, [pc, #312]	@ (8013538 <_svfiprintf_r+0x1e4>)
 80133fe:	f7ec feef 	bl	80001e0 <memchr>
 8013402:	9a04      	ldr	r2, [sp, #16]
 8013404:	b9d8      	cbnz	r0, 801343e <_svfiprintf_r+0xea>
 8013406:	06d0      	lsls	r0, r2, #27
 8013408:	bf44      	itt	mi
 801340a:	2320      	movmi	r3, #32
 801340c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013410:	0711      	lsls	r1, r2, #28
 8013412:	bf44      	itt	mi
 8013414:	232b      	movmi	r3, #43	@ 0x2b
 8013416:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801341a:	f89a 3000 	ldrb.w	r3, [sl]
 801341e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013420:	d015      	beq.n	801344e <_svfiprintf_r+0xfa>
 8013422:	9a07      	ldr	r2, [sp, #28]
 8013424:	4654      	mov	r4, sl
 8013426:	2000      	movs	r0, #0
 8013428:	f04f 0c0a 	mov.w	ip, #10
 801342c:	4621      	mov	r1, r4
 801342e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013432:	3b30      	subs	r3, #48	@ 0x30
 8013434:	2b09      	cmp	r3, #9
 8013436:	d94b      	bls.n	80134d0 <_svfiprintf_r+0x17c>
 8013438:	b1b0      	cbz	r0, 8013468 <_svfiprintf_r+0x114>
 801343a:	9207      	str	r2, [sp, #28]
 801343c:	e014      	b.n	8013468 <_svfiprintf_r+0x114>
 801343e:	eba0 0308 	sub.w	r3, r0, r8
 8013442:	fa09 f303 	lsl.w	r3, r9, r3
 8013446:	4313      	orrs	r3, r2
 8013448:	9304      	str	r3, [sp, #16]
 801344a:	46a2      	mov	sl, r4
 801344c:	e7d2      	b.n	80133f4 <_svfiprintf_r+0xa0>
 801344e:	9b03      	ldr	r3, [sp, #12]
 8013450:	1d19      	adds	r1, r3, #4
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	9103      	str	r1, [sp, #12]
 8013456:	2b00      	cmp	r3, #0
 8013458:	bfbb      	ittet	lt
 801345a:	425b      	neglt	r3, r3
 801345c:	f042 0202 	orrlt.w	r2, r2, #2
 8013460:	9307      	strge	r3, [sp, #28]
 8013462:	9307      	strlt	r3, [sp, #28]
 8013464:	bfb8      	it	lt
 8013466:	9204      	strlt	r2, [sp, #16]
 8013468:	7823      	ldrb	r3, [r4, #0]
 801346a:	2b2e      	cmp	r3, #46	@ 0x2e
 801346c:	d10a      	bne.n	8013484 <_svfiprintf_r+0x130>
 801346e:	7863      	ldrb	r3, [r4, #1]
 8013470:	2b2a      	cmp	r3, #42	@ 0x2a
 8013472:	d132      	bne.n	80134da <_svfiprintf_r+0x186>
 8013474:	9b03      	ldr	r3, [sp, #12]
 8013476:	1d1a      	adds	r2, r3, #4
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	9203      	str	r2, [sp, #12]
 801347c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013480:	3402      	adds	r4, #2
 8013482:	9305      	str	r3, [sp, #20]
 8013484:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013548 <_svfiprintf_r+0x1f4>
 8013488:	7821      	ldrb	r1, [r4, #0]
 801348a:	2203      	movs	r2, #3
 801348c:	4650      	mov	r0, sl
 801348e:	f7ec fea7 	bl	80001e0 <memchr>
 8013492:	b138      	cbz	r0, 80134a4 <_svfiprintf_r+0x150>
 8013494:	9b04      	ldr	r3, [sp, #16]
 8013496:	eba0 000a 	sub.w	r0, r0, sl
 801349a:	2240      	movs	r2, #64	@ 0x40
 801349c:	4082      	lsls	r2, r0
 801349e:	4313      	orrs	r3, r2
 80134a0:	3401      	adds	r4, #1
 80134a2:	9304      	str	r3, [sp, #16]
 80134a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134a8:	4824      	ldr	r0, [pc, #144]	@ (801353c <_svfiprintf_r+0x1e8>)
 80134aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80134ae:	2206      	movs	r2, #6
 80134b0:	f7ec fe96 	bl	80001e0 <memchr>
 80134b4:	2800      	cmp	r0, #0
 80134b6:	d036      	beq.n	8013526 <_svfiprintf_r+0x1d2>
 80134b8:	4b21      	ldr	r3, [pc, #132]	@ (8013540 <_svfiprintf_r+0x1ec>)
 80134ba:	bb1b      	cbnz	r3, 8013504 <_svfiprintf_r+0x1b0>
 80134bc:	9b03      	ldr	r3, [sp, #12]
 80134be:	3307      	adds	r3, #7
 80134c0:	f023 0307 	bic.w	r3, r3, #7
 80134c4:	3308      	adds	r3, #8
 80134c6:	9303      	str	r3, [sp, #12]
 80134c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134ca:	4433      	add	r3, r6
 80134cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80134ce:	e76a      	b.n	80133a6 <_svfiprintf_r+0x52>
 80134d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80134d4:	460c      	mov	r4, r1
 80134d6:	2001      	movs	r0, #1
 80134d8:	e7a8      	b.n	801342c <_svfiprintf_r+0xd8>
 80134da:	2300      	movs	r3, #0
 80134dc:	3401      	adds	r4, #1
 80134de:	9305      	str	r3, [sp, #20]
 80134e0:	4619      	mov	r1, r3
 80134e2:	f04f 0c0a 	mov.w	ip, #10
 80134e6:	4620      	mov	r0, r4
 80134e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134ec:	3a30      	subs	r2, #48	@ 0x30
 80134ee:	2a09      	cmp	r2, #9
 80134f0:	d903      	bls.n	80134fa <_svfiprintf_r+0x1a6>
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d0c6      	beq.n	8013484 <_svfiprintf_r+0x130>
 80134f6:	9105      	str	r1, [sp, #20]
 80134f8:	e7c4      	b.n	8013484 <_svfiprintf_r+0x130>
 80134fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80134fe:	4604      	mov	r4, r0
 8013500:	2301      	movs	r3, #1
 8013502:	e7f0      	b.n	80134e6 <_svfiprintf_r+0x192>
 8013504:	ab03      	add	r3, sp, #12
 8013506:	9300      	str	r3, [sp, #0]
 8013508:	462a      	mov	r2, r5
 801350a:	4b0e      	ldr	r3, [pc, #56]	@ (8013544 <_svfiprintf_r+0x1f0>)
 801350c:	a904      	add	r1, sp, #16
 801350e:	4638      	mov	r0, r7
 8013510:	f7fd fcfe 	bl	8010f10 <_printf_float>
 8013514:	1c42      	adds	r2, r0, #1
 8013516:	4606      	mov	r6, r0
 8013518:	d1d6      	bne.n	80134c8 <_svfiprintf_r+0x174>
 801351a:	89ab      	ldrh	r3, [r5, #12]
 801351c:	065b      	lsls	r3, r3, #25
 801351e:	f53f af2d 	bmi.w	801337c <_svfiprintf_r+0x28>
 8013522:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013524:	e72c      	b.n	8013380 <_svfiprintf_r+0x2c>
 8013526:	ab03      	add	r3, sp, #12
 8013528:	9300      	str	r3, [sp, #0]
 801352a:	462a      	mov	r2, r5
 801352c:	4b05      	ldr	r3, [pc, #20]	@ (8013544 <_svfiprintf_r+0x1f0>)
 801352e:	a904      	add	r1, sp, #16
 8013530:	4638      	mov	r0, r7
 8013532:	f7fd ff85 	bl	8011440 <_printf_i>
 8013536:	e7ed      	b.n	8013514 <_svfiprintf_r+0x1c0>
 8013538:	08015e90 	.word	0x08015e90
 801353c:	08015e9a 	.word	0x08015e9a
 8013540:	08010f11 	.word	0x08010f11
 8013544:	0801329d 	.word	0x0801329d
 8013548:	08015e96 	.word	0x08015e96

0801354c <__sflush_r>:
 801354c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013554:	0716      	lsls	r6, r2, #28
 8013556:	4605      	mov	r5, r0
 8013558:	460c      	mov	r4, r1
 801355a:	d454      	bmi.n	8013606 <__sflush_r+0xba>
 801355c:	684b      	ldr	r3, [r1, #4]
 801355e:	2b00      	cmp	r3, #0
 8013560:	dc02      	bgt.n	8013568 <__sflush_r+0x1c>
 8013562:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013564:	2b00      	cmp	r3, #0
 8013566:	dd48      	ble.n	80135fa <__sflush_r+0xae>
 8013568:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801356a:	2e00      	cmp	r6, #0
 801356c:	d045      	beq.n	80135fa <__sflush_r+0xae>
 801356e:	2300      	movs	r3, #0
 8013570:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013574:	682f      	ldr	r7, [r5, #0]
 8013576:	6a21      	ldr	r1, [r4, #32]
 8013578:	602b      	str	r3, [r5, #0]
 801357a:	d030      	beq.n	80135de <__sflush_r+0x92>
 801357c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801357e:	89a3      	ldrh	r3, [r4, #12]
 8013580:	0759      	lsls	r1, r3, #29
 8013582:	d505      	bpl.n	8013590 <__sflush_r+0x44>
 8013584:	6863      	ldr	r3, [r4, #4]
 8013586:	1ad2      	subs	r2, r2, r3
 8013588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801358a:	b10b      	cbz	r3, 8013590 <__sflush_r+0x44>
 801358c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801358e:	1ad2      	subs	r2, r2, r3
 8013590:	2300      	movs	r3, #0
 8013592:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013594:	6a21      	ldr	r1, [r4, #32]
 8013596:	4628      	mov	r0, r5
 8013598:	47b0      	blx	r6
 801359a:	1c43      	adds	r3, r0, #1
 801359c:	89a3      	ldrh	r3, [r4, #12]
 801359e:	d106      	bne.n	80135ae <__sflush_r+0x62>
 80135a0:	6829      	ldr	r1, [r5, #0]
 80135a2:	291d      	cmp	r1, #29
 80135a4:	d82b      	bhi.n	80135fe <__sflush_r+0xb2>
 80135a6:	4a2a      	ldr	r2, [pc, #168]	@ (8013650 <__sflush_r+0x104>)
 80135a8:	410a      	asrs	r2, r1
 80135aa:	07d6      	lsls	r6, r2, #31
 80135ac:	d427      	bmi.n	80135fe <__sflush_r+0xb2>
 80135ae:	2200      	movs	r2, #0
 80135b0:	6062      	str	r2, [r4, #4]
 80135b2:	04d9      	lsls	r1, r3, #19
 80135b4:	6922      	ldr	r2, [r4, #16]
 80135b6:	6022      	str	r2, [r4, #0]
 80135b8:	d504      	bpl.n	80135c4 <__sflush_r+0x78>
 80135ba:	1c42      	adds	r2, r0, #1
 80135bc:	d101      	bne.n	80135c2 <__sflush_r+0x76>
 80135be:	682b      	ldr	r3, [r5, #0]
 80135c0:	b903      	cbnz	r3, 80135c4 <__sflush_r+0x78>
 80135c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80135c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80135c6:	602f      	str	r7, [r5, #0]
 80135c8:	b1b9      	cbz	r1, 80135fa <__sflush_r+0xae>
 80135ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80135ce:	4299      	cmp	r1, r3
 80135d0:	d002      	beq.n	80135d8 <__sflush_r+0x8c>
 80135d2:	4628      	mov	r0, r5
 80135d4:	f7ff f9e0 	bl	8012998 <_free_r>
 80135d8:	2300      	movs	r3, #0
 80135da:	6363      	str	r3, [r4, #52]	@ 0x34
 80135dc:	e00d      	b.n	80135fa <__sflush_r+0xae>
 80135de:	2301      	movs	r3, #1
 80135e0:	4628      	mov	r0, r5
 80135e2:	47b0      	blx	r6
 80135e4:	4602      	mov	r2, r0
 80135e6:	1c50      	adds	r0, r2, #1
 80135e8:	d1c9      	bne.n	801357e <__sflush_r+0x32>
 80135ea:	682b      	ldr	r3, [r5, #0]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d0c6      	beq.n	801357e <__sflush_r+0x32>
 80135f0:	2b1d      	cmp	r3, #29
 80135f2:	d001      	beq.n	80135f8 <__sflush_r+0xac>
 80135f4:	2b16      	cmp	r3, #22
 80135f6:	d11e      	bne.n	8013636 <__sflush_r+0xea>
 80135f8:	602f      	str	r7, [r5, #0]
 80135fa:	2000      	movs	r0, #0
 80135fc:	e022      	b.n	8013644 <__sflush_r+0xf8>
 80135fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013602:	b21b      	sxth	r3, r3
 8013604:	e01b      	b.n	801363e <__sflush_r+0xf2>
 8013606:	690f      	ldr	r7, [r1, #16]
 8013608:	2f00      	cmp	r7, #0
 801360a:	d0f6      	beq.n	80135fa <__sflush_r+0xae>
 801360c:	0793      	lsls	r3, r2, #30
 801360e:	680e      	ldr	r6, [r1, #0]
 8013610:	bf08      	it	eq
 8013612:	694b      	ldreq	r3, [r1, #20]
 8013614:	600f      	str	r7, [r1, #0]
 8013616:	bf18      	it	ne
 8013618:	2300      	movne	r3, #0
 801361a:	eba6 0807 	sub.w	r8, r6, r7
 801361e:	608b      	str	r3, [r1, #8]
 8013620:	f1b8 0f00 	cmp.w	r8, #0
 8013624:	dde9      	ble.n	80135fa <__sflush_r+0xae>
 8013626:	6a21      	ldr	r1, [r4, #32]
 8013628:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801362a:	4643      	mov	r3, r8
 801362c:	463a      	mov	r2, r7
 801362e:	4628      	mov	r0, r5
 8013630:	47b0      	blx	r6
 8013632:	2800      	cmp	r0, #0
 8013634:	dc08      	bgt.n	8013648 <__sflush_r+0xfc>
 8013636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801363a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801363e:	81a3      	strh	r3, [r4, #12]
 8013640:	f04f 30ff 	mov.w	r0, #4294967295
 8013644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013648:	4407      	add	r7, r0
 801364a:	eba8 0800 	sub.w	r8, r8, r0
 801364e:	e7e7      	b.n	8013620 <__sflush_r+0xd4>
 8013650:	dfbffffe 	.word	0xdfbffffe

08013654 <_fflush_r>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	690b      	ldr	r3, [r1, #16]
 8013658:	4605      	mov	r5, r0
 801365a:	460c      	mov	r4, r1
 801365c:	b913      	cbnz	r3, 8013664 <_fflush_r+0x10>
 801365e:	2500      	movs	r5, #0
 8013660:	4628      	mov	r0, r5
 8013662:	bd38      	pop	{r3, r4, r5, pc}
 8013664:	b118      	cbz	r0, 801366e <_fflush_r+0x1a>
 8013666:	6a03      	ldr	r3, [r0, #32]
 8013668:	b90b      	cbnz	r3, 801366e <_fflush_r+0x1a>
 801366a:	f7fe f895 	bl	8011798 <__sinit>
 801366e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d0f3      	beq.n	801365e <_fflush_r+0xa>
 8013676:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013678:	07d0      	lsls	r0, r2, #31
 801367a:	d404      	bmi.n	8013686 <_fflush_r+0x32>
 801367c:	0599      	lsls	r1, r3, #22
 801367e:	d402      	bmi.n	8013686 <_fflush_r+0x32>
 8013680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013682:	f7fe fb22 	bl	8011cca <__retarget_lock_acquire_recursive>
 8013686:	4628      	mov	r0, r5
 8013688:	4621      	mov	r1, r4
 801368a:	f7ff ff5f 	bl	801354c <__sflush_r>
 801368e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013690:	07da      	lsls	r2, r3, #31
 8013692:	4605      	mov	r5, r0
 8013694:	d4e4      	bmi.n	8013660 <_fflush_r+0xc>
 8013696:	89a3      	ldrh	r3, [r4, #12]
 8013698:	059b      	lsls	r3, r3, #22
 801369a:	d4e1      	bmi.n	8013660 <_fflush_r+0xc>
 801369c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801369e:	f7fe fb15 	bl	8011ccc <__retarget_lock_release_recursive>
 80136a2:	e7dd      	b.n	8013660 <_fflush_r+0xc>

080136a4 <__swhatbuf_r>:
 80136a4:	b570      	push	{r4, r5, r6, lr}
 80136a6:	460c      	mov	r4, r1
 80136a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80136ac:	2900      	cmp	r1, #0
 80136ae:	b096      	sub	sp, #88	@ 0x58
 80136b0:	4615      	mov	r5, r2
 80136b2:	461e      	mov	r6, r3
 80136b4:	da0d      	bge.n	80136d2 <__swhatbuf_r+0x2e>
 80136b6:	89a3      	ldrh	r3, [r4, #12]
 80136b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80136bc:	f04f 0100 	mov.w	r1, #0
 80136c0:	bf14      	ite	ne
 80136c2:	2340      	movne	r3, #64	@ 0x40
 80136c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80136c8:	2000      	movs	r0, #0
 80136ca:	6031      	str	r1, [r6, #0]
 80136cc:	602b      	str	r3, [r5, #0]
 80136ce:	b016      	add	sp, #88	@ 0x58
 80136d0:	bd70      	pop	{r4, r5, r6, pc}
 80136d2:	466a      	mov	r2, sp
 80136d4:	f000 f87c 	bl	80137d0 <_fstat_r>
 80136d8:	2800      	cmp	r0, #0
 80136da:	dbec      	blt.n	80136b6 <__swhatbuf_r+0x12>
 80136dc:	9901      	ldr	r1, [sp, #4]
 80136de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80136e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80136e6:	4259      	negs	r1, r3
 80136e8:	4159      	adcs	r1, r3
 80136ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80136ee:	e7eb      	b.n	80136c8 <__swhatbuf_r+0x24>

080136f0 <__smakebuf_r>:
 80136f0:	898b      	ldrh	r3, [r1, #12]
 80136f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80136f4:	079d      	lsls	r5, r3, #30
 80136f6:	4606      	mov	r6, r0
 80136f8:	460c      	mov	r4, r1
 80136fa:	d507      	bpl.n	801370c <__smakebuf_r+0x1c>
 80136fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013700:	6023      	str	r3, [r4, #0]
 8013702:	6123      	str	r3, [r4, #16]
 8013704:	2301      	movs	r3, #1
 8013706:	6163      	str	r3, [r4, #20]
 8013708:	b003      	add	sp, #12
 801370a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801370c:	ab01      	add	r3, sp, #4
 801370e:	466a      	mov	r2, sp
 8013710:	f7ff ffc8 	bl	80136a4 <__swhatbuf_r>
 8013714:	9f00      	ldr	r7, [sp, #0]
 8013716:	4605      	mov	r5, r0
 8013718:	4639      	mov	r1, r7
 801371a:	4630      	mov	r0, r6
 801371c:	f7ff f9b0 	bl	8012a80 <_malloc_r>
 8013720:	b948      	cbnz	r0, 8013736 <__smakebuf_r+0x46>
 8013722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013726:	059a      	lsls	r2, r3, #22
 8013728:	d4ee      	bmi.n	8013708 <__smakebuf_r+0x18>
 801372a:	f023 0303 	bic.w	r3, r3, #3
 801372e:	f043 0302 	orr.w	r3, r3, #2
 8013732:	81a3      	strh	r3, [r4, #12]
 8013734:	e7e2      	b.n	80136fc <__smakebuf_r+0xc>
 8013736:	89a3      	ldrh	r3, [r4, #12]
 8013738:	6020      	str	r0, [r4, #0]
 801373a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801373e:	81a3      	strh	r3, [r4, #12]
 8013740:	9b01      	ldr	r3, [sp, #4]
 8013742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013746:	b15b      	cbz	r3, 8013760 <__smakebuf_r+0x70>
 8013748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801374c:	4630      	mov	r0, r6
 801374e:	f000 f851 	bl	80137f4 <_isatty_r>
 8013752:	b128      	cbz	r0, 8013760 <__smakebuf_r+0x70>
 8013754:	89a3      	ldrh	r3, [r4, #12]
 8013756:	f023 0303 	bic.w	r3, r3, #3
 801375a:	f043 0301 	orr.w	r3, r3, #1
 801375e:	81a3      	strh	r3, [r4, #12]
 8013760:	89a3      	ldrh	r3, [r4, #12]
 8013762:	431d      	orrs	r5, r3
 8013764:	81a5      	strh	r5, [r4, #12]
 8013766:	e7cf      	b.n	8013708 <__smakebuf_r+0x18>

08013768 <_putc_r>:
 8013768:	b570      	push	{r4, r5, r6, lr}
 801376a:	460d      	mov	r5, r1
 801376c:	4614      	mov	r4, r2
 801376e:	4606      	mov	r6, r0
 8013770:	b118      	cbz	r0, 801377a <_putc_r+0x12>
 8013772:	6a03      	ldr	r3, [r0, #32]
 8013774:	b90b      	cbnz	r3, 801377a <_putc_r+0x12>
 8013776:	f7fe f80f 	bl	8011798 <__sinit>
 801377a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801377c:	07d8      	lsls	r0, r3, #31
 801377e:	d405      	bmi.n	801378c <_putc_r+0x24>
 8013780:	89a3      	ldrh	r3, [r4, #12]
 8013782:	0599      	lsls	r1, r3, #22
 8013784:	d402      	bmi.n	801378c <_putc_r+0x24>
 8013786:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013788:	f7fe fa9f 	bl	8011cca <__retarget_lock_acquire_recursive>
 801378c:	68a3      	ldr	r3, [r4, #8]
 801378e:	3b01      	subs	r3, #1
 8013790:	2b00      	cmp	r3, #0
 8013792:	60a3      	str	r3, [r4, #8]
 8013794:	da05      	bge.n	80137a2 <_putc_r+0x3a>
 8013796:	69a2      	ldr	r2, [r4, #24]
 8013798:	4293      	cmp	r3, r2
 801379a:	db12      	blt.n	80137c2 <_putc_r+0x5a>
 801379c:	b2eb      	uxtb	r3, r5
 801379e:	2b0a      	cmp	r3, #10
 80137a0:	d00f      	beq.n	80137c2 <_putc_r+0x5a>
 80137a2:	6823      	ldr	r3, [r4, #0]
 80137a4:	1c5a      	adds	r2, r3, #1
 80137a6:	6022      	str	r2, [r4, #0]
 80137a8:	701d      	strb	r5, [r3, #0]
 80137aa:	b2ed      	uxtb	r5, r5
 80137ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80137ae:	07da      	lsls	r2, r3, #31
 80137b0:	d405      	bmi.n	80137be <_putc_r+0x56>
 80137b2:	89a3      	ldrh	r3, [r4, #12]
 80137b4:	059b      	lsls	r3, r3, #22
 80137b6:	d402      	bmi.n	80137be <_putc_r+0x56>
 80137b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80137ba:	f7fe fa87 	bl	8011ccc <__retarget_lock_release_recursive>
 80137be:	4628      	mov	r0, r5
 80137c0:	bd70      	pop	{r4, r5, r6, pc}
 80137c2:	4629      	mov	r1, r5
 80137c4:	4622      	mov	r2, r4
 80137c6:	4630      	mov	r0, r6
 80137c8:	f7fe f91e 	bl	8011a08 <__swbuf_r>
 80137cc:	4605      	mov	r5, r0
 80137ce:	e7ed      	b.n	80137ac <_putc_r+0x44>

080137d0 <_fstat_r>:
 80137d0:	b538      	push	{r3, r4, r5, lr}
 80137d2:	4d07      	ldr	r5, [pc, #28]	@ (80137f0 <_fstat_r+0x20>)
 80137d4:	2300      	movs	r3, #0
 80137d6:	4604      	mov	r4, r0
 80137d8:	4608      	mov	r0, r1
 80137da:	4611      	mov	r1, r2
 80137dc:	602b      	str	r3, [r5, #0]
 80137de:	f7ef ffa9 	bl	8003734 <_fstat>
 80137e2:	1c43      	adds	r3, r0, #1
 80137e4:	d102      	bne.n	80137ec <_fstat_r+0x1c>
 80137e6:	682b      	ldr	r3, [r5, #0]
 80137e8:	b103      	cbz	r3, 80137ec <_fstat_r+0x1c>
 80137ea:	6023      	str	r3, [r4, #0]
 80137ec:	bd38      	pop	{r3, r4, r5, pc}
 80137ee:	bf00      	nop
 80137f0:	2000105c 	.word	0x2000105c

080137f4 <_isatty_r>:
 80137f4:	b538      	push	{r3, r4, r5, lr}
 80137f6:	4d06      	ldr	r5, [pc, #24]	@ (8013810 <_isatty_r+0x1c>)
 80137f8:	2300      	movs	r3, #0
 80137fa:	4604      	mov	r4, r0
 80137fc:	4608      	mov	r0, r1
 80137fe:	602b      	str	r3, [r5, #0]
 8013800:	f7ef ffa8 	bl	8003754 <_isatty>
 8013804:	1c43      	adds	r3, r0, #1
 8013806:	d102      	bne.n	801380e <_isatty_r+0x1a>
 8013808:	682b      	ldr	r3, [r5, #0]
 801380a:	b103      	cbz	r3, 801380e <_isatty_r+0x1a>
 801380c:	6023      	str	r3, [r4, #0]
 801380e:	bd38      	pop	{r3, r4, r5, pc}
 8013810:	2000105c 	.word	0x2000105c

08013814 <_sbrk_r>:
 8013814:	b538      	push	{r3, r4, r5, lr}
 8013816:	4d06      	ldr	r5, [pc, #24]	@ (8013830 <_sbrk_r+0x1c>)
 8013818:	2300      	movs	r3, #0
 801381a:	4604      	mov	r4, r0
 801381c:	4608      	mov	r0, r1
 801381e:	602b      	str	r3, [r5, #0]
 8013820:	f7ef ffb0 	bl	8003784 <_sbrk>
 8013824:	1c43      	adds	r3, r0, #1
 8013826:	d102      	bne.n	801382e <_sbrk_r+0x1a>
 8013828:	682b      	ldr	r3, [r5, #0]
 801382a:	b103      	cbz	r3, 801382e <_sbrk_r+0x1a>
 801382c:	6023      	str	r3, [r4, #0]
 801382e:	bd38      	pop	{r3, r4, r5, pc}
 8013830:	2000105c 	.word	0x2000105c

08013834 <__assert_func>:
 8013834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013836:	4614      	mov	r4, r2
 8013838:	461a      	mov	r2, r3
 801383a:	4b09      	ldr	r3, [pc, #36]	@ (8013860 <__assert_func+0x2c>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	4605      	mov	r5, r0
 8013840:	68d8      	ldr	r0, [r3, #12]
 8013842:	b954      	cbnz	r4, 801385a <__assert_func+0x26>
 8013844:	4b07      	ldr	r3, [pc, #28]	@ (8013864 <__assert_func+0x30>)
 8013846:	461c      	mov	r4, r3
 8013848:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801384c:	9100      	str	r1, [sp, #0]
 801384e:	462b      	mov	r3, r5
 8013850:	4905      	ldr	r1, [pc, #20]	@ (8013868 <__assert_func+0x34>)
 8013852:	f000 f86f 	bl	8013934 <fiprintf>
 8013856:	f000 f87f 	bl	8013958 <abort>
 801385a:	4b04      	ldr	r3, [pc, #16]	@ (801386c <__assert_func+0x38>)
 801385c:	e7f4      	b.n	8013848 <__assert_func+0x14>
 801385e:	bf00      	nop
 8013860:	20000060 	.word	0x20000060
 8013864:	08015ee6 	.word	0x08015ee6
 8013868:	08015eb8 	.word	0x08015eb8
 801386c:	08015eab 	.word	0x08015eab

08013870 <_calloc_r>:
 8013870:	b570      	push	{r4, r5, r6, lr}
 8013872:	fba1 5402 	umull	r5, r4, r1, r2
 8013876:	b93c      	cbnz	r4, 8013888 <_calloc_r+0x18>
 8013878:	4629      	mov	r1, r5
 801387a:	f7ff f901 	bl	8012a80 <_malloc_r>
 801387e:	4606      	mov	r6, r0
 8013880:	b928      	cbnz	r0, 801388e <_calloc_r+0x1e>
 8013882:	2600      	movs	r6, #0
 8013884:	4630      	mov	r0, r6
 8013886:	bd70      	pop	{r4, r5, r6, pc}
 8013888:	220c      	movs	r2, #12
 801388a:	6002      	str	r2, [r0, #0]
 801388c:	e7f9      	b.n	8013882 <_calloc_r+0x12>
 801388e:	462a      	mov	r2, r5
 8013890:	4621      	mov	r1, r4
 8013892:	f7fe f967 	bl	8011b64 <memset>
 8013896:	e7f5      	b.n	8013884 <_calloc_r+0x14>

08013898 <__ascii_mbtowc>:
 8013898:	b082      	sub	sp, #8
 801389a:	b901      	cbnz	r1, 801389e <__ascii_mbtowc+0x6>
 801389c:	a901      	add	r1, sp, #4
 801389e:	b142      	cbz	r2, 80138b2 <__ascii_mbtowc+0x1a>
 80138a0:	b14b      	cbz	r3, 80138b6 <__ascii_mbtowc+0x1e>
 80138a2:	7813      	ldrb	r3, [r2, #0]
 80138a4:	600b      	str	r3, [r1, #0]
 80138a6:	7812      	ldrb	r2, [r2, #0]
 80138a8:	1e10      	subs	r0, r2, #0
 80138aa:	bf18      	it	ne
 80138ac:	2001      	movne	r0, #1
 80138ae:	b002      	add	sp, #8
 80138b0:	4770      	bx	lr
 80138b2:	4610      	mov	r0, r2
 80138b4:	e7fb      	b.n	80138ae <__ascii_mbtowc+0x16>
 80138b6:	f06f 0001 	mvn.w	r0, #1
 80138ba:	e7f8      	b.n	80138ae <__ascii_mbtowc+0x16>

080138bc <_realloc_r>:
 80138bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138c0:	4680      	mov	r8, r0
 80138c2:	4615      	mov	r5, r2
 80138c4:	460c      	mov	r4, r1
 80138c6:	b921      	cbnz	r1, 80138d2 <_realloc_r+0x16>
 80138c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80138cc:	4611      	mov	r1, r2
 80138ce:	f7ff b8d7 	b.w	8012a80 <_malloc_r>
 80138d2:	b92a      	cbnz	r2, 80138e0 <_realloc_r+0x24>
 80138d4:	f7ff f860 	bl	8012998 <_free_r>
 80138d8:	2400      	movs	r4, #0
 80138da:	4620      	mov	r0, r4
 80138dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e0:	f000 f841 	bl	8013966 <_malloc_usable_size_r>
 80138e4:	4285      	cmp	r5, r0
 80138e6:	4606      	mov	r6, r0
 80138e8:	d802      	bhi.n	80138f0 <_realloc_r+0x34>
 80138ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80138ee:	d8f4      	bhi.n	80138da <_realloc_r+0x1e>
 80138f0:	4629      	mov	r1, r5
 80138f2:	4640      	mov	r0, r8
 80138f4:	f7ff f8c4 	bl	8012a80 <_malloc_r>
 80138f8:	4607      	mov	r7, r0
 80138fa:	2800      	cmp	r0, #0
 80138fc:	d0ec      	beq.n	80138d8 <_realloc_r+0x1c>
 80138fe:	42b5      	cmp	r5, r6
 8013900:	462a      	mov	r2, r5
 8013902:	4621      	mov	r1, r4
 8013904:	bf28      	it	cs
 8013906:	4632      	movcs	r2, r6
 8013908:	f7fe f9e9 	bl	8011cde <memcpy>
 801390c:	4621      	mov	r1, r4
 801390e:	4640      	mov	r0, r8
 8013910:	f7ff f842 	bl	8012998 <_free_r>
 8013914:	463c      	mov	r4, r7
 8013916:	e7e0      	b.n	80138da <_realloc_r+0x1e>

08013918 <__ascii_wctomb>:
 8013918:	4603      	mov	r3, r0
 801391a:	4608      	mov	r0, r1
 801391c:	b141      	cbz	r1, 8013930 <__ascii_wctomb+0x18>
 801391e:	2aff      	cmp	r2, #255	@ 0xff
 8013920:	d904      	bls.n	801392c <__ascii_wctomb+0x14>
 8013922:	228a      	movs	r2, #138	@ 0x8a
 8013924:	601a      	str	r2, [r3, #0]
 8013926:	f04f 30ff 	mov.w	r0, #4294967295
 801392a:	4770      	bx	lr
 801392c:	700a      	strb	r2, [r1, #0]
 801392e:	2001      	movs	r0, #1
 8013930:	4770      	bx	lr
	...

08013934 <fiprintf>:
 8013934:	b40e      	push	{r1, r2, r3}
 8013936:	b503      	push	{r0, r1, lr}
 8013938:	4601      	mov	r1, r0
 801393a:	ab03      	add	r3, sp, #12
 801393c:	4805      	ldr	r0, [pc, #20]	@ (8013954 <fiprintf+0x20>)
 801393e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013942:	6800      	ldr	r0, [r0, #0]
 8013944:	9301      	str	r3, [sp, #4]
 8013946:	f000 f83f 	bl	80139c8 <_vfiprintf_r>
 801394a:	b002      	add	sp, #8
 801394c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013950:	b003      	add	sp, #12
 8013952:	4770      	bx	lr
 8013954:	20000060 	.word	0x20000060

08013958 <abort>:
 8013958:	b508      	push	{r3, lr}
 801395a:	2006      	movs	r0, #6
 801395c:	f000 f974 	bl	8013c48 <raise>
 8013960:	2001      	movs	r0, #1
 8013962:	f7ef fe97 	bl	8003694 <_exit>

08013966 <_malloc_usable_size_r>:
 8013966:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801396a:	1f18      	subs	r0, r3, #4
 801396c:	2b00      	cmp	r3, #0
 801396e:	bfbc      	itt	lt
 8013970:	580b      	ldrlt	r3, [r1, r0]
 8013972:	18c0      	addlt	r0, r0, r3
 8013974:	4770      	bx	lr

08013976 <__sfputc_r>:
 8013976:	6893      	ldr	r3, [r2, #8]
 8013978:	3b01      	subs	r3, #1
 801397a:	2b00      	cmp	r3, #0
 801397c:	b410      	push	{r4}
 801397e:	6093      	str	r3, [r2, #8]
 8013980:	da08      	bge.n	8013994 <__sfputc_r+0x1e>
 8013982:	6994      	ldr	r4, [r2, #24]
 8013984:	42a3      	cmp	r3, r4
 8013986:	db01      	blt.n	801398c <__sfputc_r+0x16>
 8013988:	290a      	cmp	r1, #10
 801398a:	d103      	bne.n	8013994 <__sfputc_r+0x1e>
 801398c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013990:	f7fe b83a 	b.w	8011a08 <__swbuf_r>
 8013994:	6813      	ldr	r3, [r2, #0]
 8013996:	1c58      	adds	r0, r3, #1
 8013998:	6010      	str	r0, [r2, #0]
 801399a:	7019      	strb	r1, [r3, #0]
 801399c:	4608      	mov	r0, r1
 801399e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139a2:	4770      	bx	lr

080139a4 <__sfputs_r>:
 80139a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139a6:	4606      	mov	r6, r0
 80139a8:	460f      	mov	r7, r1
 80139aa:	4614      	mov	r4, r2
 80139ac:	18d5      	adds	r5, r2, r3
 80139ae:	42ac      	cmp	r4, r5
 80139b0:	d101      	bne.n	80139b6 <__sfputs_r+0x12>
 80139b2:	2000      	movs	r0, #0
 80139b4:	e007      	b.n	80139c6 <__sfputs_r+0x22>
 80139b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139ba:	463a      	mov	r2, r7
 80139bc:	4630      	mov	r0, r6
 80139be:	f7ff ffda 	bl	8013976 <__sfputc_r>
 80139c2:	1c43      	adds	r3, r0, #1
 80139c4:	d1f3      	bne.n	80139ae <__sfputs_r+0xa>
 80139c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080139c8 <_vfiprintf_r>:
 80139c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139cc:	460d      	mov	r5, r1
 80139ce:	b09d      	sub	sp, #116	@ 0x74
 80139d0:	4614      	mov	r4, r2
 80139d2:	4698      	mov	r8, r3
 80139d4:	4606      	mov	r6, r0
 80139d6:	b118      	cbz	r0, 80139e0 <_vfiprintf_r+0x18>
 80139d8:	6a03      	ldr	r3, [r0, #32]
 80139da:	b90b      	cbnz	r3, 80139e0 <_vfiprintf_r+0x18>
 80139dc:	f7fd fedc 	bl	8011798 <__sinit>
 80139e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139e2:	07d9      	lsls	r1, r3, #31
 80139e4:	d405      	bmi.n	80139f2 <_vfiprintf_r+0x2a>
 80139e6:	89ab      	ldrh	r3, [r5, #12]
 80139e8:	059a      	lsls	r2, r3, #22
 80139ea:	d402      	bmi.n	80139f2 <_vfiprintf_r+0x2a>
 80139ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139ee:	f7fe f96c 	bl	8011cca <__retarget_lock_acquire_recursive>
 80139f2:	89ab      	ldrh	r3, [r5, #12]
 80139f4:	071b      	lsls	r3, r3, #28
 80139f6:	d501      	bpl.n	80139fc <_vfiprintf_r+0x34>
 80139f8:	692b      	ldr	r3, [r5, #16]
 80139fa:	b99b      	cbnz	r3, 8013a24 <_vfiprintf_r+0x5c>
 80139fc:	4629      	mov	r1, r5
 80139fe:	4630      	mov	r0, r6
 8013a00:	f7fe f840 	bl	8011a84 <__swsetup_r>
 8013a04:	b170      	cbz	r0, 8013a24 <_vfiprintf_r+0x5c>
 8013a06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013a08:	07dc      	lsls	r4, r3, #31
 8013a0a:	d504      	bpl.n	8013a16 <_vfiprintf_r+0x4e>
 8013a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a10:	b01d      	add	sp, #116	@ 0x74
 8013a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a16:	89ab      	ldrh	r3, [r5, #12]
 8013a18:	0598      	lsls	r0, r3, #22
 8013a1a:	d4f7      	bmi.n	8013a0c <_vfiprintf_r+0x44>
 8013a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a1e:	f7fe f955 	bl	8011ccc <__retarget_lock_release_recursive>
 8013a22:	e7f3      	b.n	8013a0c <_vfiprintf_r+0x44>
 8013a24:	2300      	movs	r3, #0
 8013a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a28:	2320      	movs	r3, #32
 8013a2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a32:	2330      	movs	r3, #48	@ 0x30
 8013a34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013be4 <_vfiprintf_r+0x21c>
 8013a38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013a3c:	f04f 0901 	mov.w	r9, #1
 8013a40:	4623      	mov	r3, r4
 8013a42:	469a      	mov	sl, r3
 8013a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a48:	b10a      	cbz	r2, 8013a4e <_vfiprintf_r+0x86>
 8013a4a:	2a25      	cmp	r2, #37	@ 0x25
 8013a4c:	d1f9      	bne.n	8013a42 <_vfiprintf_r+0x7a>
 8013a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8013a52:	d00b      	beq.n	8013a6c <_vfiprintf_r+0xa4>
 8013a54:	465b      	mov	r3, fp
 8013a56:	4622      	mov	r2, r4
 8013a58:	4629      	mov	r1, r5
 8013a5a:	4630      	mov	r0, r6
 8013a5c:	f7ff ffa2 	bl	80139a4 <__sfputs_r>
 8013a60:	3001      	adds	r0, #1
 8013a62:	f000 80a7 	beq.w	8013bb4 <_vfiprintf_r+0x1ec>
 8013a66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a68:	445a      	add	r2, fp
 8013a6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8013a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f000 809f 	beq.w	8013bb4 <_vfiprintf_r+0x1ec>
 8013a76:	2300      	movs	r3, #0
 8013a78:	f04f 32ff 	mov.w	r2, #4294967295
 8013a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a80:	f10a 0a01 	add.w	sl, sl, #1
 8013a84:	9304      	str	r3, [sp, #16]
 8013a86:	9307      	str	r3, [sp, #28]
 8013a88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013a8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8013a8e:	4654      	mov	r4, sl
 8013a90:	2205      	movs	r2, #5
 8013a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a96:	4853      	ldr	r0, [pc, #332]	@ (8013be4 <_vfiprintf_r+0x21c>)
 8013a98:	f7ec fba2 	bl	80001e0 <memchr>
 8013a9c:	9a04      	ldr	r2, [sp, #16]
 8013a9e:	b9d8      	cbnz	r0, 8013ad8 <_vfiprintf_r+0x110>
 8013aa0:	06d1      	lsls	r1, r2, #27
 8013aa2:	bf44      	itt	mi
 8013aa4:	2320      	movmi	r3, #32
 8013aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013aaa:	0713      	lsls	r3, r2, #28
 8013aac:	bf44      	itt	mi
 8013aae:	232b      	movmi	r3, #43	@ 0x2b
 8013ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013aba:	d015      	beq.n	8013ae8 <_vfiprintf_r+0x120>
 8013abc:	9a07      	ldr	r2, [sp, #28]
 8013abe:	4654      	mov	r4, sl
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	f04f 0c0a 	mov.w	ip, #10
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013acc:	3b30      	subs	r3, #48	@ 0x30
 8013ace:	2b09      	cmp	r3, #9
 8013ad0:	d94b      	bls.n	8013b6a <_vfiprintf_r+0x1a2>
 8013ad2:	b1b0      	cbz	r0, 8013b02 <_vfiprintf_r+0x13a>
 8013ad4:	9207      	str	r2, [sp, #28]
 8013ad6:	e014      	b.n	8013b02 <_vfiprintf_r+0x13a>
 8013ad8:	eba0 0308 	sub.w	r3, r0, r8
 8013adc:	fa09 f303 	lsl.w	r3, r9, r3
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	9304      	str	r3, [sp, #16]
 8013ae4:	46a2      	mov	sl, r4
 8013ae6:	e7d2      	b.n	8013a8e <_vfiprintf_r+0xc6>
 8013ae8:	9b03      	ldr	r3, [sp, #12]
 8013aea:	1d19      	adds	r1, r3, #4
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	9103      	str	r1, [sp, #12]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	bfbb      	ittet	lt
 8013af4:	425b      	neglt	r3, r3
 8013af6:	f042 0202 	orrlt.w	r2, r2, #2
 8013afa:	9307      	strge	r3, [sp, #28]
 8013afc:	9307      	strlt	r3, [sp, #28]
 8013afe:	bfb8      	it	lt
 8013b00:	9204      	strlt	r2, [sp, #16]
 8013b02:	7823      	ldrb	r3, [r4, #0]
 8013b04:	2b2e      	cmp	r3, #46	@ 0x2e
 8013b06:	d10a      	bne.n	8013b1e <_vfiprintf_r+0x156>
 8013b08:	7863      	ldrb	r3, [r4, #1]
 8013b0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8013b0c:	d132      	bne.n	8013b74 <_vfiprintf_r+0x1ac>
 8013b0e:	9b03      	ldr	r3, [sp, #12]
 8013b10:	1d1a      	adds	r2, r3, #4
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	9203      	str	r2, [sp, #12]
 8013b16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013b1a:	3402      	adds	r4, #2
 8013b1c:	9305      	str	r3, [sp, #20]
 8013b1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013bf4 <_vfiprintf_r+0x22c>
 8013b22:	7821      	ldrb	r1, [r4, #0]
 8013b24:	2203      	movs	r2, #3
 8013b26:	4650      	mov	r0, sl
 8013b28:	f7ec fb5a 	bl	80001e0 <memchr>
 8013b2c:	b138      	cbz	r0, 8013b3e <_vfiprintf_r+0x176>
 8013b2e:	9b04      	ldr	r3, [sp, #16]
 8013b30:	eba0 000a 	sub.w	r0, r0, sl
 8013b34:	2240      	movs	r2, #64	@ 0x40
 8013b36:	4082      	lsls	r2, r0
 8013b38:	4313      	orrs	r3, r2
 8013b3a:	3401      	adds	r4, #1
 8013b3c:	9304      	str	r3, [sp, #16]
 8013b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b42:	4829      	ldr	r0, [pc, #164]	@ (8013be8 <_vfiprintf_r+0x220>)
 8013b44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013b48:	2206      	movs	r2, #6
 8013b4a:	f7ec fb49 	bl	80001e0 <memchr>
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	d03f      	beq.n	8013bd2 <_vfiprintf_r+0x20a>
 8013b52:	4b26      	ldr	r3, [pc, #152]	@ (8013bec <_vfiprintf_r+0x224>)
 8013b54:	bb1b      	cbnz	r3, 8013b9e <_vfiprintf_r+0x1d6>
 8013b56:	9b03      	ldr	r3, [sp, #12]
 8013b58:	3307      	adds	r3, #7
 8013b5a:	f023 0307 	bic.w	r3, r3, #7
 8013b5e:	3308      	adds	r3, #8
 8013b60:	9303      	str	r3, [sp, #12]
 8013b62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b64:	443b      	add	r3, r7
 8013b66:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b68:	e76a      	b.n	8013a40 <_vfiprintf_r+0x78>
 8013b6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b6e:	460c      	mov	r4, r1
 8013b70:	2001      	movs	r0, #1
 8013b72:	e7a8      	b.n	8013ac6 <_vfiprintf_r+0xfe>
 8013b74:	2300      	movs	r3, #0
 8013b76:	3401      	adds	r4, #1
 8013b78:	9305      	str	r3, [sp, #20]
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	f04f 0c0a 	mov.w	ip, #10
 8013b80:	4620      	mov	r0, r4
 8013b82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b86:	3a30      	subs	r2, #48	@ 0x30
 8013b88:	2a09      	cmp	r2, #9
 8013b8a:	d903      	bls.n	8013b94 <_vfiprintf_r+0x1cc>
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d0c6      	beq.n	8013b1e <_vfiprintf_r+0x156>
 8013b90:	9105      	str	r1, [sp, #20]
 8013b92:	e7c4      	b.n	8013b1e <_vfiprintf_r+0x156>
 8013b94:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b98:	4604      	mov	r4, r0
 8013b9a:	2301      	movs	r3, #1
 8013b9c:	e7f0      	b.n	8013b80 <_vfiprintf_r+0x1b8>
 8013b9e:	ab03      	add	r3, sp, #12
 8013ba0:	9300      	str	r3, [sp, #0]
 8013ba2:	462a      	mov	r2, r5
 8013ba4:	4b12      	ldr	r3, [pc, #72]	@ (8013bf0 <_vfiprintf_r+0x228>)
 8013ba6:	a904      	add	r1, sp, #16
 8013ba8:	4630      	mov	r0, r6
 8013baa:	f7fd f9b1 	bl	8010f10 <_printf_float>
 8013bae:	4607      	mov	r7, r0
 8013bb0:	1c78      	adds	r0, r7, #1
 8013bb2:	d1d6      	bne.n	8013b62 <_vfiprintf_r+0x19a>
 8013bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bb6:	07d9      	lsls	r1, r3, #31
 8013bb8:	d405      	bmi.n	8013bc6 <_vfiprintf_r+0x1fe>
 8013bba:	89ab      	ldrh	r3, [r5, #12]
 8013bbc:	059a      	lsls	r2, r3, #22
 8013bbe:	d402      	bmi.n	8013bc6 <_vfiprintf_r+0x1fe>
 8013bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bc2:	f7fe f883 	bl	8011ccc <__retarget_lock_release_recursive>
 8013bc6:	89ab      	ldrh	r3, [r5, #12]
 8013bc8:	065b      	lsls	r3, r3, #25
 8013bca:	f53f af1f 	bmi.w	8013a0c <_vfiprintf_r+0x44>
 8013bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013bd0:	e71e      	b.n	8013a10 <_vfiprintf_r+0x48>
 8013bd2:	ab03      	add	r3, sp, #12
 8013bd4:	9300      	str	r3, [sp, #0]
 8013bd6:	462a      	mov	r2, r5
 8013bd8:	4b05      	ldr	r3, [pc, #20]	@ (8013bf0 <_vfiprintf_r+0x228>)
 8013bda:	a904      	add	r1, sp, #16
 8013bdc:	4630      	mov	r0, r6
 8013bde:	f7fd fc2f 	bl	8011440 <_printf_i>
 8013be2:	e7e4      	b.n	8013bae <_vfiprintf_r+0x1e6>
 8013be4:	08015e90 	.word	0x08015e90
 8013be8:	08015e9a 	.word	0x08015e9a
 8013bec:	08010f11 	.word	0x08010f11
 8013bf0:	080139a5 	.word	0x080139a5
 8013bf4:	08015e96 	.word	0x08015e96

08013bf8 <_raise_r>:
 8013bf8:	291f      	cmp	r1, #31
 8013bfa:	b538      	push	{r3, r4, r5, lr}
 8013bfc:	4605      	mov	r5, r0
 8013bfe:	460c      	mov	r4, r1
 8013c00:	d904      	bls.n	8013c0c <_raise_r+0x14>
 8013c02:	2316      	movs	r3, #22
 8013c04:	6003      	str	r3, [r0, #0]
 8013c06:	f04f 30ff 	mov.w	r0, #4294967295
 8013c0a:	bd38      	pop	{r3, r4, r5, pc}
 8013c0c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013c0e:	b112      	cbz	r2, 8013c16 <_raise_r+0x1e>
 8013c10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c14:	b94b      	cbnz	r3, 8013c2a <_raise_r+0x32>
 8013c16:	4628      	mov	r0, r5
 8013c18:	f000 f830 	bl	8013c7c <_getpid_r>
 8013c1c:	4622      	mov	r2, r4
 8013c1e:	4601      	mov	r1, r0
 8013c20:	4628      	mov	r0, r5
 8013c22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c26:	f000 b817 	b.w	8013c58 <_kill_r>
 8013c2a:	2b01      	cmp	r3, #1
 8013c2c:	d00a      	beq.n	8013c44 <_raise_r+0x4c>
 8013c2e:	1c59      	adds	r1, r3, #1
 8013c30:	d103      	bne.n	8013c3a <_raise_r+0x42>
 8013c32:	2316      	movs	r3, #22
 8013c34:	6003      	str	r3, [r0, #0]
 8013c36:	2001      	movs	r0, #1
 8013c38:	e7e7      	b.n	8013c0a <_raise_r+0x12>
 8013c3a:	2100      	movs	r1, #0
 8013c3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013c40:	4620      	mov	r0, r4
 8013c42:	4798      	blx	r3
 8013c44:	2000      	movs	r0, #0
 8013c46:	e7e0      	b.n	8013c0a <_raise_r+0x12>

08013c48 <raise>:
 8013c48:	4b02      	ldr	r3, [pc, #8]	@ (8013c54 <raise+0xc>)
 8013c4a:	4601      	mov	r1, r0
 8013c4c:	6818      	ldr	r0, [r3, #0]
 8013c4e:	f7ff bfd3 	b.w	8013bf8 <_raise_r>
 8013c52:	bf00      	nop
 8013c54:	20000060 	.word	0x20000060

08013c58 <_kill_r>:
 8013c58:	b538      	push	{r3, r4, r5, lr}
 8013c5a:	4d07      	ldr	r5, [pc, #28]	@ (8013c78 <_kill_r+0x20>)
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	4604      	mov	r4, r0
 8013c60:	4608      	mov	r0, r1
 8013c62:	4611      	mov	r1, r2
 8013c64:	602b      	str	r3, [r5, #0]
 8013c66:	f7ef fd05 	bl	8003674 <_kill>
 8013c6a:	1c43      	adds	r3, r0, #1
 8013c6c:	d102      	bne.n	8013c74 <_kill_r+0x1c>
 8013c6e:	682b      	ldr	r3, [r5, #0]
 8013c70:	b103      	cbz	r3, 8013c74 <_kill_r+0x1c>
 8013c72:	6023      	str	r3, [r4, #0]
 8013c74:	bd38      	pop	{r3, r4, r5, pc}
 8013c76:	bf00      	nop
 8013c78:	2000105c 	.word	0x2000105c

08013c7c <_getpid_r>:
 8013c7c:	f7ef bcf2 	b.w	8003664 <_getpid>

08013c80 <_init>:
 8013c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c82:	bf00      	nop
 8013c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c86:	bc08      	pop	{r3}
 8013c88:	469e      	mov	lr, r3
 8013c8a:	4770      	bx	lr

08013c8c <_fini>:
 8013c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c8e:	bf00      	nop
 8013c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c92:	bc08      	pop	{r3}
 8013c94:	469e      	mov	lr, r3
 8013c96:	4770      	bx	lr
